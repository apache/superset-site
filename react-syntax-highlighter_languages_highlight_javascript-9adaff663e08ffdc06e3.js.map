{"version":3,"sources":["webpack:///./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/javascript.js"],"names":["KEYWORDS","LITERALS","BUILT_INS","concat","source","re","lookahead","_len","arguments","length","args","Array","_key","joined","map","x","join","module","exports","hljs","IDENT_RE$1","FRAGMENT","XML_TAG","begin","end","isTrulyOpeningTag","match","response","afterMatchIndex","index","nextChar","input","_ref","after","tag","slice","indexOf","hasClosingTag","ignoreMatch","KEYWORDS$1","$pattern","keyword","literal","built_in","frac","NUMBER","className","variants","relevance","SUBST","keywords","contains","HTML_TEMPLATE","starts","returnEnd","BACKSLASH_ESCAPE","subLanguage","CSS_TEMPLATE","TEMPLATE_STRING","COMMENT","endsParent","C_BLOCK_COMMENT_MODE","C_LINE_COMMENT_MODE","SUBST_INTERNALS","APOS_STRING_MODE","QUOTE_STRING_MODE","REGEXP_MODE","SUBST_AND_COMMENTS","PARAMS_CONTAINS","PARAMS","excludeBegin","excludeEnd","name","aliases","illegal","SHEBANG","label","binary","RE_STARTERS_RE","UNDERSCORE_IDENT_RE","returnBegin","skip","beginKeywords","inherit","TITLE_MODE","UNDERSCORE_TITLE_MODE"],"mappings":"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","file":"react-syntax-highlighter_languages_highlight_javascript-9adaff663e08ffdc06e3.js","sourcesContent":["var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\nvar KEYWORDS = [\"as\", // for exports\n\"in\", \"of\", \"if\", \"for\", \"while\", \"finally\", \"var\", \"new\", \"function\", \"do\", \"return\", \"void\", \"else\", \"break\", \"catch\", \"instanceof\", \"with\", \"throw\", \"case\", \"default\", \"try\", \"switch\", \"continue\", \"typeof\", \"delete\", \"let\", \"yield\", \"const\", \"class\", // JS handles these with a special rule\n// \"get\",\n// \"set\",\n\"debugger\", \"async\", \"await\", \"static\", \"import\", \"from\", \"export\", \"extends\"];\nvar LITERALS = [\"true\", \"false\", \"null\", \"undefined\", \"NaN\", \"Infinity\"];\nvar TYPES = [\"Intl\", \"DataView\", \"Number\", \"Math\", \"Date\", \"String\", \"RegExp\", \"Object\", \"Function\", \"Boolean\", \"Error\", \"Symbol\", \"Set\", \"Map\", \"WeakSet\", \"WeakMap\", \"Proxy\", \"Reflect\", \"JSON\", \"Promise\", \"Float64Array\", \"Int16Array\", \"Int32Array\", \"Int8Array\", \"Uint16Array\", \"Uint32Array\", \"Float32Array\", \"Array\", \"Uint8Array\", \"Uint8ClampedArray\", \"ArrayBuffer\", \"BigInt64Array\", \"BigUint64Array\", \"BigInt\"];\nvar ERROR_TYPES = [\"EvalError\", \"InternalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\"];\nvar BUILT_IN_GLOBALS = [\"setInterval\", \"setTimeout\", \"clearInterval\", \"clearTimeout\", \"require\", \"exports\", \"eval\", \"isFinite\", \"isNaN\", \"parseFloat\", \"parseInt\", \"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\", \"escape\", \"unescape\"];\nvar BUILT_IN_VARIABLES = [\"arguments\", \"this\", \"super\", \"console\", \"window\", \"document\", \"localStorage\", \"module\", \"global\" // Node.js\n];\nvar BUILT_INS = [].concat(BUILT_IN_GLOBALS, BUILT_IN_VARIABLES, TYPES, ERROR_TYPES);\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var joined = args.map(function (x) {\n    return source(x);\n  }).join(\"\");\n  return joined;\n}\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/\n\n/** @type LanguageFn */\n\n\nfunction javascript(hljs) {\n  /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */\n  var hasClosingTag = function hasClosingTag(match, _ref) {\n    var after = _ref.after;\n    var tag = \"</\" + match[0].slice(1);\n    var pos = match.input.indexOf(tag, after);\n    return pos !== -1;\n  };\n\n  var IDENT_RE$1 = IDENT_RE;\n  var FRAGMENT = {\n    begin: '<>',\n    end: '</>'\n  };\n  var XML_TAG = {\n    begin: /<[A-Za-z0-9\\\\._:-]+/,\n    end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n\n    /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */\n    isTrulyOpeningTag: function isTrulyOpeningTag(match, response) {\n      var afterMatchIndex = match[0].length + match.index;\n      var nextChar = match.input[afterMatchIndex]; // nested type?\n      // HTML should not include another raw `<` inside a tag\n      // But a type might: `<Array<Array<number>>`, etc.\n\n      if (nextChar === \"<\") {\n        response.ignoreMatch();\n        return;\n      } // <something>\n      // This is now either a tag or a type.\n\n\n      if (nextChar === \">\") {\n        // if we cannot find a matching closing tag, then we\n        // will ignore it\n        if (!hasClosingTag(match, {\n          after: afterMatchIndex\n        })) {\n          response.ignoreMatch();\n        }\n      }\n    }\n  };\n  var KEYWORDS$1 = {\n    $pattern: IDENT_RE,\n    keyword: KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_INS\n  }; // https://tc39.es/ecma262/#sec-literals-numeric-literals\n\n  var decimalDigits = '[0-9](_?[0-9])*';\n  var frac = \"\\\\.(\".concat(decimalDigits, \")\"); // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n\n  var decimalInteger = \"0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*\";\n  var NUMBER = {\n    className: 'number',\n    variants: [// DecimalLiteral\n    {\n      begin: \"(\\\\b(\".concat(decimalInteger, \")((\").concat(frac, \")|\\\\.)?|(\").concat(frac, \"))\") + \"[eE][+-]?(\".concat(decimalDigits, \")\\\\b\")\n    }, {\n      begin: \"\\\\b(\".concat(decimalInteger, \")\\\\b((\").concat(frac, \")\\\\b|\\\\.)?|(\").concat(frac, \")\\\\b\")\n    }, // DecimalBigIntegerLiteral\n    {\n      begin: \"\\\\b(0|[1-9](_?[0-9])*)n\\\\b\"\n    }, // NonDecimalIntegerLiteral\n    {\n      begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n    }, {\n      begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n    }, {\n      begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n    }, // LegacyOctalIntegerLiteral (does not include underscore separators)\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    {\n      begin: \"\\\\b0[0-7]+n?\\\\b\"\n    }],\n    relevance: 0\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{',\n    end: '\\\\}',\n    keywords: KEYWORDS$1,\n    contains: [] // defined later\n\n  };\n  var HTML_TEMPLATE = {\n    begin: 'html`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      subLanguage: 'xml'\n    }\n  };\n  var CSS_TEMPLATE = {\n    begin: 'css`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      subLanguage: 'css'\n    }\n  };\n  var TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`',\n    end: '`',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n  };\n  var JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, '\\\\*/', {\n    relevance: 0,\n    contains: [{\n      className: 'doctag',\n      begin: '@[A-Za-z]+',\n      contains: [{\n        className: 'type',\n        begin: '\\\\{',\n        end: '\\\\}',\n        relevance: 0\n      }, {\n        className: 'variable',\n        begin: IDENT_RE$1 + '(?=\\\\s*(-)|$)',\n        endsParent: true,\n        relevance: 0\n      }, // eat spaces (not newlines) so we can find\n      // types or variables\n      {\n        begin: /(?=[^\\n])\\s/,\n        relevance: 0\n      }]\n    }]\n  });\n  var COMMENT = {\n    className: \"comment\",\n    variants: [JSDOC_COMMENT, hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE]\n  };\n  var SUBST_INTERNALS = [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, HTML_TEMPLATE, CSS_TEMPLATE, TEMPLATE_STRING, NUMBER, hljs.REGEXP_MODE];\n  SUBST.contains = SUBST_INTERNALS.concat({\n    // we need to pair up {} inside our subst to prevent\n    // it from ending too early by matching another }\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS$1,\n    contains: [\"self\"].concat(SUBST_INTERNALS)\n  });\n  var SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n  var PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([// eat recursive parens in sub expressions\n  {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS$1,\n    contains: [\"self\"].concat(SUBST_AND_COMMENTS)\n  }]);\n  var PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: KEYWORDS$1,\n    contains: PARAMS_CONTAINS\n  };\n  return {\n    name: 'Javascript',\n    aliases: ['js', 'jsx', 'mjs', 'cjs'],\n    keywords: KEYWORDS$1,\n    // this will be extended by TypeScript\n    exports: {\n      PARAMS_CONTAINS: PARAMS_CONTAINS\n    },\n    illegal: /#(?![$_A-z])/,\n    contains: [hljs.SHEBANG({\n      label: \"shebang\",\n      binary: \"node\",\n      relevance: 5\n    }), {\n      label: \"use_strict\",\n      className: 'meta',\n      relevance: 10,\n      begin: /^\\s*['\"]use (strict|asm)['\"]/\n    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, HTML_TEMPLATE, CSS_TEMPLATE, TEMPLATE_STRING, COMMENT, NUMBER, {\n      // object attr container\n      begin: concat(/[{,\\n]\\s*/, // we need to look ahead to make sure that we actually have an\n      // attribute coming up so we don't steal a comma from a potential\n      // \"value\" container\n      //\n      // NOTE: this might not work how you think.  We don't actually always\n      // enter this mode and stay.  Instead it might merely match `,\n      // <comments up next>` and then immediately end after the , because it\n      // fails to find any actual attrs. But this still does the job because\n      // it prevents the value contain rule from grabbing this instead and\n      // prevening this rule from firing when we actually DO have keys.\n      lookahead(concat( // we also need to allow for multiple possible comments inbetween\n      // the first key:value pairing\n      /(((\\/\\/.*$)|(\\/\\*(\\*[^/]|[^*])*\\*\\/))\\s*)*/, IDENT_RE$1 + '\\\\s*:'))),\n      relevance: 0,\n      contains: [{\n        className: 'attr',\n        begin: IDENT_RE$1 + lookahead('\\\\s*:'),\n        relevance: 0\n      }]\n    }, {\n      // \"value\" container\n      begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n      keywords: 'return throw case',\n      contains: [COMMENT, hljs.REGEXP_MODE, {\n        className: 'function',\n        // we have to count the parens to make sure we actually have the\n        // correct bounding ( ) before the =>.  There could be any number of\n        // sub-expressions inside also surrounded by parens.\n        begin: '(\\\\(' + '[^()]*(\\\\(' + '[^()]*(\\\\(' + '[^()]*' + '\\\\)[^()]*)*' + '\\\\)[^()]*)*' + '\\\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\\\s*=>',\n        returnBegin: true,\n        end: '\\\\s*=>',\n        contains: [{\n          className: 'params',\n          variants: [{\n            begin: hljs.UNDERSCORE_IDENT_RE,\n            relevance: 0\n          }, {\n            className: null,\n            begin: /\\(\\s*\\)/,\n            skip: true\n          }, {\n            begin: /\\(/,\n            end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            keywords: KEYWORDS$1,\n            contains: PARAMS_CONTAINS\n          }]\n        }]\n      }, {\n        // could be a comma delimited list of params to a function call\n        begin: /,/,\n        relevance: 0\n      }, {\n        className: '',\n        begin: /\\s/,\n        end: /\\s*/,\n        skip: true\n      }, {\n        // JSX\n        variants: [{\n          begin: FRAGMENT.begin,\n          end: FRAGMENT.end\n        }, {\n          begin: XML_TAG.begin,\n          // we carefully check the opening tag to see if it truly\n          // is a tag and not a false positive\n          'on:begin': XML_TAG.isTrulyOpeningTag,\n          end: XML_TAG.end\n        }],\n        subLanguage: 'xml',\n        contains: [{\n          begin: XML_TAG.begin,\n          end: XML_TAG.end,\n          skip: true,\n          contains: ['self']\n        }]\n      }],\n      relevance: 0\n    }, {\n      className: 'function',\n      beginKeywords: 'function',\n      end: /[{;]/,\n      excludeEnd: true,\n      keywords: KEYWORDS$1,\n      contains: ['self', hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      }), PARAMS],\n      illegal: /%/\n    }, {\n      // prevent this from getting swallowed up by function\n      // since they appear \"function like\"\n      beginKeywords: \"while if switch catch for\"\n    }, {\n      className: 'function',\n      // we have to count the parens to make sure we actually have the correct\n      // bounding ( ).  There could be any number of sub-expressions inside\n      // also surrounded by parens.\n      begin: hljs.UNDERSCORE_IDENT_RE + '\\\\(' + // first parens\n      '[^()]*(\\\\(' + '[^()]*(\\\\(' + '[^()]*' + '\\\\)[^()]*)*' + '\\\\)[^()]*)*' + '\\\\)\\\\s*\\\\{',\n      // end parens\n      returnBegin: true,\n      contains: [PARAMS, hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      })]\n    }, // hack: prevents detection of keywords in some circumstances\n    // .keyword()\n    // $keyword = x\n    {\n      variants: [{\n        begin: '\\\\.' + IDENT_RE$1\n      }, {\n        begin: '\\\\$' + IDENT_RE$1\n      }],\n      relevance: 0\n    }, {\n      // ES6 class\n      className: 'class',\n      beginKeywords: 'class',\n      end: /[{;=]/,\n      excludeEnd: true,\n      illegal: /[:\"[\\]]/,\n      contains: [{\n        beginKeywords: 'extends'\n      }, hljs.UNDERSCORE_TITLE_MODE]\n    }, {\n      begin: /\\b(?=constructor)/,\n      end: /[{;]/,\n      excludeEnd: true,\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      }), 'self', PARAMS]\n    }, {\n      begin: '(get|set)\\\\s+(?=' + IDENT_RE$1 + '\\\\()',\n      end: /\\{/,\n      keywords: \"get set\",\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      }), {\n        begin: /\\(\\)/\n      }, // eat to avoid empty params\n      PARAMS]\n    }, {\n      begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n\n    }]\n  };\n}\n\nmodule.exports = javascript;"],"sourceRoot":""}