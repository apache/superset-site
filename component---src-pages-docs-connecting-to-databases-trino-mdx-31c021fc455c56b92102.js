(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{LV53:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n("k1TG"),o=n("8o2o"),r=(n("q1tI"),n("7ljp")),i=n("hhGP"),c=(n("qKvR"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/docs/Connecting to Databases/trino.mdx"}});var b={_frontmatter:c},l=i.a;function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)(l,Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"trino"},"Trino"),Object(r.b)("p",null,"Superset supports Trino >=352 via SQLAlchemy by using the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://pypi.org/project/sqlalchemy-trino/"}),"sqlalchemy-trino")," library."),Object(r.b)("h3",{id:"connection-string"},"Connection String"),Object(r.b)("p",null,"The connection string format is as follows:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"trino://{username}:{password}@{hostname}:{port}/{catalog}\n")),Object(r.b)("p",null,"If you are running Trino with docker on local machine, please use the following connection URL"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"trino://trino@host.docker.internal:8080\n")),Object(r.b)("h3",{id:"authentications"},"Authentications"),Object(r.b)("h4",{id:"1-basic-authentication"},"1. Basic Authentication"),Object(r.b)("p",null,"You can provide ",Object(r.b)("inlineCode",{parentName:"p"},"username"),"/",Object(r.b)("inlineCode",{parentName:"p"},"password")," in the connection string or in the ",Object(r.b)("inlineCode",{parentName:"p"},"Secure Extra")," field at ",Object(r.b)("inlineCode",{parentName:"p"},"Advanced / Security")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"In Connection String"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"trino://{username}:{password}@{hostname}:{port}/{catalog}\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"In ",Object(r.b)("inlineCode",{parentName:"p"},"Secure Extra")," field"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "auth_method": "basic",\n    "auth_params": {\n        "username": "<username>",\n        "password": "<password>"\n    }\n}\n')))),Object(r.b)("p",null,"NOTE: if both are provided, ",Object(r.b)("inlineCode",{parentName:"p"},"Secure Extra")," always takes higher priority."),Object(r.b)("h4",{id:"2-kerberos-authentication"},"2. Kerberos Authentication"),Object(r.b)("p",null,"In ",Object(r.b)("inlineCode",{parentName:"p"},"Secure Extra")," field, config as following example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "auth_method": "kerberos",\n    "auth_params": {\n        "service_name": "superset",\n        "config": "/path/to/krb5.config",\n        ...\n    }\n}\n')),Object(r.b)("p",null,"All fields in ",Object(r.b)("inlineCode",{parentName:"p"},"auth_params")," are passed directly to the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/trinodb/trino-python-client/blob/0.306.0/trino/auth.py#L40"}),Object(r.b)("inlineCode",{parentName:"a"},"KerberosAuthentication"))," class."),Object(r.b)("h4",{id:"3-jwt-authentication"},"3. JWT Authentication"),Object(r.b)("p",null,"Config ",Object(r.b)("inlineCode",{parentName:"p"},"auth_method")," and provide token in ",Object(r.b)("inlineCode",{parentName:"p"},"Secure Extra")," field"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "auth_method": "jwt",\n    "auth_params": {\n        "token": "<your-jwt-token>"\n    }\n}\n')),Object(r.b)("h4",{id:"4-custom-authentication"},"4. Custom Authentication"),Object(r.b)("p",null,"To use custom authentication, first you need to add it into\n",Object(r.b)("inlineCode",{parentName:"p"},"ALLOWED_EXTRA_AUTHENTICATIONS")," allow list in Superset config file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'from your.module import AuthClass\nfrom another.extra import auth_method\n\nALLOWED_EXTRA_AUTHENTICATIONS: Dict[str, Dict[str, Callable[..., Any]]] = {\n    "trino": {\n        "custom_auth": AuthClass,\n        "another_auth_method": auth_method,\n    },\n}\n')),Object(r.b)("p",null,"Then in ",Object(r.b)("inlineCode",{parentName:"p"},"Secure Extra")," field:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "auth_method": "custom_auth",\n    "auth_params": {\n        ...\n    }\n}\n')),Object(r.b)("p",null,"You can also use custom authentication by providing reference to your ",Object(r.b)("inlineCode",{parentName:"p"},"trino.auth.Authentication")," class\nor factory function (which returns an ",Object(r.b)("inlineCode",{parentName:"p"},"Authentication")," instance) to ",Object(r.b)("inlineCode",{parentName:"p"},"auth_method"),"."),Object(r.b)("p",null,"All fields in ",Object(r.b)("inlineCode",{parentName:"p"},"auth_params")," are passed directly to your class/function."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Reference"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://trino.io/episodes/12.html"}),"Trino-Superset-Podcast"))))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/docs/Connecting to Databases/trino.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-docs-connecting-to-databases-trino-mdx-31c021fc455c56b92102.js.map