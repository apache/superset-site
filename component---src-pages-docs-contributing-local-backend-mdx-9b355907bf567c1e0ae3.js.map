{"version":3,"sources":["webpack:///./src/pages/docs/Contributing/local-backend.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,+NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,iBAAQ,CACN,GAAM,mBADR,mBAGA,yDAAwC,6BAAGC,WAAW,KAAQ,CAC1D,KAAQ,mGAD4B,mBAAxC,qEAGgC,6BAAGA,WAAW,KAAQ,CAClD,KAAQ,kCADoB,WAHhC,KAMA,gGACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,svCA8CL,qBAAG,sBAAQA,WAAW,KAAnB,4FACD,0BAAYA,WAAW,UAAvB,aADC,4CACsG,0BAAYA,WAAW,UAAvB,+BACzG,oMAAmL,0BAAYA,WAAW,KAAvB,kBAAnL,uBACF,0BAAYA,WAAW,KAAvB,mEACE,iBAAQ,CACN,GAAM,gBADR,gBAGA,gGAA+E,0BAAYA,WAAW,KAAvB,oBAA/E,eAA2J,0BAAYA,WAAW,KAAvB,YAA3J,oJACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qJAOL,iBAAQ,CACN,GAAM,kCADR,kCAGA,iLAAgK,6BAAGA,WAAW,KAAQ,CAClL,KAAQ,gDADoJ,cAAhK,yEAEiG,0BAAYA,WAAW,KAAvB,aAFjG,OAE8J,0BAAYA,WAAW,KAAvB,sBAF9J,KAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,iIAOL,6FACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wJAIL,wFACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,uGAML,iBAAQ,CACN,GAAM,mBADR,mBAGA,4BAAW,6BAAGA,WAAW,KAAQ,CAC7B,KAAQ,mGADD,0C,6NAOfJ,EAAWK,gBAAiB","file":"component---src-pages-docs-contributing-local-backend-mdx-9b355907bf567c1e0ae3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/superset/superset/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h3 {...{\n      \"id\": \"flask-server\"\n    }}>{`Flask server`}</h3>\n    <h4 {...{\n      \"id\": \"os-dependencies\"\n    }}>{`OS Dependencies`}</h4>\n    <p>{`Make sure your machine meets the `}<a parentName=\"p\" {...{\n        \"href\": \"https://superset.apache.org/docs/installation/installing-superset-from-scratch#os-dependencies\"\n      }}>{`OS dependencies`}</a>{` before following these steps.\nYou also need to install MySQL or `}<a parentName=\"p\" {...{\n        \"href\": \"https://mariadb.com/downloads\"\n      }}>{`MariaDB`}</a>{`.`}</p>\n    <p>{`Ensure that you are using Python version 3.7 or 3.8, then proceed with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Create a virtual environment and activate it (recommended)\npython3 -m venv venv # setup a python3 virtualenv\nsource venv/bin/activate\n\n# Install external dependencies\npip install -r requirements/testing.txt\n\n# Install Superset in editable (development) mode\npip install -e .\n\n# Initialize the database\nsuperset db upgrade\n\n# Create an admin user in your metadata database (use \\`admin\\` as username to be able to load the examples)\nsuperset fab create-admin\n\n# Create default roles and permissions\nsuperset init\n\n# Load some data to play with.\n# Note: you MUST have previously created an admin user with the username \\`admin\\` for this command to work.\nsuperset load-examples\n\n# Start the Flask dev web server from inside your virtualenv.\n# Note that your page may not have CSS at this point.\nFLASK_ENV=development superset run -p 8088 --with-threads --reload --debugger\n\\`\\`\\`\n\nOr you can install via our Makefile\n\n\\`\\`\\`bash\n# Create a virtual environment and activate it (recommended)\n$ python3 -m venv venv # setup a python3 virtualenv\n$ source venv/bin/activate\n\n# install pip packages + pre-commit\n$ make install\n\n# Install superset pip packages and setup env only\n$ make superset\n\n# Setup pre-commit only\n$ make pre-commit\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note: the FLASK_APP env var should not need to be set, as it's currently controlled\nvia `}<inlineCode parentName=\"strong\">{`.flaskenv`}</inlineCode>{`, however if needed, it should be set to `}<inlineCode parentName=\"strong\">{`superset.app:create_app()`}</inlineCode></strong></p>\n    <p>{`If you have made changes to the FAB-managed templates, which are not built the same way as the newer, React-powered front-end assets, you need to start the app without the `}<inlineCode parentName=\"p\">{`--with-threads`}</inlineCode>{` argument like so:\n`}<inlineCode parentName=\"p\">{`FLASK_ENV=development superset run -p 8088 --reload --debugger`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"dependencies\"\n    }}>{`Dependencies`}</h4>\n    <p>{`If you add a new requirement or update an existing requirement (per the `}<inlineCode parentName=\"p\">{`install_requires`}</inlineCode>{` section in `}<inlineCode parentName=\"p\">{`setup.py`}</inlineCode>{`) you must recompile (freeze) the Python dependencies to ensure that for CI, testing, etc. the build is deterministic. This can be achieved via,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ python3 -m venv venv\n$ source venv/bin/activate\n$ python3 -m pip install -r requirements/integration.txt\n$ pip-compile-multi --no-upgrade\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"logging-to-the-browser-console\"\n    }}>{`Logging to the browser console`}</h4>\n    <p>{`This feature is only available on Python 3. When debugging your application, you can have the server logs sent directly to the browser console using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/betodealmeida/consolelog\"\n      }}>{`ConsoleLog`}</a>{` package. You need to mutate the app, by adding the following to your `}<inlineCode parentName=\"p\">{`config.py`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`superset_config.py`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`from console_log import ConsoleLog\n\ndef FLASK_APP_MUTATOR(app):\n    app.wsgi_app = ConsoleLog(app.wsgi_app, app.logger)\n`}</code></pre>\n    <p>{`Then make sure you run your WSGI server using the right worker type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`FLASK_ENV=development gunicorn \"superset.app:create_app()\" -k \"geventwebsocket.gunicorn.workers.GeventWebSocketWorker\" -b 127.0.0.1:8088 --reload\n`}</code></pre>\n    <p>{`You can log anything to the browser console, including objects:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`from superset import app\napp.logger.error('An exception occurred!')\napp.logger.info(form_data)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"frontend-assets\"\n    }}>{`Frontend Assets`}</h3>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://superset.apache.org/docs/installation/installing-superset-from-scratch#os-dependencies\"\n      }}>{`Running Frontend Assets Locally`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}