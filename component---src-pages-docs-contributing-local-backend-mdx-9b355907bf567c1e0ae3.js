(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{KZXD:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return c}));var a=t("k1TG"),o=t("8o2o"),r=(t("q1tI"),t("7ljp")),s=t("hhGP"),i=(t("qKvR"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/docs/Contributing/local-backend.mdx"}});var p={_frontmatter:i},l=s.a;function c(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)(l,Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h3",{id:"flask-server"},"Flask server"),Object(r.b)("h4",{id:"os-dependencies"},"OS Dependencies"),Object(r.b)("p",null,"Make sure your machine meets the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://superset.apache.org/docs/installation/installing-superset-from-scratch#os-dependencies"}),"OS dependencies")," before following these steps.\nYou also need to install MySQL or ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://mariadb.com/downloads"}),"MariaDB"),"."),Object(r.b)("p",null,"Ensure that you are using Python version 3.7 or 3.8, then proceed with:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Create a virtual environment and activate it (recommended)\npython3 -m venv venv # setup a python3 virtualenv\nsource venv/bin/activate\n\n# Install external dependencies\npip install -r requirements/testing.txt\n\n# Install Superset in editable (development) mode\npip install -e .\n\n# Initialize the database\nsuperset db upgrade\n\n# Create an admin user in your metadata database (use `admin` as username to be able to load the examples)\nsuperset fab create-admin\n\n# Create default roles and permissions\nsuperset init\n\n# Load some data to play with.\n# Note: you MUST have previously created an admin user with the username `admin` for this command to work.\nsuperset load-examples\n\n# Start the Flask dev web server from inside your virtualenv.\n# Note that your page may not have CSS at this point.\nFLASK_ENV=development superset run -p 8088 --with-threads --reload --debugger\n```\n\nOr you can install via our Makefile\n\n```bash\n# Create a virtual environment and activate it (recommended)\n$ python3 -m venv venv # setup a python3 virtualenv\n$ source venv/bin/activate\n\n# install pip packages + pre-commit\n$ make install\n\n# Install superset pip packages and setup env only\n$ make superset\n\n# Setup pre-commit only\n$ make pre-commit\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note: the FLASK_APP env var should not need to be set, as it's currently controlled\nvia ",Object(r.b)("inlineCode",{parentName:"strong"},".flaskenv"),", however if needed, it should be set to ",Object(r.b)("inlineCode",{parentName:"strong"},"superset.app:create_app()"))),Object(r.b)("p",null,"If you have made changes to the FAB-managed templates, which are not built the same way as the newer, React-powered front-end assets, you need to start the app without the ",Object(r.b)("inlineCode",{parentName:"p"},"--with-threads")," argument like so:\n",Object(r.b)("inlineCode",{parentName:"p"},"FLASK_ENV=development superset run -p 8088 --reload --debugger")),Object(r.b)("h4",{id:"dependencies"},"Dependencies"),Object(r.b)("p",null,"If you add a new requirement or update an existing requirement (per the ",Object(r.b)("inlineCode",{parentName:"p"},"install_requires")," section in ",Object(r.b)("inlineCode",{parentName:"p"},"setup.py"),") you must recompile (freeze) the Python dependencies to ensure that for CI, testing, etc. the build is deterministic. This can be achieved via,"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ python3 -m venv venv\n$ source venv/bin/activate\n$ python3 -m pip install -r requirements/integration.txt\n$ pip-compile-multi --no-upgrade\n")),Object(r.b)("h4",{id:"logging-to-the-browser-console"},"Logging to the browser console"),Object(r.b)("p",null,"This feature is only available on Python 3. When debugging your application, you can have the server logs sent directly to the browser console using the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/betodealmeida/consolelog"}),"ConsoleLog")," package. You need to mutate the app, by adding the following to your ",Object(r.b)("inlineCode",{parentName:"p"},"config.py")," or ",Object(r.b)("inlineCode",{parentName:"p"},"superset_config.py"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from console_log import ConsoleLog\n\ndef FLASK_APP_MUTATOR(app):\n    app.wsgi_app = ConsoleLog(app.wsgi_app, app.logger)\n")),Object(r.b)("p",null,"Then make sure you run your WSGI server using the right worker type:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'FLASK_ENV=development gunicorn "superset.app:create_app()" -k "geventwebsocket.gunicorn.workers.GeventWebSocketWorker" -b 127.0.0.1:8088 --reload\n')),Object(r.b)("p",null,"You can log anything to the browser console, including objects:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from superset import app\napp.logger.error('An exception occurred!')\napp.logger.info(form_data)\n")),Object(r.b)("h3",{id:"frontend-assets"},"Frontend Assets"),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://superset.apache.org/docs/installation/installing-superset-from-scratch#os-dependencies"}),"Running Frontend Assets Locally")))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/docs/Contributing/local-backend.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-docs-contributing-local-backend-mdx-9b355907bf567c1e0ae3.js.map