{"version":3,"sources":["webpack:///./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/tcl.js"],"names":["module","exports","hljs","name","aliases","keywords","contains","COMMENT","beginKeywords","end","excludeEnd","className","begin","endsWithParent","variants","BACKSLASH_ESCAPE","inherit","QUOTE_STRING_MODE","illegal","BINARY_NUMBER_MODE","C_NUMBER_MODE"],"mappings":"8EA4CAA,EAAOC,QAtCP,SAAaC,GACX,MAAO,CACLC,KAAM,MACNC,QAAS,CAAC,MACVC,SAAU,+6BACVC,SAAU,CAACJ,EAAKK,QAAQ,YAAa,KAAML,EAAKK,QAAQ,YAAa,KAAM,CACzEC,cAAe,OACfC,IAAK,QACLC,YAAY,EACZJ,SAAU,CAAC,CACTK,UAAW,QACXC,MAAO,kDACPH,IAAK,eACLI,gBAAgB,EAChBH,YAAY,KAEb,CACDA,YAAY,EACZI,SAAU,CAAC,CACTF,MAAO,mEACPH,IAAK,uBACJ,CACDG,MAAO,8CACPH,IAAK,+BAEN,CACDE,UAAW,SACXL,SAAU,CAACJ,EAAKa,kBAChBD,SAAU,CAACZ,EAAKc,QAAQd,EAAKe,kBAAmB,CAC9CC,QAAS,SAEV,CACDP,UAAW,SACXG,SAAU,CAACZ,EAAKiB,mBAAoBjB,EAAKkB","file":"react-syntax-highlighter_languages_highlight_tcl-2b87edcfde0df246ab83.js","sourcesContent":["/*\nLanguage: Tcl\nDescription: Tcl is a very simple programming language.\nAuthor: Radek Liska <radekliska@gmail.com>\nWebsite: https://www.tcl.tk/about/language.html\n*/\nfunction tcl(hljs) {\n  return {\n    name: 'Tcl',\n    aliases: ['tk'],\n    keywords: 'after append apply array auto_execok auto_import auto_load auto_mkindex ' + 'auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock ' + 'close concat continue dde dict encoding eof error eval exec exit expr fblocked ' + 'fconfigure fcopy file fileevent filename flush for foreach format gets glob global ' + 'history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list ' + 'llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 ' + 'mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex ' + 'platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename ' + 'return safe scan seek set socket source split string subst switch tcl_endOfWord ' + 'tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter ' + 'tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update ' + 'uplevel upvar variable vwait while',\n    contains: [hljs.COMMENT(';[ \\\\t]*#', '$'), hljs.COMMENT('^[ \\\\t]*#', '$'), {\n      beginKeywords: 'proc',\n      end: '[\\\\{]',\n      excludeEnd: true,\n      contains: [{\n        className: 'title',\n        begin: '[ \\\\t\\\\n\\\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n        end: '[ \\\\t\\\\n\\\\r]',\n        endsWithParent: true,\n        excludeEnd: true\n      }]\n    }, {\n      excludeEnd: true,\n      variants: [{\n        begin: '\\\\$(\\\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\\\(([a-zA-Z0-9_])*\\\\)',\n        end: '[^a-zA-Z0-9_\\\\}\\\\$]'\n      }, {\n        begin: '\\\\$(\\\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n        end: '(\\\\))?[^a-zA-Z0-9_\\\\}\\\\$]'\n      }]\n    }, {\n      className: 'string',\n      contains: [hljs.BACKSLASH_ESCAPE],\n      variants: [hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        illegal: null\n      })]\n    }, {\n      className: 'number',\n      variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]\n    }]\n  };\n}\n\nmodule.exports = tcl;"],"sourceRoot":""}