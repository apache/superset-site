{"version":3,"sources":["webpack:///./src/pages/docs/Contributing/testing-locally.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-docs-contributing-testing-locally-mdx-90efd3155bbdce8433b9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/superset/superset/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <h3 {...{\n      \"id\": \"python-testing\"\n    }}>{`Python Testing`}</h3>\n    <p>{`All python tests are carried out in `}<a parentName=\"p\" {...{\n        \"href\": \"https://tox.readthedocs.io/en/latest/index.html\"\n      }}>{`tox`}</a>{`\na standardized testing framework.\nAll python tests can be run with any of the tox `}<a parentName=\"p\" {...{\n        \"href\": \"https://tox.readthedocs.io/en/latest/example/basic.html#a-simple-tox-ini-default-environments\"\n      }}>{`environments`}</a>{`, via,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`tox -e <environment>\n`}</code></pre>\n    <p>{`For example,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`tox -e py38\n`}</code></pre>\n    <p>{`Alternatively, you can run all tests in a single file via,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`tox -e <environment> -- tests/test_file.py\n`}</code></pre>\n    <p>{`or for a specific test via,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`tox -e <environment> -- tests/test_file.py::TestClassName::test_method_name\n`}</code></pre>\n    <p>{`Note that the test environment uses a temporary directory for defining the\nSQLite databases which will be cleared each time before the group of test\ncommands are invoked.`}</p>\n    <p>{`There is also a utility script included in the Superset codebase to run python integration tests. The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apache/superset/tree/master/scripts/tests\"\n      }}>{`readme can be\nfound here`}</a></p>\n    <p>{`To run all integration tests for example, run this script from the root directory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`scripts/tests/run.sh\n`}</code></pre>\n    <p>{`You can run unit tests found in './tests/unit_tests' for example with pytest. It is a simple way to run an isolated test that doesn't need any database setup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`pytest ./link_to_test.py\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"frontend-testing\"\n    }}>{`Frontend Testing`}</h3>\n    <p>{`We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/\"\n      }}>{`Jest`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://airbnb.io/enzyme/\"\n      }}>{`Enzyme`}</a>{` to test TypeScript/JavaScript. Tests can be run with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd superset-frontend\nnpm run test\n`}</code></pre>\n    <p>{`To run a single test file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm run test -- path/to/file.js\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"integration-testing\"\n    }}>{`Integration Testing`}</h3>\n    <p>{`We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.cypress.io/\"\n      }}>{`Cypress`}</a>{` for integration tests. Tests can be run by `}<inlineCode parentName=\"p\">{`tox -e cypress`}</inlineCode>{`. To open Cypress and explore tests first setup and run test server:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export SUPERSET_CONFIG=tests.integration_tests.superset_test_config\nexport SUPERSET_TESTENV=true\nexport ENABLE_REACT_CRUD_VIEWS=true\nexport CYPRESS_BASE_URL=\"http://localhost:8081\"\nsuperset db upgrade\nsuperset load_test_users\nsuperset load-examples --load-test-data\nsuperset init\nsuperset run --port 8081\n`}</code></pre>\n    <p>{`Run Cypress tests:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd superset-frontend\nnpm run build-instrumented\n\ncd cypress-base\nnpm install\n\n# run tests via headless Chrome browser (requires Chrome 64+)\nnpm run cypress-run-chrome\n\n# run tests from a specific file\nnpm run cypress-run-chrome -- --spec cypress/integration/explore/link.test.ts\n\n# run specific file with video capture\nnpm run cypress-run-chrome -- --spec cypress/integration/dashboard/index.test.js --config video=true\n\n# to open the cypress ui\nnpm run cypress-debug\n\n# to point cypress to a url other than the default (http://localhost:8088) set the environment variable before running the script\n# e.g., CYPRESS_BASE_URL=\"http://localhost:9000\"\nCYPRESS_BASE_URL=<your url> npm run cypress open\n`}</code></pre>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apache/superset/blob/master/superset-frontend/cypress_build.sh\"\n      }}><inlineCode parentName=\"a\">{`superset-frontend/cypress_build.sh`}</inlineCode></a>{`.`}</p>\n    <p>{`As an alternative you can use docker-compose environment for testing:`}</p>\n    <p>{`Make sure you have added below line to your /etc/hosts file:\n`}<inlineCode parentName=\"p\">{`127.0.0.1 db`}</inlineCode></p>\n    <p>{`If you already have launched Docker environment please use the following command to assure a fresh database instance:\n`}<inlineCode parentName=\"p\">{`docker-compose down -v`}</inlineCode></p>\n    <p>{`Launch environment:`}</p>\n    <p><inlineCode parentName=\"p\">{`CYPRESS_CONFIG=true docker-compose up`}</inlineCode></p>\n    <p>{`It will serve backend and frontend on port 8088.`}</p>\n    <p>{`Run Cypress tests:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd cypress-base\nnpm install\nnpm run cypress open\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"debugging-server-app\"\n    }}>{`Debugging Server App`}</h3>\n    <p>{`Follow these instructions to debug the Flask app running inside a docker container.`}</p>\n    <p>{`First add the following to the ./docker-compose.yaml file`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`superset:\n    env_file: docker/.env\n    image: *superset-image\n    container_name: superset_app\n    command: [\"/app/docker/docker-bootstrap.sh\", \"app\"]\n    restart: unless-stopped\n+   cap_add:\n+     - SYS_PTRACE\n    ports:\n      - 8088:8088\n+     - 5678:5678\n    user: \"root\"\n    depends_on: *superset-depends-on\n    volumes: *superset-volumes\n    environment:\n      CYPRESS_CONFIG: \"\\${CYPRESS_CONFIG}\"\n`}</code></pre>\n    <p>{`Start Superset as usual`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker-compose up\n`}</code></pre>\n    <p>{`Install the required libraries and packages to the docker container`}</p>\n    <p>{`Enter the superset_app container`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker exec -it superset_app /bin/bash\nroot@39ce8cf9d6ab:/app#\n`}</code></pre>\n    <p>{`Run the following commands inside the container`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`apt update\napt install -y gdb\napt install -y net-tools\npip install debugpy\n`}</code></pre>\n    <p>{`Find the PID for the Flask process. Make sure to use the first PID. The Flask app will re-spawn a sub-process every time you change any of the python code. So it's important to use the first PID.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ps -ef\n\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 14:09 ?        00:00:00 bash /app/docker/docker-bootstrap.sh app\nroot         6     1  4 14:09 ?        00:00:04 /usr/local/bin/python /usr/bin/flask run -p 8088 --with-threads --reload --debugger --host=0.0.0.0\nroot        10     6  7 14:09 ?        00:00:07 /usr/local/bin/python /usr/bin/flask run -p 8088 --with-threads --reload --debugger --host=0.0.0.0\n`}</code></pre>\n    <p>{`Inject debugpy into the running Flask process. In this case PID 6.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`python3 -m debugpy --listen 0.0.0.0:5678 --pid 6\n`}</code></pre>\n    <p>{`Verify that debugpy is listening on port 5678`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`netstat -tunap\n\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:5678            0.0.0.0:*               LISTEN      462/python\ntcp        0      0 0.0.0.0:8088            0.0.0.0:*               LISTEN      6/python\n`}</code></pre>\n    <p>{`You are now ready to attach a debugger to the process. Using VSCode you can configure a launch configuration file .vscode/launch.json like so.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Attach to Superset App in Docker Container\",\n            \"type\": \"python\",\n            \"request\": \"attach\",\n            \"connect\": {\n                \"host\": \"127.0.0.1\",\n                \"port\": 5678\n            },\n            \"pathMappings\": [\n                {\n                    \"localRoot\": \"\\${workspaceFolder}\",\n                    \"remoteRoot\": \"/app\"\n                }\n            ]\n        },\n    ]\n}\n`}</code></pre>\n    <p>{`VSCode will not stop on breakpoints right away. We've attached to PID 6 however it does not yet know of any sub-processes. In order to \"wakeup\" the debugger you need to modify a python file. This will trigger Flask to reload the code and create a new sub-process. This new sub-process will be detected by VSCode and breakpoints will be activated.`}</p>\n    <h3 {...{\n      \"id\": \"debugging-server-app-in-kubernetes-environment\"\n    }}>{`Debugging Server App in Kubernetes Environment`}</h3>\n    <p>{`To debug Flask running in POD inside kubernetes cluster. You'll need to make sure the pod runs as root and is granted the SYS_TRACE capability.These settings should not be used in production environments.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`  securityContext:\n    capabilities:\n      add: [\"SYS_PTRACE\"]\n`}</code></pre>\n    <p>{`See (set capabilities for a container)`}{`[https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container]`}{` for more details.`}</p>\n    <p>{`Once the pod is running as root and has the SYS_PTRACE capability it will be able to debug the Flask app.`}</p>\n    <p>{`You can follow the same instructions as in the docker-compose. Enter the pod and install the required library and packages; gdb, netstat and debugpy.`}</p>\n    <p>{`Often in a Kubernetes environment nodes are not addressable from outside the cluster. VSCode will thus be unable to remotely connect to port 5678 on a Kubernetes node. In order to do this you need to create a tunnel that port forwards 5678 to your local machine.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl port-forward  pod/superset-<some random id> 5678:5678\n`}</code></pre>\n    <p>{`You can now launch your VSCode debugger with the same config as above. VSCode will connect to to 127.0.0.1:5678 which is forwarded by kubectl to your remote kubernetes POD.`}</p>\n    <h3 {...{\n      \"id\": \"storybook\"\n    }}>{`Storybook`}</h3>\n    <p>{`Superset includes a `}<a parentName=\"p\" {...{\n        \"href\": \"https://storybook.js.org/\"\n      }}>{`Storybook`}</a>{` to preview the layout/styling of various Superset components, and variations thereof. To open and view the Storybook:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd superset-frontend\nnpm run storybook\n`}</code></pre>\n    <p>{`When contributing new React components to Superset, please try to add a Story alongside the component's `}<inlineCode parentName=\"p\">{`jsx/tsx`}</inlineCode>{` file.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}