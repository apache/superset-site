(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{"+/8Z":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n("k1TG"),i=n("8o2o"),o=(n("q1tI"),n("7ljp")),r=n("hhGP"),c=(n("qKvR"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/docs/Contributing/hooks-and-linting.mdx"}});var s={_frontmatter:c},l=r.a;function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)(l,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"git-hooks"},"Git Hooks"),Object(o.b)("p",null,"Superset uses Git pre-commit hooks courtesy of ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://pre-commit.com/"}),"pre-commit"),". To install run the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"pip3 install -r requirements/integration.txt\npre-commit install\n")),Object(o.b)("p",null,"A series of checks will now run when you make a git commit."),Object(o.b)("p",null,"Alternatively it is possible to run pre-commit via tox:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"tox -e pre-commit\n")),Object(o.b)("p",null,"Or by running pre-commit manually:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"pre-commit run --all-files\n")),Object(o.b)("h2",{id:"linting"},"Linting"),Object(o.b)("h3",{id:"python"},"Python"),Object(o.b)("p",null,"We use ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://pylint.org/"}),"Pylint")," for linting which can be invoked via:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# for python\ntox -e pylint\n")),Object(o.b)("p",null,"In terms of best practices please advoid blanket disablement of Pylint messages globally (via ",Object(o.b)("inlineCode",{parentName:"p"},".pylintrc"),") or top-level within the file header, albeit there being a few exceptions. Disablement should occur inline as it prevents masking issues and provides context as to why said message is disabled."),Object(o.b)("p",null,"Additionally the Python code is auto-formatted using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/python/black"}),"Black")," which\nis configured as a pre-commit hook. There are also numerous ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://black.readthedocs.io/en/stable/editor_integration.html"}),"editor integrations")),Object(o.b)("h3",{id:"typescript"},"TypeScript"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd superset-frontend\nnpm ci\nnpm run lint\n")),Object(o.b)("p",null,"If using the eslint extension with vscode, put the following in your workspace ",Object(o.b)("inlineCode",{parentName:"p"},"settings.json")," file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"eslint.workingDirectories": [\n  "superset-frontend"\n]\n')))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/docs/Contributing/hooks-and-linting.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-docs-contributing-hooks-and-linting-mdx-a4dcce8a383e0da34e21.js.map