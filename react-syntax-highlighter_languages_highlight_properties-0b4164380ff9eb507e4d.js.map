{"version":3,"sources":["webpack:///./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/properties.js"],"names":["module","exports","hljs","WS0","DELIM","KEY_OTHER","DELIM_AND_VALUE","end","relevance","starts","className","contains","begin","name","case_insensitive","illegal","COMMENT","returnBegin","endsParent"],"mappings":"gFAiEAA,EAAOC,QA3DP,SAAoBC,GAElB,IAAIC,EAAM,aAGNC,EAAQ,IAAMD,EAAM,OAASA,EAArB,eAERE,EAAY,+BACZC,EAAkB,CAEpBC,IAAKH,EACLI,UAAW,EACXC,OAAQ,CAENC,UAAW,SACXH,IAAK,IACLC,UAAW,EACXG,SAAU,CAAC,CACTC,MAAO,cAIb,MAAO,CACLC,KAAM,cACNC,kBAAkB,EAClBC,QAAS,KACTJ,SAAU,CAACT,EAAKc,QAAQ,YAAa,KAErC,CACEJ,MAvBe,kCAuBOR,EACtBa,aAAa,EACbN,SAAU,CAAC,CACTD,UAAW,OACXE,MA3Ba,kCA4BbM,YAAY,EACZV,UAAW,IAEbC,OAAQH,GAEV,CACEM,MAAOP,EAAYD,EACnBa,aAAa,EACbT,UAAW,EACXG,SAAU,CAAC,CACTD,UAAW,OACXE,MAAOP,EACPa,YAAY,EACZV,UAAW,IAEbC,OAAQH,GAEV,CACEI,UAAW,OACXF,UAAW,EACXI,MAAOP,EAAYF,EAAM","file":"react-syntax-highlighter_languages_highlight_properties-0b4164380ff9eb507e4d.js","sourcesContent":["/*\nLanguage: .properties\nContributors: Valentin Aitken <valentin@nalisbg.com>, Egor Rogov <e.rogov@postgrespro.ru>\nWebsite: https://en.wikipedia.org/wiki/.properties\nCategory: common, config\n*/\nfunction properties(hljs) {\n  // whitespaces: space, tab, formfeed\n  var WS0 = '[ \\\\t\\\\f]*';\n  var WS1 = '[ \\\\t\\\\f]+'; // delimiter\n\n  var DELIM = '(' + WS0 + '[:=]' + WS0 + '|' + WS1 + ')';\n  var KEY_ALPHANUM = '([^\\\\\\\\\\\\W:= \\\\t\\\\f\\\\n]|\\\\\\\\.)+';\n  var KEY_OTHER = '([^\\\\\\\\:= \\\\t\\\\f\\\\n]|\\\\\\\\.)+';\n  var DELIM_AND_VALUE = {\n    // skip DELIM\n    end: DELIM,\n    relevance: 0,\n    starts: {\n      // value: everything until end of line (again, taking into account backslashes)\n      className: 'string',\n      end: /$/,\n      relevance: 0,\n      contains: [{\n        begin: '\\\\\\\\\\\\n'\n      }]\n    }\n  };\n  return {\n    name: '.properties',\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [hljs.COMMENT('^\\\\s*[!#]', '$'), // key: everything until whitespace or = or : (taking into account backslashes)\n    // case of a \"normal\" key\n    {\n      begin: KEY_ALPHANUM + DELIM,\n      returnBegin: true,\n      contains: [{\n        className: 'attr',\n        begin: KEY_ALPHANUM,\n        endsParent: true,\n        relevance: 0\n      }],\n      starts: DELIM_AND_VALUE\n    }, // case of key containing non-alphanumeric chars => relevance = 0\n    {\n      begin: KEY_OTHER + DELIM,\n      returnBegin: true,\n      relevance: 0,\n      contains: [{\n        className: 'meta',\n        begin: KEY_OTHER,\n        endsParent: true,\n        relevance: 0\n      }],\n      starts: DELIM_AND_VALUE\n    }, // case of an empty key\n    {\n      className: 'attr',\n      relevance: 0,\n      begin: KEY_OTHER + WS0 + '$'\n    }]\n  };\n}\n\nmodule.exports = properties;"],"sourceRoot":""}