{"version":3,"sources":["webpack:///./src/pages/docs/Contributing/creating-viz-plugins.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,sOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kCADR,kCAGA,sNAEqB,0BAAYC,WAAW,KAAvB,6BAFrB,gEAGqB,0BAAYA,WAAW,KAAvB,8DAHrB,wOAOA,iBAAQ,CACN,GAAM,iBADR,iBAGA,qFACA,sBACE,kBAAIA,WAAW,MAAf,0EACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,eAEF,mDAAkC,6BAAGA,WAAW,KAAQ,CACpD,KAAQ,yBADsB,SAAlC,kDAIA,iBAAQ,CACN,GAAM,4CADR,4CAGA,4OAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qFAOL,0IACyB,0BAAYA,WAAW,KAAvB,yBADzB,kCAEA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8FAKL,mDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+BAIL,yGACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,qkCAmCL,6EACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,mCAGL,4KAEA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,kBAEL,kEAAiD,0BAAYA,WAAW,KAAvB,qBAAjD,qDAEA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sDAIL,qIACkB,0BAAYA,WAAW,KAAvB,8DADlB,qCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yFAIL,gHACF,0BAAYA,WAAW,KAAvB,WADE,cAEA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iFAIL,sHAEA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+B,oOAQTJ,EAAWK,gBAAiB","file":"component---src-pages-docs-contributing-creating-viz-plugins-mdx-a2a97a0b6d5334af31f1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/superset/superset/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"creating-visualization-plugins\"\n    }}>{`Creating Visualization Plugins`}</h2>\n    <p>{`Visualizations in Superset are implemented in JavaScript or TypeScript. Superset\ncomes preinstalled with several visualizations types (hereafter \"viz plugins\") that\ncan be found under the `}<inlineCode parentName=\"p\">{`superset-frontend/plugins`}</inlineCode>{` directory. Viz plugins are added to\nthe application in the `}<inlineCode parentName=\"p\">{`superset-frontend/src/visualizations/presets/MainPreset.js`}</inlineCode>{`.\nThe Superset project is always happy to review proposals for new high quality viz\nplugins. However, for highly custom viz types it is recommended to maintain a fork\nof Superset, and add the custom built viz plugins by hand.`}</p>\n    <h3 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h3>\n    <p>{`In order to create a new viz plugin, you need the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Run MacOS or Linux (Windows is not officially supported, but may work)`}</li>\n      <li parentName=\"ul\">{`Node.js 16`}</li>\n      <li parentName=\"ul\">{`npm 7 or 8`}</li>\n    </ul>\n    <p>{`A general familiarity with `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/\"\n      }}>{`React`}</a>{` and the npm/Node system is\nalso recommended.`}</p>\n    <h3 {...{\n      \"id\": \"creating-a-simple-hello-world-viz-plugin\"\n    }}>{`Creating a simple Hello World viz plugin`}</h3>\n    <p>{`To get started, you need the Superset Yeoman Generator. It is recommended to use the\nversion of the template that ships with the version of Superset you are using. This\ncan be installed by doing the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm i -g yo\ncd superset-frontend/packages/generator-superset\nnpm i\nnpm link\n`}</code></pre>\n    <p>{`After this you can proceed to create your viz plugin. Create a new directory for your\nviz plugin with the prefix `}<inlineCode parentName=\"p\">{`superset-plugin-chart`}</inlineCode>{` and run the Yeoman generator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir /tmp/superset-plugin-chart-hello-world\ncd /tmp/superset-plugin-chart-hello-world\n`}</code></pre>\n    <p>{`Initialize the viz plugin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yo @superset-ui/superset\n`}</code></pre>\n    <p>{`After that the generator will ask a few questions (the defaults should be fine):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ yo @superset-ui/superset\n\n     _-----_     ╭──────────────────────────╮\n    |       |    │      Welcome to the      │\n    |--(o)--|    │    generator-superset    │\n   \\`---------´   │        generator!        │\n    ( _´U\\`_ )    ╰──────────────────────────╯\n    /___A___\\\\   /\n     |  ~  |\n   __'.___.'__\n ´   \\`  |° ´ Y \\`\n\n? Package name: superset-plugin-chart-hello-world\n? Description: Hello World\n? What type of chart would you like? Time-series chart\n   create package.json\n   create .gitignore\n   create babel.config.js\n   create jest.config.js\n   create README.md\n   create tsconfig.json\n   create src/index.ts\n   create src/plugin/buildQuery.ts\n   create src/plugin/controlPanel.ts\n   create src/plugin/index.ts\n   create src/plugin/transformProps.ts\n   create src/types.ts\n   create src/SupersetPluginChartHelloWorld.tsx\n   create test/index.test.ts\n   create test/__mocks__/mockExportString.js\n   create test/plugin/buildQuery.test.ts\n   create test/plugin/transformProps.test.ts\n   create types/external.d.ts\n   create src/images/thumbnail.png\n`}</code></pre>\n    <p>{`To build the viz plugin, run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm i --force\nnpm run build\n`}</code></pre>\n    <p>{`Alternatively, to run the viz plugin in development mode (=rebuilding whenever changes\nare made), start the dev server with the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm run dev\n`}</code></pre>\n    <p>{`To add the package to Superset, go to the `}<inlineCode parentName=\"p\">{`superset-frontend`}</inlineCode>{` subdirectory in your\nSuperset source folder run`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm i -S /tmp/superset-plugin-chart-hello-world\n`}</code></pre>\n    <p>{`If you publish your package to npm, you can naturally install directly from there, too.\nAfter this edit the `}<inlineCode parentName=\"p\">{`superset-frontend/src/visualizations/presets/MainPreset.js`}</inlineCode>{`\nand make the following changes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { SupersetPluginChartHelloWorld } from 'superset-plugin-chart-hello-world';\n`}</code></pre>\n    <p>{`to import the viz plugin and later add the following to the array that's passed to the\n`}<inlineCode parentName=\"p\">{`plugins`}</inlineCode>{` property:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`new SupersetPluginChartHelloWorld().configure({ key: 'ext-hello-world' }),\n`}</code></pre>\n    <p>{`After that the viz plugin should show up when you run Superset, e.g. the development\nserver:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm run dev-server\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}