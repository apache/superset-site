"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[9506],{98570:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=s(74848),t=s(28453);const o={title:"Alerts and Reports",hide_title:!0,sidebar_position:2,version:2},i="Alerts and Reports",a={id:"configuration/alerts-reports",title:"Alerts and Reports",description:"Users can configure automated alerts and reports to send dashboards or charts to an email recipient or Slack channel.",source:"@site/docs/configuration/alerts-reports.mdx",sourceDirName:"configuration",slug:"/configuration/alerts-reports",permalink:"/docs/configuration/alerts-reports",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/superset/edit/master/docs/docs/configuration/alerts-reports.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Alerts and Reports",hide_title:!0,sidebar_position:2,version:2},sidebar:"CustomSidebar",previous:{title:"Connecting to Databases",permalink:"/docs/configuration/databases"},next:{title:"Caching",permalink:"/docs/configuration/cache"}},l={},d=[{value:"Requirements",id:"requirements",level:2},{value:"Commons",id:"commons",level:3},{value:"In your <code>superset_config.py</code> or <code>superset_config_docker.py</code>",id:"in-your-superset_configpy-or-superset_config_dockerpy",level:4},{value:"Disable dry-run mode",id:"disable-dry-run-mode",level:5},{value:"In your <code>Dockerfile</code>",id:"in-your-dockerfile",level:4},{value:"Slack integration",id:"slack-integration",level:3},{value:"Kubernetes-specific",id:"kubernetes-specific",level:3},{value:"Docker Compose specific",id:"docker-compose-specific",level:3},{value:"You must have in your <code>docker-compose.yml</code>",id:"you-must-have-in-your-docker-composeyml",level:4},{value:"Detailed config",id:"detailed-config",level:3},{value:"Custom Dockerfile",id:"custom-dockerfile",level:2},{value:"Using Firefox",id:"using-firefox",level:3},{value:"Using Chrome",id:"using-chrome",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Confirm feature flag is enabled and you have sufficient permissions",id:"confirm-feature-flag-is-enabled-and-you-have-sufficient-permissions",level:3},{value:"Check the logs of your Celery worker",id:"check-the-logs-of-your-celery-worker",level:3},{value:"Check web browser and webdriver installation",id:"check-web-browser-and-webdriver-installation",level:3},{value:"Send a test email",id:"send-a-test-email",level:3},{value:"Browse to your report from the worker",id:"browse-to-your-report-from-the-worker",level:3},{value:"Scheduling Queries as Reports",id:"scheduling-queries-as-reports",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"alerts-and-reports",children:"Alerts and Reports"}),"\n",(0,r.jsx)(n.p,{children:"Users can configure automated alerts and reports to send dashboards or charts to an email recipient or Slack channel."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Alerts"})," are sent when a SQL condition is reached"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Reports"})," are sent on a schedule"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Alerts and reports are disabled by default. To turn them on, you need to do some setup, described here."}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsx)(n.h3,{id:"commons",children:"Commons"}),"\n",(0,r.jsxs)(n.h4,{id:"in-your-superset_configpy-or-superset_config_dockerpy",children:["In your ",(0,r.jsx)(n.code,{children:"superset_config.py"})," or ",(0,r.jsx)(n.code,{children:"superset_config_docker.py"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"ALERT_REPORTS"'})," ",(0,r.jsx)(n.a,{href:"/docs/configuration/configuring-superset#feature-flags",children:"feature flag"})," must be turned to True."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"beat_schedule"})," in CeleryConfig must contain schedule for ",(0,r.jsx)(n.code,{children:"reports.scheduler"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["At least one of those must be configured, depending on what you want to use:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["emails: ",(0,r.jsx)(n.code,{children:"SMTP_*"})," settings"]}),"\n",(0,r.jsxs)(n.li,{children:["Slack messages: ",(0,r.jsx)(n.code,{children:"SLACK_API_TOKEN"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"disable-dry-run-mode",children:"Disable dry-run mode"}),"\n",(0,r.jsxs)(n.p,{children:["Screenshots will be taken but no messages actually sent as long as ",(0,r.jsx)(n.code,{children:"ALERT_REPORTS_NOTIFICATION_DRY_RUN = True"}),", its default value in ",(0,r.jsx)(n.code,{children:"docker/pythonpath_dev/superset_config.py"}),".  To disable dry-run mode and start receiving email/Slack notifications, set ",(0,r.jsx)(n.code,{children:"ALERT_REPORTS_NOTIFICATION_DRY_RUN"})," to ",(0,r.jsx)(n.code,{children:"False"})," in ",(0,r.jsx)(n.a,{href:"https://github.com/apache/superset/blob/master/docker/pythonpath_dev/superset_config.py",children:"superset config"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"in-your-dockerfile",children:["In your ",(0,r.jsx)(n.code,{children:"Dockerfile"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You must install a headless browser, for taking screenshots of the charts and dashboards. Only Firefox and Chrome are currently supported.","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["If you choose Chrome, you must also change the value of ",(0,r.jsx)(n.code,{children:"WEBDRIVER_TYPE"})," to ",(0,r.jsx)(n.code,{children:'"chrome"'})," in your ",(0,r.jsx)(n.code,{children:"superset_config.py"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Note: All the components required (Firefox headless browser, Redis, Postgres db, celery worker and celery beat) are present in the ",(0,r.jsx)(n.em,{children:"dev"})," docker image if you are following ",(0,r.jsx)(n.a,{href:"/docs/installation/docker-compose/",children:"Installing Superset Locally"}),".\nAll you need to do is add the required config variables described in this guide (See ",(0,r.jsx)(n.code,{children:"Detailed Config"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["If you are running a non-dev docker image, e.g., a stable release like ",(0,r.jsx)(n.code,{children:"apache/superset:3.1.0"}),", that image does not include a headless browser.  Only the ",(0,r.jsx)(n.code,{children:"superset_worker"}),' container needs this headless browser to browse to the target chart or dashboard.\nYou can either install and configure the headless browser - see "Custom Dockerfile" section below - or when deploying via ',(0,r.jsx)(n.code,{children:"docker compose"}),", modify your ",(0,r.jsx)(n.code,{children:"docker-compose.yml"})," file to use a dev image for the worker container and a stable release image for the ",(0,r.jsx)(n.code,{children:"superset_app"})," container."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Note"}),': In this context, a "dev image" is the same application software as its corresponding non-dev image, just bundled with additional tools.  So an image like ',(0,r.jsx)(n.code,{children:"3.1.0-dev"})," is identical to ",(0,r.jsx)(n.code,{children:"3.1.0"}),' when it comes to stability, functionality, and running in production.  The actual "in-development" versions of Superset - cutting-edge and unstable - are not tagged with version numbers on Docker Hub and will display version ',(0,r.jsx)(n.code,{children:"0.0.0-dev"})," within the Superset UI."]}),"\n",(0,r.jsx)(n.h3,{id:"slack-integration",children:"Slack integration"}),"\n",(0,r.jsx)(n.p,{children:"To send alerts and reports to Slack channels, you need to create a new Slack Application on your workspace."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Connect to your Slack workspace, then head to [",(0,r.jsx)(n.a,{href:"https://api.slack.com/apps",children:"https://api.slack.com/apps"}),"]."]}),"\n",(0,r.jsx)(n.li,{children:"Create a new app."}),"\n",(0,r.jsxs)(n.li,{children:['Go to "OAuth & Permissions" section, and give the following scopes to your app:',"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"incoming-webhook"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"files:write"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"chat:write"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:'At the top of the "OAuth and Permissions" section, click "install to workspace".'}),"\n",(0,r.jsx)(n.li,{children:"Select a default channel for your app and continue.\n(You can post to any channel by inviting your Superset app into that channel)."}),"\n",(0,r.jsxs)(n.li,{children:['The app should now be installed in your workspace, and a "Bot User OAuth Access Token" should have been created. Copy that token in the ',(0,r.jsx)(n.code,{children:"SLACK_API_TOKEN"})," variable of your ",(0,r.jsx)(n.code,{children:"superset_config.py"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Restart the service (or run ",(0,r.jsx)(n.code,{children:"superset init"}),") to pull in the new configuration."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Note: when you configure an alert or a report, the Slack channel list takes channel names without the leading '#' e.g. use ",(0,r.jsx)(n.code,{children:"alerts"})," instead of ",(0,r.jsx)(n.code,{children:"#alerts"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"kubernetes-specific",children:"Kubernetes-specific"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You must have a ",(0,r.jsx)(n.code,{children:"celery beat"})," pod running. If you're using the chart included in the GitHub repository under ",(0,r.jsx)(n.a,{href:"https://github.com/apache/superset/tree/master/helm/superset",children:"helm/superset"}),", you need to put ",(0,r.jsx)(n.code,{children:"supersetCeleryBeat.enabled = true"})," in your values override."]}),"\n",(0,r.jsxs)(n.li,{children:["You can see the dedicated docs about ",(0,r.jsx)(n.a,{href:"/docs/installation/kubernetes",children:"Kubernetes installation"})," for more details."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"docker-compose-specific",children:"Docker Compose specific"}),"\n",(0,r.jsxs)(n.h4,{id:"you-must-have-in-your-docker-composeyml",children:["You must have in your ",(0,r.jsx)(n.code,{children:"docker-compose.yml"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A Redis message broker"}),"\n",(0,r.jsx)(n.li,{children:"PostgreSQL DB instead of SQLlite"}),"\n",(0,r.jsxs)(n.li,{children:["One or more ",(0,r.jsx)(n.code,{children:"celery worker"})]}),"\n",(0,r.jsxs)(n.li,{children:["A single ",(0,r.jsx)(n.code,{children:"celery beat"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This process also works in a Docker swarm environment, you would just need to add ",(0,r.jsx)(n.code,{children:"Deploy:"})," to the Superset, Redis and Postgres services along with your specific configs for your swarm."]}),"\n",(0,r.jsx)(n.h3,{id:"detailed-config",children:"Detailed config"}),"\n",(0,r.jsxs)(n.p,{children:["The following configurations need to be added to the ",(0,r.jsx)(n.code,{children:"superset_config.py"})," file. This file is loaded when the image runs, and any configurations in it will override the default configurations found in the ",(0,r.jsx)(n.code,{children:"config.py"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can find documentation about each field in the default ",(0,r.jsx)(n.code,{children:"config.py"})," in the GitHub repository under ",(0,r.jsx)(n.a,{href:"https://github.com/apache/superset/blob/master/superset/config.py",children:"superset/config.py"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"You need to replace default values with your custom Redis, Slack and/or SMTP config."}),"\n",(0,r.jsx)(n.p,{children:"Superset uses Celery beat and Celery worker(s) to send alerts and reports."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The beat is the scheduler that tells the worker when to perform its tasks. This schedule is defined when you create the alert or report."}),"\n",(0,r.jsx)(n.li,{children:"The worker will process the  tasks that need to be performed when an alert or report is fired."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"CeleryConfig"}),", only the ",(0,r.jsx)(n.code,{children:"beat_schedule"})," is relevant to this feature, the rest of the ",(0,r.jsx)(n.code,{children:"CeleryConfig"})," can be changed for your needs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from celery.schedules import crontab\n\nFEATURE_FLAGS = {\n    "ALERT_REPORTS": True\n}\n\nREDIS_HOST = "superset_cache"\nREDIS_PORT = "6379"\n\nclass CeleryConfig:\n    broker_url = f"redis://{REDIS_HOST}:{REDIS_PORT}/0"\n    imports = (\n        "superset.sql_lab",\n        "superset.tasks.scheduler",\n    )\n    result_backend = f"redis://{REDIS_HOST}:{REDIS_PORT}/0"\n    worker_prefetch_multiplier = 10\n    task_acks_late = True\n    task_annotations = {\n        "sql_lab.get_sql_results": {\n            "rate_limit": "100/s",\n        },\n    }\n    beat_schedule = {\n        "reports.scheduler": {\n            "task": "reports.scheduler",\n            "schedule": crontab(minute="*", hour="*"),\n        },\n        "reports.prune_log": {\n            "task": "reports.prune_log",\n            "schedule": crontab(minute=0, hour=0),\n        },\n    }\nCELERY_CONFIG = CeleryConfig\n\nSCREENSHOT_LOCATE_WAIT = 100\nSCREENSHOT_LOAD_WAIT = 600\n\n# Slack configuration\nSLACK_API_TOKEN = "xoxb-"\n\n# Email configuration\nSMTP_HOST = "smtp.sendgrid.net" # change to your host\nSMTP_PORT = 2525 # your port, e.g. 587\nSMTP_STARTTLS = True\nSMTP_SSL_SERVER_AUTH = True # If your using an SMTP server with a valid certificate\nSMTP_SSL = False\nSMTP_USER = "your_user" # use the empty string "" if using an unauthenticated SMTP server\nSMTP_PASSWORD = "your_password" # use the empty string "" if using an unauthenticated SMTP server\nSMTP_MAIL_FROM = "noreply@youremail.com"\nEMAIL_REPORTS_SUBJECT_PREFIX = "[Superset] " # optional - overwrites default value in config.py of "[Report] "\n\n# WebDriver configuration\n# If you use Firefox, you can stick with default values\n# If you use Chrome, then add the following WEBDRIVER_TYPE and WEBDRIVER_OPTION_ARGS\nWEBDRIVER_TYPE = "chrome"\nWEBDRIVER_OPTION_ARGS = [\n    "--force-device-scale-factor=2.0",\n    "--high-dpi-support=2.0",\n    "--headless",\n    "--disable-gpu",\n    "--disable-dev-shm-usage",\n    "--no-sandbox",\n    "--disable-setuid-sandbox",\n    "--disable-extensions",\n]\n\n# This is for internal use, you can keep http\nWEBDRIVER_BASEURL = "http://superset:8088" # When running using docker compose use "http://superset_app:8088\'\n# This is the link sent to the recipient. Change to your domain, e.g. https://superset.mydomain.com\nWEBDRIVER_BASEURL_USER_FRIENDLY = "http://localhost:8088"\n'})}),"\n",(0,r.jsx)(n.p,{children:"You also need\nto specify on behalf of which username to render the dashboards. In general, dashboards and charts\nare not accessible to unauthorized requests, that is why the worker needs to take over credentials\nof an existing user to take a snapshot."}),"\n",(0,r.jsxs)(n.p,{children:["By default, Alerts and Reports are executed as the owner of the alert/report object. To use a fixed user account,\njust change the config as follows (",(0,r.jsx)(n.code,{children:"admin"})," in this example):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superset.tasks.types import ExecutorType\n\nTHUMBNAIL_SELENIUM_USER = 'admin'\nALERT_REPORTS_EXECUTE_AS = [ExecutorType.SELENIUM]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Please refer to ",(0,r.jsx)(n.code,{children:"ExecutorType"})," in the codebase for other executor types."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Important notes"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Be mindful of the concurrency setting for celery (using ",(0,r.jsx)(n.code,{children:"-c 4"}),"). Selenium/webdriver instances can\nconsume a lot of CPU / memory on your servers."]}),"\n",(0,r.jsxs)(n.li,{children:["In some cases, if you notice a lot of leaked geckodriver processes, try running your celery\nprocesses with ",(0,r.jsx)(n.code,{children:"celery worker --pool=prefork --max-tasks-per-child=128 ..."})]}),"\n",(0,r.jsxs)(n.li,{children:["It is recommended to run separate workers for the ",(0,r.jsx)(n.code,{children:"sql_lab"})," and ",(0,r.jsx)(n.code,{children:"email_reports"})," tasks. This can be\ndone using the ",(0,r.jsx)(n.code,{children:"queue"})," field in ",(0,r.jsx)(n.code,{children:"task_annotations"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Adjust ",(0,r.jsx)(n.code,{children:"WEBDRIVER_BASEURL"})," in your configuration file if celery workers can\u2019t access Superset via\nits default value of ",(0,r.jsx)(n.code,{children:"http://0.0.0.0:8080/"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"It's also possible to specify a minimum interval between each report's execution through the config file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Set a minimum interval threshold between executions (for each Alert/Report)\n# Value should be an integer\nALERT_MINIMUM_INTERVAL = int(timedelta(minutes=10).total_seconds())\nREPORT_MINIMUM_INTERVAL = int(timedelta(minutes=5).total_seconds())\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, you can assign a function to ",(0,r.jsx)(n.code,{children:"ALERT_MINIMUM_INTERVAL"})," and/or ",(0,r.jsx)(n.code,{children:"REPORT_MINIMUM_INTERVAL"}),". This is useful to dynamically retrieve a value as needed:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def alert_dynamic_minimal_interval(**kwargs) -> int:\n    """\n    Define logic here to retrieve the value dynamically\n    """\n\nALERT_MINIMUM_INTERVAL = alert_dynamic_minimal_interval\n'})}),"\n",(0,r.jsx)(n.h2,{id:"custom-dockerfile",children:"Custom Dockerfile"}),"\n",(0,r.jsxs)(n.p,{children:["If you're running the dev version of a released Superset image, like ",(0,r.jsx)(n.code,{children:"apache/superset:3.1.0-dev"}),", you should be set with the above."]}),"\n",(0,r.jsx)(n.p,{children:"But if you're building your own image, or starting with a non-dev version, a webdriver (and headless browser) is needed to capture screenshots of the charts and dashboards which are then sent to the recipient.\nHere's how you can modify your Dockerfile to take the screenshots either with Firefox or Chrome."}),"\n",(0,r.jsx)(n.h3,{id:"using-firefox",children:"Using Firefox"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-docker",children:"FROM apache/superset:3.1.0\n\nUSER root\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y firefox-esr\n\nENV GECKODRIVER_VERSION=0.29.0\nRUN wget -q https://github.com/mozilla/geckodriver/releases/download/v${GECKODRIVER_VERSION}/geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz && \\\n    tar -x geckodriver -zf geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz -O > /usr/bin/geckodriver && \\\n    chmod 755 /usr/bin/geckodriver && \\\n    rm geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz\n\nRUN pip install --no-cache gevent psycopg2 redis\n\nUSER superset\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-chrome",children:"Using Chrome"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-docker",children:"FROM apache/superset:3.1.0\n\nUSER root\n\nRUN apt-get update && \\\n    wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \\\n    apt-get install -y --no-install-recommends ./google-chrome-stable_current_amd64.deb && \\\n    rm -f google-chrome-stable_current_amd64.deb\n\nRUN export CHROMEDRIVER_VERSION=$(curl --silent https://chromedriver.storage.googleapis.com/LATEST_RELEASE_102) && \\\n    wget -q https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip && \\\n    unzip chromedriver_linux64.zip -d /usr/bin && \\\n    chmod 755 /usr/bin/chromedriver && \\\n    rm -f chromedriver_linux64.zip\n\nRUN pip install --no-cache gevent psycopg2 redis\n\nUSER superset\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Don't forget to set ",(0,r.jsx)(n.code,{children:"WEBDRIVER_TYPE"})," and ",(0,r.jsx)(n.code,{children:"WEBDRIVER_OPTION_ARGS"})," in your config if you use Chrome."]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.p,{children:"There are many reasons that reports might not be working.  Try these steps to check for specific issues."}),"\n",(0,r.jsx)(n.h3,{id:"confirm-feature-flag-is-enabled-and-you-have-sufficient-permissions",children:"Confirm feature flag is enabled and you have sufficient permissions"}),"\n",(0,r.jsxs)(n.p,{children:['If you don\'t see "Alerts & Reports" under the ',(0,r.jsx)(n.em,{children:"Manage"})," section of the Settings dropdown in the Superset UI, you need to enable the ",(0,r.jsx)(n.code,{children:"ALERT_REPORTS"})," feature flag (see above). Enable another feature flag and check to see that it took effect, to verify that your config file is getting loaded."]}),"\n",(0,r.jsx)(n.p,{children:"Log in as an admin user to ensure you have adequate permissions."}),"\n",(0,r.jsx)(n.h3,{id:"check-the-logs-of-your-celery-worker",children:"Check the logs of your Celery worker"}),"\n",(0,r.jsxs)(n.p,{children:["This is the best source of information about the problem.  In a docker compose deployment, you can do this with a command like ",(0,r.jsx)(n.code,{children:"docker logs superset_worker --since 1h"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"check-web-browser-and-webdriver-installation",children:"Check web browser and webdriver installation"}),"\n",(0,r.jsx)(n.p,{children:"To take a screenshot, the worker visits the dashboard or chart using a headless browser, then takes a screenshot. If you are able to send a chart as CSV or text but can't send as PNG, your problem may lie with the browser."}),"\n",(0,r.jsxs)(n.p,{children:["Superset docker images that have a tag ending with ",(0,r.jsx)(n.code,{children:"-dev"})," have the Firefox headless browser and geckodriver already installed. You can test that these are installed and in the proper path by entering your Superset worker and running ",(0,r.jsx)(n.code,{children:"firefox --headless"})," and then ",(0,r.jsx)(n.code,{children:"geckodriver"}),". Both commands should start those applications."]}),"\n",(0,r.jsx)(n.p,{children:"If you are handling the installation of that software on your own, or wish to use Chromium instead, do your own verification to ensure that the headless browser opens successfully in the worker environment."}),"\n",(0,r.jsx)(n.h3,{id:"send-a-test-email",children:"Send a test email"}),"\n",(0,r.jsxs)(n.p,{children:["One symptom of an invalid connection to an email server is receiving an error of ",(0,r.jsx)(n.code,{children:"[Errno 110] Connection timed out"})," in your logs when the report tries to send."]}),"\n",(0,r.jsxs)(n.p,{children:["Confirm via testing that your outbound email configuration is correct.  Here is the simplest test, for an un-authenticated email SMTP email service running on port 25.  If you are sending over SSL, for instance, study how ",(0,r.jsx)(n.a,{href:"https://github.com/apache/superset/blob/master/superset/utils/core.py#L818",children:"Superset's codebase sends emails"})," and then test with those commands and arguments."]}),"\n",(0,r.jsx)(n.p,{children:"Start Python in your worker environment, replace all example values, and run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nfrom_email = 'superset_emails@example.com'\nto_email = 'your_email@example.com'\nmsg = MIMEMultipart()\nmsg['From'] = from_email\nmsg['To'] = to_email\nmsg['Subject'] = 'Superset SMTP config test'\nmessage = 'It worked'\nmsg.attach(MIMEText(message))\nmailserver = smtplib.SMTP('smtpmail.example.com', 25)\nmailserver.sendmail(from_email, to_email, msg.as_string())\nmailserver.quit()\n"})}),"\n",(0,r.jsx)(n.p,{children:"This should send an email."}),"\n",(0,r.jsx)(n.p,{children:"Possible fixes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Some cloud hosts disable outgoing unauthenticated SMTP email to prevent spam.  For instance, ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/virtual-network/troubleshoot-outbound-smtp-connectivity",children:"Azure blocks port 25 by default on some machines"}),". Enable that port or use another sending method."]}),"\n",(0,r.jsx)(n.li,{children:"Use another set of SMTP credentials that you verify works in this setup."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"browse-to-your-report-from-the-worker",children:"Browse to your report from the worker"}),"\n",(0,r.jsxs)(n.p,{children:["The worker may be unable to reach the report. It will use the value of ",(0,r.jsx)(n.code,{children:"WEBDRIVER_BASEURL"})," to browse to the report.  If that route is invalid, or presents an authentication challenge that the worker can't pass, the report screenshot will fail."]}),"\n",(0,r.jsxs)(n.p,{children:["Check this by attempting to ",(0,r.jsx)(n.code,{children:"curl"})," the URL of a report that you see in the error logs of your worker. For instance, from the worker environment, run ",(0,r.jsx)(n.code,{children:"curl http://superset_app:8088/superset/dashboard/1/"}),". You may get different responses depending on whether the dashboard exists - for example, you may need to change the ",(0,r.jsx)(n.code,{children:"1"})," in that URL. If there's a URL in your logs from a failed report screenshot, that's a good place to start. The goal is to determine a valid value for ",(0,r.jsx)(n.code,{children:"WEBDRIVER_BASEURL"})," and determine if an issue like HTTPS or authentication is redirecting your worker."]}),"\n",(0,r.jsxs)(n.p,{children:["In a deployment with authentication measures enabled like HTTPS and Single Sign-On, it may make sense to have the worker navigate directly to the Superset application running in the same location, avoiding the need to sign in.  For instance, you could use ",(0,r.jsx)(n.code,{children:'WEBDRIVER_BASEURL="http://superset_app:8088"'})," for a docker compose deployment, and set ",(0,r.jsx)(n.code,{children:'"force_https": False,'})," in your ",(0,r.jsx)(n.code,{children:"TALISMAN_CONFIG"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"scheduling-queries-as-reports",children:"Scheduling Queries as Reports"}),"\n",(0,r.jsxs)(n.p,{children:["You can optionally allow your users to schedule queries directly in SQL Lab. This is done by adding\nextra metadata to saved queries, which are then picked up by an external scheduled (like\n",(0,r.jsx)(n.a,{href:"https://airflow.apache.org/",children:"Apache Airflow"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["To allow scheduled queries, add the following to ",(0,r.jsx)(n.code,{children:"SCHEDULED_QUERIES"})," in your configuration file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"SCHEDULED_QUERIES = {\n    # This information is collected when the user clicks \"Schedule query\",\n    # and saved into the `extra` field of saved queries.\n    # See: https://github.com/mozilla-services/react-jsonschema-form\n    'JSONSCHEMA': {\n        'title': 'Schedule',\n        'description': (\n            'In order to schedule a query, you need to specify when it '\n            'should start running, when it should stop running, and how '\n            'often it should run. You can also optionally specify '\n            'dependencies that should be met before the query is '\n            'executed. Please read the documentation for best practices '\n            'and more information on how to specify dependencies.'\n        ),\n        'type': 'object',\n        'properties': {\n            'output_table': {\n                'type': 'string',\n                'title': 'Output table name',\n            },\n            'start_date': {\n                'type': 'string',\n                'title': 'Start date',\n                # date-time is parsed using the chrono library, see\n                # https://www.npmjs.com/package/chrono-node#usage\n                'format': 'date-time',\n                'default': 'tomorrow at 9am',\n            },\n            'end_date': {\n                'type': 'string',\n                'title': 'End date',\n                # date-time is parsed using the chrono library, see\n                # https://www.npmjs.com/package/chrono-node#usage\n                'format': 'date-time',\n                'default': '9am in 30 days',\n            },\n            'schedule_interval': {\n                'type': 'string',\n                'title': 'Schedule interval',\n            },\n            'dependencies': {\n                'type': 'array',\n                'title': 'Dependencies',\n                'items': {\n                    'type': 'string',\n                },\n            },\n        },\n    },\n    'UISCHEMA': {\n        'schedule_interval': {\n            'ui:placeholder': '@daily, @weekly, etc.',\n        },\n        'dependencies': {\n            'ui:help': (\n                'Check the documentation for the correct format when '\n                'defining dependencies.'\n            ),\n        },\n    },\n    'VALIDATION': [\n        # ensure that start_date <= end_date\n        {\n            'name': 'less_equal',\n            'arguments': ['start_date', 'end_date'],\n            'message': 'End date cannot be before start date',\n            # this is where the error message is shown\n            'container': 'end_date',\n        },\n    ],\n    # link to the scheduler; this example links to an Airflow pipeline\n    # that uses the query id and the output table as its name\n    'linkback': (\n        'https://airflow.example.com/admin/airflow/tree?'\n        'dag_id=query_${id}_${extra_json.schedule_info.output_table}'\n    ),\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This configuration is based on\n",(0,r.jsx)(n.a,{href:"https://github.com/mozilla-services/react-jsonschema-form",children:"react-jsonschema-form"})," and will add a\nmenu item called \u201cSchedule\u201d to SQL Lab. When the menu item is clicked, a modal will show up where\nthe user can add the metadata required for scheduling the query."]}),"\n",(0,r.jsxs)(n.p,{children:["This information can then be retrieved from the endpoint ",(0,r.jsx)(n.code,{children:"/api/v1/saved_query/"})," and used to\nschedule the queries that have ",(0,r.jsx)(n.code,{children:"schedule_info"})," in their JSON metadata. For schedulers other than\nAirflow, additional fields can be easily added to the configuration file above."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(96540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);