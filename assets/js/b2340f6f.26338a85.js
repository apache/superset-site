"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[5652],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=p(t),c=r,y=g["".concat(i,".").concat(c)]||g[c]||d[c]||o;return t?a.createElement(y,s(s({ref:n},u),{},{components:t})):a.createElement(y,s({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=c;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[g]="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},82697:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(58168),r=(t(96540),t(15680));const o={title:"Development How-tos",hide_title:!0,sidebar_position:4,version:1},s="Development How-tos",l={unversionedId:"contributing/howtos",id:"contributing/howtos",title:"Development How-tos",description:"Contributing to Documentation",source:"@site/docs/contributing/howtos.mdx",sourceDirName:"contributing",slug:"/contributing/howtos",permalink:"/docs/contributing/howtos",draft:!1,editUrl:"https://github.com/apache/superset/edit/master/docs/docs/contributing/howtos.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Development How-tos",hide_title:!0,sidebar_position:4,version:1},sidebar:"CustomSidebar",previous:{title:"Setting up a Development Environment",permalink:"/docs/contributing/development"},next:{title:"Resources",permalink:"/docs/contributing/resources"}},i={},p=[{value:"Contributing to Documentation",id:"contributing-to-documentation",level:2},{value:"Local Development",id:"local-development",level:3},{value:"Build",id:"build",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Creating Visualization Plugins",id:"creating-visualization-plugins",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Creating a simple Hello World viz plugin",id:"creating-a-simple-hello-world-viz-plugin",level:3},{value:"Testing",id:"testing",level:2},{value:"Python Testing",id:"python-testing",level:3},{value:"Testing with local Presto connections",id:"testing-with-local-presto-connections",level:4},{value:"Frontend Testing",id:"frontend-testing",level:3},{value:"e2e Integration Testing",id:"e2e-integration-testing",level:3},{value:"Debugging Server App",id:"debugging-server-app",level:3},{value:"Debugging Server App in Kubernetes Environment",id:"debugging-server-app-in-kubernetes-environment",level:3},{value:"Storybook",id:"storybook",level:3},{value:"Contribute Translations",id:"contribute-translations",level:2},{value:"Enabling language selection",id:"enabling-language-selection",level:3},{value:"Creating a new language dictionary",id:"creating-a-new-language-dictionary",level:3},{value:"Extracting new strings for translation",id:"extracting-new-strings-for-translation",level:3},{value:"Updating language files",id:"updating-language-files",level:3},{value:"Applying translations",id:"applying-translations",level:3},{value:"Linting",id:"linting",level:2},{value:"Python",id:"python",level:3},{value:"TypeScript",id:"typescript",level:3}],u={toc:p},g="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(g,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"development-how-tos"},"Development How-tos"),(0,r.yg)("h2",{id:"contributing-to-documentation"},"Contributing to Documentation"),(0,r.yg)("p",null,"The latest documentation and tutorial are available at ",(0,r.yg)("a",{parentName:"p",href:"https://superset.apache.org/"},"https://superset.apache.org/"),"."),(0,r.yg)("p",null,"The documentation site is built using ",(0,r.yg)("a",{parentName:"p",href:"https://docusaurus.io/"},"Docusaurus 2"),", a modern\nstatic website generator, the source for which resides in ",(0,r.yg)("inlineCode",{parentName:"p"},"./docs"),"."),(0,r.yg)("h3",{id:"local-development"},"Local Development"),(0,r.yg)("p",null,"To set up a local development environment with hot reloading for the documentation site:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"cd docs\nyarn install  # Installs NPM dependencies\nyarn start  # Starts development server at http://localhost:3000\n")),(0,r.yg)("h3",{id:"build"},"Build"),(0,r.yg)("p",null,"To create and serve a production build of the documentation site:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"yarn build\nyarn serve\n")),(0,r.yg)("h3",{id:"deployment"},"Deployment"),(0,r.yg)("p",null,"Commits to ",(0,r.yg)("inlineCode",{parentName:"p"},"master")," trigger a rebuild and redeploy of the documentation site. Submit pull requests that modify the documentation with the ",(0,r.yg)("inlineCode",{parentName:"p"},"docs:")," prefix."),(0,r.yg)("h2",{id:"creating-visualization-plugins"},"Creating Visualization Plugins"),(0,r.yg)("p",null,'Visualizations in Superset are implemented in JavaScript or TypeScript. Superset\ncomes preinstalled with several visualizations types (hereafter "viz plugins") that\ncan be found under the ',(0,r.yg)("inlineCode",{parentName:"p"},"superset-frontend/plugins")," directory. Viz plugins are added to\nthe application in the ",(0,r.yg)("inlineCode",{parentName:"p"},"superset-frontend/src/visualizations/presets/MainPreset.js"),".\nThe Superset project is always happy to review proposals for new high quality viz\nplugins. However, for highly custom viz types it is recommended to maintain a fork\nof Superset, and add the custom built viz plugins by hand."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note:")," Additional community-generated resources about creating and deploying custom visualization plugins can be found on the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/apache/superset/wiki/Community-Resource-Library#creating-custom-data-visualizations"},"Superset Wiki")),(0,r.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("p",null,"In order to create a new viz plugin, you need the following:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Run MacOS or Linux (Windows is not officially supported, but may work)"),(0,r.yg)("li",{parentName:"ul"},"Node.js 16"),(0,r.yg)("li",{parentName:"ul"},"npm 7 or 8")),(0,r.yg)("p",null,"A general familiarity with ",(0,r.yg)("a",{parentName:"p",href:"https://reactjs.org/"},"React")," and the npm/Node system is\nalso recommended."),(0,r.yg)("h3",{id:"creating-a-simple-hello-world-viz-plugin"},"Creating a simple Hello World viz plugin"),(0,r.yg)("p",null,"To get started, you need the Superset Yeoman Generator. It is recommended to use the\nversion of the template that ships with the version of Superset you are using. This\ncan be installed by doing the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm i -g yo\ncd superset-frontend/packages/generator-superset\nnpm i\nnpm link\n")),(0,r.yg)("p",null,"After this you can proceed to create your viz plugin. Create a new directory for your\nviz plugin with the prefix ",(0,r.yg)("inlineCode",{parentName:"p"},"superset-plugin-chart")," and run the Yeoman generator:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"mkdir /tmp/superset-plugin-chart-hello-world\ncd /tmp/superset-plugin-chart-hello-world\n")),(0,r.yg)("p",null,"Initialize the viz plugin:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"yo @superset-ui/superset\n")),(0,r.yg)("p",null,"After that the generator will ask a few questions (the defaults should be fine):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"$ yo @superset-ui/superset\n     _-----_     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    |       |    \u2502      Welcome to the      \u2502\n    |--(o)--|    \u2502    generator-superset    \u2502\n   `---------\xb4   \u2502        generator!        \u2502\n    ( _\xb4U`_ )    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n    /___A___\\   /\n     |  ~  |\n   __'.___.'__\n \xb4   `  |\xb0 \xb4 Y `\n? Package name: superset-plugin-chart-hello-world\n? Description: Hello World\n? What type of chart would you like? Time-series chart\n   create package.json\n   create .gitignore\n   create babel.config.js\n   create jest.config.js\n   create README.md\n   create tsconfig.json\n   create src/index.ts\n   create src/plugin/buildQuery.ts\n   create src/plugin/controlPanel.ts\n   create src/plugin/index.ts\n   create src/plugin/transformProps.ts\n   create src/types.ts\n   create src/SupersetPluginChartHelloWorld.tsx\n   create test/index.test.ts\n   create test/__mocks__/mockExportString.js\n   create test/plugin/buildQuery.test.ts\n   create test/plugin/transformProps.test.ts\n   create types/external.d.ts\n   create src/images/thumbnail.png\n")),(0,r.yg)("p",null,"To build the viz plugin, run the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm i --force\nnpm run build\n")),(0,r.yg)("p",null,"Alternatively, to run the viz plugin in development mode (=rebuilding whenever changes\nare made), start the dev server with the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm run dev\n")),(0,r.yg)("p",null,"To add the package to Superset, go to the ",(0,r.yg)("inlineCode",{parentName:"p"},"superset-frontend")," subdirectory in your\nSuperset source folder run"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm i -S /tmp/superset-plugin-chart-hello-world\n")),(0,r.yg)("p",null,"If you publish your package to npm, you can naturally install directly from there, too.\nAfter this edit the ",(0,r.yg)("inlineCode",{parentName:"p"},"superset-frontend/src/visualizations/presets/MainPreset.js"),"\nand make the following changes:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import { SupersetPluginChartHelloWorld } from 'superset-plugin-chart-hello-world';\n")),(0,r.yg)("p",null,"to import the viz plugin and later add the following to the array that's passed to the\n",(0,r.yg)("inlineCode",{parentName:"p"},"plugins")," property:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"new SupersetPluginChartHelloWorld().configure({ key: 'ext-hello-world' }),\n")),(0,r.yg)("p",null,"After that the viz plugin should show up when you run Superset, e.g. the development\nserver:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm run dev-server\n")),(0,r.yg)("h2",{id:"testing"},"Testing"),(0,r.yg)("h3",{id:"python-testing"},"Python Testing"),(0,r.yg)("p",null,"All python tests are carried out in ",(0,r.yg)("a",{parentName:"p",href:"https://tox.readthedocs.io/en/latest/index.html"},"tox"),"\na standardized testing framework.\nAll python tests can be run with any of the tox ",(0,r.yg)("a",{parentName:"p",href:"https://tox.readthedocs.io/en/latest/example/basic.html#a-simple-tox-ini-default-environments"},"environments"),", via,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"tox -e <environment>\n")),(0,r.yg)("p",null,"For example,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"tox -e py38\n")),(0,r.yg)("p",null,"Alternatively, you can run all tests in a single file via,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"tox -e <environment> -- tests/test_file.py\n")),(0,r.yg)("p",null,"or for a specific test via,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"tox -e <environment> -- tests/test_file.py::TestClassName::test_method_name\n")),(0,r.yg)("p",null,"Note that the test environment uses a temporary directory for defining the\nSQLite databases which will be cleared each time before the group of test\ncommands are invoked."),(0,r.yg)("p",null,"There is also a utility script included in the Superset codebase to run python integration tests. The ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/apache/superset/tree/master/scripts/tests"},"readme can be\nfound here")),(0,r.yg)("p",null,"To run all integration tests for example, run this script from the root directory:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"scripts/tests/run.sh\n")),(0,r.yg)("p",null,"You can run unit tests found in './tests/unit_tests' for example with pytest. It is a simple way to run an isolated test that doesn't need any database setup"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"pytest ./link_to_test.py\n")),(0,r.yg)("h4",{id:"testing-with-local-presto-connections"},"Testing with local Presto connections"),(0,r.yg)("p",null,"If you happen to change db engine spec for Presto/Trino, you can run a local Presto cluster with Docker:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"docker run -p 15433:15433 starburstdata/presto:350-e.6\n")),(0,r.yg)("p",null,"Then update ",(0,r.yg)("inlineCode",{parentName:"p"},"SUPERSET__SQLALCHEMY_EXAMPLES_URI")," to point to local Presto cluster:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"export SUPERSET__SQLALCHEMY_EXAMPLES_URI=presto://localhost:15433/memory/default\n")),(0,r.yg)("h3",{id:"frontend-testing"},"Frontend Testing"),(0,r.yg)("p",null,"We use ",(0,r.yg)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest")," and ",(0,r.yg)("a",{parentName:"p",href:"https://airbnb.io/enzyme/"},"Enzyme")," to test TypeScript/JavaScript. Tests can be run with:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd superset-frontend\nnpm run test\n")),(0,r.yg)("p",null,"To run a single test file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm run test -- path/to/file.js\n")),(0,r.yg)("h3",{id:"e2e-integration-testing"},"e2e Integration Testing"),(0,r.yg)("p",null,"We use ",(0,r.yg)("a",{parentName:"p",href:"https://www.cypress.io/"},"Cypress")," for end-to-end integration\ntests. One easy option to get started quickly is to leverage ",(0,r.yg)("inlineCode",{parentName:"p"},"tox")," to\nrun the whole suite in an isolated environment."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"tox -e cypress\n")),(0,r.yg)("p",null,"Alternatively, you can go lower level and set things up in your\ndevelopment environment by following these steps:"),(0,r.yg)("p",null,"First set up a python/flask backend:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'export SUPERSET_CONFIG=tests.integration_tests.superset_test_config\nexport SUPERSET_TESTENV=true\nexport CYPRESS_BASE_URL="http://localhost:8081"\nsuperset db upgrade\nsuperset load_test_users\nsuperset init\nsuperset load-examples --load-test-data\nsuperset run --port 8081\n')),(0,r.yg)("p",null,"In another terminal, prepare the frontend and run Cypress tests:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'cd superset-frontend\nnpm run build-instrumented\n\ncd cypress-base\nnpm install\n\n# run tests via headless Chrome browser (requires Chrome 64+)\nnpm run cypress-run-chrome\n\n# run tests from a specific file\nnpm run cypress-run-chrome -- --spec cypress/e2e/explore/link.test.ts\n\n# run specific file with video capture\nnpm run cypress-run-chrome -- --spec cypress/e2e/dashboard/index.test.js --config video=true\n\n# to open the cypress ui\nnpm run cypress-debug\n\n# to point cypress to a url other than the default (http://localhost:8088) set the environment variable before running the script\n# e.g., CYPRESS_BASE_URL="http://localhost:9000"\nCYPRESS_BASE_URL=<your url> npm run cypress open\n')),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/apache/superset/blob/master/superset-frontend/cypress_build.sh"},(0,r.yg)("inlineCode",{parentName:"a"},"superset-frontend/cypress_build.sh")),"."),(0,r.yg)("p",null,"As an alternative you can use docker compose environment for testing:"),(0,r.yg)("p",null,"Make sure you have added below line to your /etc/hosts file:\n",(0,r.yg)("inlineCode",{parentName:"p"},"127.0.0.1 db")),(0,r.yg)("p",null,"If you already have launched Docker environment please use the following command to assure a fresh database instance:\n",(0,r.yg)("inlineCode",{parentName:"p"},"docker compose down -v")),(0,r.yg)("p",null,"Launch environment:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"CYPRESS_CONFIG=true docker compose up")),(0,r.yg)("p",null,"It will serve backend and frontend on port 8088."),(0,r.yg)("p",null,"Run Cypress tests:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd cypress-base\nnpm install\nnpm run cypress open\n")),(0,r.yg)("h3",{id:"debugging-server-app"},"Debugging Server App"),(0,r.yg)("p",null,"Follow these instructions to debug the Flask app running inside a docker container."),(0,r.yg)("p",null,"First add the following to the ./docker-compose.yaml file"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'superset:\n    env_file: docker/.env\n    image: *superset-image\n    container_name: superset_app\n    command: ["/app/docker/docker-bootstrap.sh", "app"]\n    restart: unless-stopped\n+   cap_add:\n+     - SYS_PTRACE\n    ports:\n      - 8088:8088\n+     - 5678:5678\n    user: "root"\n    depends_on: *superset-depends-on\n    volumes: *superset-volumes\n    environment:\n      CYPRESS_CONFIG: "${CYPRESS_CONFIG}"\n')),(0,r.yg)("p",null,"Start Superset as usual"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"docker compose up\n")),(0,r.yg)("p",null,"Install the required libraries and packages to the docker container"),(0,r.yg)("p",null,"Enter the superset_app container"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"docker exec -it superset_app /bin/bash\nroot@39ce8cf9d6ab:/app#\n")),(0,r.yg)("p",null,"Run the following commands inside the container"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"apt update\napt install -y gdb\napt install -y net-tools\npip install debugpy\n")),(0,r.yg)("p",null,"Find the PID for the Flask process. Make sure to use the first PID. The Flask app will re-spawn a sub-process every time you change any of the python code. So it's important to use the first PID."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"ps -ef\n\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 14:09 ?        00:00:00 bash /app/docker/docker-bootstrap.sh app\nroot         6     1  4 14:09 ?        00:00:04 /usr/local/bin/python /usr/bin/flask run -p 8088 --with-threads --reload --debugger --host=0.0.0.0\nroot        10     6  7 14:09 ?        00:00:07 /usr/local/bin/python /usr/bin/flask run -p 8088 --with-threads --reload --debugger --host=0.0.0.0\n")),(0,r.yg)("p",null,"Inject debugpy into the running Flask process. In this case PID 6."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"python3 -m debugpy --listen 0.0.0.0:5678 --pid 6\n")),(0,r.yg)("p",null,"Verify that debugpy is listening on port 5678"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"netstat -tunap\n\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:5678            0.0.0.0:*               LISTEN      462/python\ntcp        0      0 0.0.0.0:8088            0.0.0.0:*               LISTEN      6/python\n")),(0,r.yg)("p",null,"You are now ready to attach a debugger to the process. Using VSCode you can configure a launch configuration file .vscode/launch.json like so."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "name": "Attach to Superset App in Docker Container",\n            "type": "python",\n            "request": "attach",\n            "connect": {\n                "host": "127.0.0.1",\n                "port": 5678\n            },\n            "pathMappings": [\n                {\n                    "localRoot": "${workspaceFolder}",\n                    "remoteRoot": "/app"\n                }\n            ]\n        },\n    ]\n}\n')),(0,r.yg)("p",null,'VSCode will not stop on breakpoints right away. We\'ve attached to PID 6 however it does not yet know of any sub-processes. In order to "wakeup" the debugger you need to modify a python file. This will trigger Flask to reload the code and create a new sub-process. This new sub-process will be detected by VSCode and breakpoints will be activated.'),(0,r.yg)("h3",{id:"debugging-server-app-in-kubernetes-environment"},"Debugging Server App in Kubernetes Environment"),(0,r.yg)("p",null,"To debug Flask running in POD inside kubernetes cluster. You'll need to make sure the pod runs as root and is granted the SYS_TRACE capability.These settings should not be used in production environments."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'  securityContext:\n    capabilities:\n      add: ["SYS_PTRACE"]\n')),(0,r.yg)("p",null,"See (set capabilities for a container)","[https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container]"," for more details."),(0,r.yg)("p",null,"Once the pod is running as root and has the SYS_PTRACE capability it will be able to debug the Flask app."),(0,r.yg)("p",null,"You can follow the same instructions as in the docker-compose. Enter the pod and install the required library and packages; gdb, netstat and debugpy."),(0,r.yg)("p",null,"Often in a Kubernetes environment nodes are not addressable from outside the cluster. VSCode will thus be unable to remotely connect to port 5678 on a Kubernetes node. In order to do this you need to create a tunnel that port forwards 5678 to your local machine."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"kubectl port-forward  pod/superset-<some random id> 5678:5678\n")),(0,r.yg)("p",null,"You can now launch your VSCode debugger with the same config as above. VSCode will connect to to 127.0.0.1:5678 which is forwarded by kubectl to your remote kubernetes POD."),(0,r.yg)("h3",{id:"storybook"},"Storybook"),(0,r.yg)("p",null,"Superset includes a ",(0,r.yg)("a",{parentName:"p",href:"https://storybook.js.org/"},"Storybook")," to preview the layout/styling of various Superset components, and variations thereof. To open and view the Storybook:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd superset-frontend\nnpm run storybook\n")),(0,r.yg)("p",null,"When contributing new React components to Superset, please try to add a Story alongside the component's ",(0,r.yg)("inlineCode",{parentName:"p"},"jsx/tsx")," file."),(0,r.yg)("h2",{id:"contribute-translations"},"Contribute Translations"),(0,r.yg)("p",null,"We use ",(0,r.yg)("a",{parentName:"p",href:"https://python-babel.github.io/flask-babel/"},"Flask-Babel")," to translate Superset.\nIn Python files, we use the following\n",(0,r.yg)("a",{parentName:"p",href:"https://python-babel.github.io/flask-babel/#using-translations"},"translation functions"),"\nfrom ",(0,r.yg)("inlineCode",{parentName:"p"},"Flask-Babel"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"gettext")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"lazy_gettext")," (usually aliased to ",(0,r.yg)("inlineCode",{parentName:"li"},"_"),"): for translating singular\nstrings."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ngettext"),": for translating strings that might become plural.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from flask_babel import lazy_gettext as _\n")),(0,r.yg)("p",null,"then wrap the translatable strings with it, e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"_('Translate me')"),".\nDuring extraction, string literals passed to ",(0,r.yg)("inlineCode",{parentName:"p"},"_")," will be added to the\ngenerated ",(0,r.yg)("inlineCode",{parentName:"p"},".po")," file for each language for later translation."),(0,r.yg)("p",null,"At runtime, the ",(0,r.yg)("inlineCode",{parentName:"p"},"_")," function will return the translation of the given\nstring for the current language, or the given string itself\nif no translation is available."),(0,r.yg)("p",null,"In TypeScript/JavaScript, the technique is similar:\nwe import ",(0,r.yg)("inlineCode",{parentName:"p"},"t")," (simple translation), ",(0,r.yg)("inlineCode",{parentName:"p"},"tn")," (translation containing a number)."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'import { t, tn } from "@superset-ui/translation";\n')),(0,r.yg)("h3",{id:"enabling-language-selection"},"Enabling language selection"),(0,r.yg)("p",null,"Add the ",(0,r.yg)("inlineCode",{parentName:"p"},"LANGUAGES")," variable to your ",(0,r.yg)("inlineCode",{parentName:"p"},"superset_config.py"),". Having more than one\noption inside will add a language selection dropdown to the UI on the right side\nof the navigation bar."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"LANGUAGES = {\n    'en': {'flag': 'us', 'name': 'English'},\n    'fr': {'flag': 'fr', 'name': 'French'},\n    'zh': {'flag': 'cn', 'name': 'Chinese'},\n}\n")),(0,r.yg)("h3",{id:"creating-a-new-language-dictionary"},"Creating a new language dictionary"),(0,r.yg)("p",null,"First check if the language code for your target language already exists. Check if the\n",(0,r.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes"},"two letter ISO 639-1 code"),"\nfor your target language already exists in the ",(0,r.yg)("inlineCode",{parentName:"p"},"superset/translations")," directory:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'ls superset/translations | grep -E "^[a-z]{2}\\/"\n')),(0,r.yg)("p",null,"If your language already has a preexisting translation, skip to the next section"),(0,r.yg)("p",null,"The following languages are already supported by Flask AppBuilder, and will make it\neasier to translate the application to your target language:\n",(0,r.yg)("a",{parentName:"p",href:"https://flask-appbuilder.readthedocs.io/en/latest/i18n.html"},"Flask AppBuilder i18n documentation")),(0,r.yg)("p",null,"To create a dictionary for a new language, first make sure the necessary dependencies are installed:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"pip install -r superset/translations/requirements.txt\n")),(0,r.yg)("p",null,"Then run the following, where ",(0,r.yg)("inlineCode",{parentName:"p"},"LANGUAGE_CODE")," is replaced with the language code for your target\nlanguage:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"pybabel init -i superset/translations/messages.pot -d superset/translations -l LANGUAGE_CODE\n")),(0,r.yg)("p",null,"For instance, to add a translation for Finnish (language code ",(0,r.yg)("inlineCode",{parentName:"p"},"fi"),"), run the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"pybabel init -i superset/translations/messages.pot -d superset/translations -l fi\n")),(0,r.yg)("h3",{id:"extracting-new-strings-for-translation"},"Extracting new strings for translation"),(0,r.yg)("p",null,"This step needs to be done every time application strings change. This happens fairly\nfrequently, so if you want to ensure that your translation has good coverage, this\nstep needs to be run fairly frequently and the updated strings merged to the upstream\ncodebase via PRs. To update the template file ",(0,r.yg)("inlineCode",{parentName:"p"},"superset/translations/messages.pot"),"\nwith current application strings, run the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"pybabel extract -F superset/translations/babel.cfg -o superset/translations/messages.pot -k _ -k __ -k t -k tn -k tct .\n")),(0,r.yg)("p",null,"Do not forget to update this file with the appropriate license information."),(0,r.yg)("h3",{id:"updating-language-files"},"Updating language files"),(0,r.yg)("p",null,"Run the following command to update the language files with the new extracted strings."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"}," pybabel update -i superset/translations/messages.pot -d superset/translations --ignore-obsolete\n")),(0,r.yg)("p",null,"You can then translate the strings gathered in files located under\n",(0,r.yg)("inlineCode",{parentName:"p"},"superset/translation"),", where there's one folder per language. You can use ",(0,r.yg)("a",{parentName:"p",href:"https://poedit.net/features"},"Poedit"),"\nto translate the ",(0,r.yg)("inlineCode",{parentName:"p"},"po")," file more conveniently.\nHere is ",(0,r.yg)("a",{parentName:"p",href:"https://web.archive.org/web/20220517065036/https://wiki.lxde.org/en/Translate_*.po_files_with_Poedit"},"a tutorial"),"."),(0,r.yg)("p",null,"To perform the translation on MacOS, you can install ",(0,r.yg)("inlineCode",{parentName:"p"},"poedit")," via Homebrew:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"brew install poedit\n")),(0,r.yg)("p",null,"After this, just start the ",(0,r.yg)("inlineCode",{parentName:"p"},"poedit")," application and open the ",(0,r.yg)("inlineCode",{parentName:"p"},"messages.po")," file. In the\ncase of the Finnish translation, this would be ",(0,r.yg)("inlineCode",{parentName:"p"},"superset/translations/fi/LC_MESSAGES/messages.po"),"."),(0,r.yg)("h3",{id:"applying-translations"},"Applying translations"),(0,r.yg)("p",null,"To make the translations available on the frontend, we need to convert the PO file into\na JSON file. To do this, we need to globally install the npm package ",(0,r.yg)("inlineCode",{parentName:"p"},"po2json"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm install -g po2json\n")),(0,r.yg)("p",null,"To convert all PO files to formatted JSON files you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"po2json.sh")," script."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"./scripts/po2json.sh\n")),(0,r.yg)("p",null,"If you get errors running ",(0,r.yg)("inlineCode",{parentName:"p"},"po2json"),", you might be running the Ubuntu package with the same\nname, rather than the Node.js package (they have a different format for the arguments). If\nthere is a conflict, you may need to update your ",(0,r.yg)("inlineCode",{parentName:"p"},"PATH")," environment variable or fully qualify\nthe executable path (e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"/usr/local/bin/po2json")," instead of ",(0,r.yg)("inlineCode",{parentName:"p"},"po2json"),").\nIf you get a lot of ",(0,r.yg)("inlineCode",{parentName:"p"},"[null,***]")," in ",(0,r.yg)("inlineCode",{parentName:"p"},"messages.json"),", just delete all the ",(0,r.yg)("inlineCode",{parentName:"p"},"null,"),".\nFor example, ",(0,r.yg)("inlineCode",{parentName:"p"},'"year":["\u5e74"]')," is correct while ",(0,r.yg)("inlineCode",{parentName:"p"},'"year":[null,"\u5e74"]'),"is incorrect."),(0,r.yg)("p",null,"Finally, for the translations to take effect we need to compile translation catalogs into\nbinary MO files."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"pybabel compile -d superset/translations\n")),(0,r.yg)("h2",{id:"linting"},"Linting"),(0,r.yg)("h3",{id:"python"},"Python"),(0,r.yg)("p",null,"We use ",(0,r.yg)("a",{parentName:"p",href:"https://pylint.org/"},"Pylint")," for linting which can be invoked via:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"# for python\ntox -e pylint\n")),(0,r.yg)("p",null,"In terms of best practices please avoid blanket disabling of Pylint messages globally (via ",(0,r.yg)("inlineCode",{parentName:"p"},".pylintrc"),") or top-level within the file header, albeit there being a few exceptions. Disabling should occur inline as it prevents masking issues and provides context as to why said message is disabled."),(0,r.yg)("p",null,"Additionally, the Python code is auto-formatted using ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/python/black"},"Black")," which\nis configured as a pre-commit hook. There are also numerous ",(0,r.yg)("a",{parentName:"p",href:"https://black.readthedocs.io/en/stable/integrations/editors.html"},"editor integrations")),(0,r.yg)("h3",{id:"typescript"},"TypeScript"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd superset-frontend\nnpm ci\n# run eslint checks\nnpm run eslint -- .\n# run tsc (typescript) checks\nnpm run type\n")),(0,r.yg)("p",null,"If using the eslint extension with vscode, put the following in your workspace ",(0,r.yg)("inlineCode",{parentName:"p"},"settings.json")," file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'"eslint.workingDirectories": [\n  "superset-frontend"\n]\n')))}d.isMDXComponent=!0}}]);