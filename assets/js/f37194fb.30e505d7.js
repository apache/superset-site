"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[4949],{18090:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=s(74848),t=s(28453),i=s(86025);const a={title:"Connecting to Databases",hide_title:!0,sidebar_position:1,version:1},o="Connecting to Databases",c={id:"configuration/databases",title:"Connecting to Databases",description:"Superset does not ship bundled with connectivity to databases. The main step in connecting",source:"@site/docs/configuration/databases.mdx",sourceDirName:"configuration",slug:"/configuration/databases",permalink:"/docs/configuration/databases",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/superset/edit/master/docs/docs/configuration/databases.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Connecting to Databases",hide_title:!0,sidebar_position:1,version:1},sidebar:"CustomSidebar",previous:{title:"Configuring Superset",permalink:"/docs/configuration/configuring-superset"},next:{title:"Alerts and Reports",permalink:"/docs/configuration/alerts-reports"}},d={},l=[{value:"Installing Database Drivers",id:"installing-database-drivers",level:2},{value:"Supported Databases and Dependencies",id:"supported-databases-and-dependencies",level:3},{value:"Installing Drivers in Docker Images",id:"installing-drivers-in-docker-images",level:3},{value:"1. Determine the driver you need",id:"1-determine-the-driver-you-need",level:4},{value:"2. Install the driver in the container",id:"2-install-the-driver-in-the-container",level:4},{value:"3. Connect to MySQL",id:"3-connect-to-mysql",level:4},{value:"4. Troubleshooting",id:"4-troubleshooting",level:4},{value:"Database-specific Instructions",id:"database-specific-instructions",level:3},{value:"Ascend.io",id:"ascendio",level:4},{value:"Apache Doris",id:"apache-doris",level:4},{value:"AWS Athena",id:"aws-athena",level:4},{value:"PyAthenaJDBC",id:"pyathenajdbc",level:5},{value:"PyAthena",id:"pyathena",level:5},{value:"AWS DynamoDB",id:"aws-dynamodb",level:4},{value:"PyDynamoDB",id:"pydynamodb",level:5},{value:"AWS Redshift",id:"aws-redshift",level:4},{value:"psycopg2",id:"psycopg2",level:5},{value:"redshift_connector",id:"redshift_connector",level:5},{value:"Using IAM-based credentials with Redshift cluster:",id:"using-iam-based-credentials-with-redshift-cluster",level:6},{value:"Using IAM-based credentials with Redshift serverless:",id:"using-iam-based-credentials-with-redshift-serverless",level:6},{value:"ClickHouse",id:"clickhouse",level:4},{value:"CockroachDB",id:"cockroachdb",level:4},{value:"Couchbase",id:"couchbase",level:4},{value:"CrateDB",id:"cratedb",level:4},{value:"Databend",id:"databend",level:4},{value:"Databricks",id:"databricks",level:4},{value:"Older driver",id:"older-driver",level:5},{value:"Hive",id:"hive",level:4},{value:"ODBC",id:"odbc",level:4},{value:"Dremio",id:"dremio",level:4},{value:"Apache Drill",id:"apache-drill",level:4},{value:"SQLAlchemy",id:"sqlalchemy",level:5},{value:"JDBC",id:"jdbc",level:5},{value:"ODBC",id:"odbc-1",level:5},{value:"Apache Druid",id:"apache-druid",level:4},{value:"Customizing Druid Connection",id:"customizing-druid-connection",level:5},{value:"Aggregations",id:"aggregations",level:5},{value:"Post-Aggregations",id:"post-aggregations",level:5},{value:"Elasticsearch",id:"elasticsearch",level:4},{value:"Exasol",id:"exasol",level:4},{value:"Firebird",id:"firebird",level:4},{value:"Firebolt",id:"firebolt",level:4},{value:"Google BigQuery",id:"google-bigquery",level:4},{value:"Install BigQuery Driver",id:"install-bigquery-driver",level:5},{value:"Connecting to BigQuery",id:"connecting-to-bigquery",level:5},{value:"Google Sheets",id:"google-sheets",level:4},{value:"Hana",id:"hana",level:4},{value:"Apache Hive",id:"apache-hive",level:4},{value:"Hologres",id:"hologres",level:4},{value:"IBM DB2",id:"ibm-db2",level:4},{value:"Apache Impala",id:"apache-impala",level:4},{value:"Kusto",id:"kusto",level:4},{value:"Apache Kylin",id:"apache-kylin",level:4},{value:"MySQL",id:"mysql",level:4},{value:"IBM Netezza Performance Server",id:"ibm-netezza-performance-server",level:4},{value:"OceanBase",id:"oceanbase",level:4},{value:"Ocient DB",id:"ocient-db",level:4},{value:"Install the Ocient Driver",id:"install-the-ocient-driver",level:5},{value:"Connecting to Ocient",id:"connecting-to-ocient",level:5},{value:"Oracle",id:"oracle",level:4},{value:"Apache Pinot",id:"apache-pinot",level:4},{value:"Postgres",id:"postgres",level:4},{value:"Presto",id:"presto",level:4},{value:"RisingWave",id:"risingwave",level:4},{value:"Rockset",id:"rockset",level:4},{value:"Snowflake",id:"snowflake",level:4},{value:"Install Snowflake Driver",id:"install-snowflake-driver",level:5},{value:"Apache Solr",id:"apache-solr",level:4},{value:"Apache Spark SQL",id:"apache-spark-sql",level:4},{value:"SQL Server",id:"sql-server",level:4},{value:"StarRocks",id:"starrocks",level:4},{value:"Teradata",id:"teradata",level:4},{value:"ODBC Driver",id:"odbc-driver",level:4},{value:"TimescaleDB",id:"timescaledb",level:4},{value:"Trino",id:"trino",level:4},{value:"Connection String",id:"connection-string",level:5},{value:"Authentications",id:"authentications",level:5},{value:"1. Basic Authentication",id:"1-basic-authentication",level:6},{value:"2. Kerberos Authentication",id:"2-kerberos-authentication",level:6},{value:"3. Certificate Authentication",id:"3-certificate-authentication",level:6},{value:"4. JWT Authentication",id:"4-jwt-authentication",level:6},{value:"5. Custom Authentication",id:"5-custom-authentication",level:6},{value:"Vertica",id:"vertica",level:4},{value:"YugabyteDB",id:"yugabytedb",level:4},{value:"Connecting through the UI",id:"connecting-through-the-ui",level:2},{value:"How to setup up preferred database options and images",id:"how-to-setup-up-preferred-database-options-and-images",level:5},{value:"Setting images",id:"setting-images",level:5},{value:"How to add new database engines to available endpoint",id:"how-to-add-new-database-engines-to-available-endpoint",level:5},{value:"Extra Database Settings",id:"extra-database-settings",level:3},{value:"Deeper SQLAlchemy Integration",id:"deeper-sqlalchemy-integration",level:5},{value:"Schemas",id:"schemas",level:5},{value:"External Password Store for SQLAlchemy Connections",id:"external-password-store-for-sqlalchemy-connections",level:5},{value:"SSL Access to Databases",id:"ssl-access-to-databases",level:5},{value:"Misc.",id:"misc",level:2},{value:"Querying across databases",id:"querying-across-databases",level:3},{value:"Considerations",id:"considerations",level:4},{value:"Enabling the meta database",id:"enabling-the-meta-database",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"connecting-to-databases",children:"Connecting to Databases"}),"\n",(0,r.jsxs)(n.p,{children:["Superset does not ship bundled with connectivity to databases. The main step in connecting\nSuperset to a database is to ",(0,r.jsx)(n.strong,{children:"install the proper database driver(s)"}),"\nin your environment."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You\u2019ll need to install the required packages for the database you want to use as your metadata database\nas well as the packages needed to connect to the databases you want to access through Superset.\nFor information about setting up Superset's metadata database, please refer to\ninstallation documentations (",(0,r.jsx)(n.a,{href:"/docs/installation/docker-compose",children:"Docker Compose"}),", ",(0,r.jsx)(n.a,{href:"/docs/installation/kubernetes",children:"Kubernetes"}),")"]})}),"\n",(0,r.jsx)(n.p,{children:"This documentation tries to keep pointer to the different drivers for commonly used database\nengine."}),"\n",(0,r.jsx)(n.h2,{id:"installing-database-drivers",children:"Installing Database Drivers"}),"\n",(0,r.jsxs)(n.p,{children:["Superset requires a Python ",(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0249/",children:"DB-API database driver"}),"\nand a ",(0,r.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/20/dialects/",children:"SQLAlchemy dialect"})," to be installed for\neach database engine you want to connect to."]}),"\n",(0,r.jsxs)(n.p,{children:["You can read more ",(0,r.jsx)(n.a,{href:"/docs/configuration/databases#installing-drivers-in-docker-images",children:"here"})," about how to\ninstall new database drivers into your Superset configuration."]}),"\n",(0,r.jsx)(n.h3,{id:"supported-databases-and-dependencies",children:"Supported Databases and Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["Some of the recommended packages are shown below. Please refer to\n",(0,r.jsx)(n.a,{href:"https://github.com/apache/superset/blob/master/pyproject.toml",children:"pyproject.toml"})," for the versions that\nare compatible with Superset."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)("div",{style:{width:"150px"},children:"Database"})}),(0,r.jsx)(n.th,{children:"PyPI package"}),(0,r.jsx)(n.th,{children:"Connection String"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#aws-athena",children:"AWS Athena"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"pip install pyathena[pandas]"})," , ",(0,r.jsx)(n.code,{children:"pip install PyAthenaJDBC"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"awsathena+rest://{access_key_id}:{access_key}@athena.{region}.amazonaws.com/{schema}?s3_staging_dir={s3_staging_dir}&... "})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#aws-dynamodb",children:"AWS DynamoDB"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install pydynamodb"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dynamodb://{access_key_id}:{secret_access_key}@dynamodb.{region_name}.amazonaws.com?connector=superset"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#aws-redshift",children:"AWS Redshift"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install sqlalchemy-redshift"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:" redshift+psycopg2://<userName>:<DBPassword>@<AWS End Point>:5439/<Database Name>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#apache-doris",children:"Apache Doris"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install pydoris"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"doris://<User>:<Password>@<Host>:<Port>/<Catalog>.<Database>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#apache-drill",children:"Apache Drill"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install sqlalchemy-drill"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"drill+sadrill:// For JDBC drill+jdbc://"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#apache-druid",children:"Apache Druid"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install pydruid"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid://<User>:<password>@<Host>:<Port-default-9088>/druid/v2/sql"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#hive",children:"Apache Hive"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install pyhive"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"hive://hive@{hostname}:{port}/{database}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#apache-impala",children:"Apache Impala"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install impyla"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"impala://{hostname}:{port}/{database}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#apache-kylin",children:"Apache Kylin"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install kylinpy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"kylin://<username>:<password>@<hostname>:<port>/<project>?<param1>=<value1>&<param2>=<value2>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#apache-pinot",children:"Apache Pinot"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install pinotdb"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pinot://BROKER:5436/query?server=http://CONTROLLER:5983/"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#apache-solr",children:"Apache Solr"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install sqlalchemy-solr"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"solr://{username}:{password}@{hostname}:{port}/{server_path}/{collection}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#apache-spark-sql",children:"Apache Spark SQL"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install pyhive"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"hive://hive@{hostname}:{port}/{database}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#ascendio",children:"Ascend.io"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install impyla"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ascend://{username}:{password}@{hostname}:{port}/{database}?auth_mechanism=PLAIN;use_ssl=true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#sql-server",children:"Azure MS SQL"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install pymssql"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mssql+pymssql://UserName@presetSQL:TestPassword@presetSQL.database.windows.net:1433/TestSchema"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#clickhouse",children:"ClickHouse"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install clickhouse-connect"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"clickhousedb://{username}:{password}@{hostname}:{port}/{database}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#cockroachdb",children:"CockroachDB"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install cockroachdb"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"cockroachdb://root@{hostname}:{port}/{database}?sslmode=disable"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#couchbase",children:"Couchbase"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install couchbase-sqlalchemy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"couchbase://{username}:{password}@{hostname}:{port}?truststorepath={ssl certificate path}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#dremio",children:"Dremio"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install sqlalchemy_dremio"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dremio://user:pwd@host:31010/"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#elasticsearch",children:"Elasticsearch"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install elasticsearch-dbapi"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"elasticsearch+http://{user}:{password}@{host}:9200/"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#exasol",children:"Exasol"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install sqlalchemy-exasol"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"exa+pyodbc://{username}:{password}@{hostname}:{port}/my_schema?CONNECTIONLCALL=en_US.UTF-8&driver=EXAODBC"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#google-bigquery",children:"Google BigQuery"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install sqlalchemy-bigquery"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bigquery://{project_id}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#google-sheets",children:"Google Sheets"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install shillelagh[gsheetsapi]"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"gsheets://"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#firebolt",children:"Firebolt"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install firebolt-sqlalchemy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"firebolt://{client_id}:{client_secret}@{database}/{engine_name}?account_name={name}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#hologres",children:"Hologres"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install psycopg2"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"postgresql+psycopg2://<UserName>:<DBPassword>@<Database Host>/<Database Name>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#ibm-db2",children:"IBM Db2"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install ibm_db_sa"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"db2+ibm_db://"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#ibm-netezza-performance-server",children:"IBM Netezza Performance Server"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install nzalchemy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"netezza+nzpy://<UserName>:<DBPassword>@<Database Host>/<Database Name>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#mysql",children:"MySQL"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install mysqlclient"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mysql://<UserName>:<DBPassword>@<Database Host>/<Database Name>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#oceanbase",children:"OceanBase"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install oceanbase_py"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"oceanbase://<UserName>:<DBPassword>@<Database Host>/<Database Name>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#oracle",children:"Oracle"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install cx_Oracle"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"oracle://"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#postgres",children:"PostgreSQL"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install psycopg2"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"postgresql://<UserName>:<DBPassword>@<Database Host>/<Database Name>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#presto",children:"Presto"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install pyhive"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"presto://"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#rockset",children:"Rockset"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install rockset-sqlalchemy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rockset://<api_key>:@<api_server>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#hana",children:"SAP Hana"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"pip install hdbcli sqlalchemy-hana"})," or ",(0,r.jsx)(n.code,{children:"pip install apache-superset[hana]"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"hana://{username}:{password}@{host}:{port}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#starrocks",children:"StarRocks"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install starrocks"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"starrocks://<User>:<Password>@<Host>:<Port>/<Catalog>.<Database>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#snowflake",children:"Snowflake"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install snowflake-sqlalchemy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"snowflake://{user}:{password}@{account}.{region}/{database}?role={role}&warehouse={warehouse}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQLite"}),(0,r.jsx)(n.td,{children:"No additional library needed"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sqlite://path/to/file.db?check_same_thread=false"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#sql-server",children:"SQL Server"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install pymssql"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mssql+pymssql://"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#teradata",children:"Teradata"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install teradatasqlalchemy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"teradatasql://{user}:{password}@{host}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#timescaledb",children:"TimescaleDB"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install psycopg2"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"postgresql://<UserName>:<DBPassword>@<Database Host>:<Port>/<Database Name>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#trino",children:"Trino"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install trino"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"trino://{username}:{password}@{hostname}:{port}/{catalog}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#vertica",children:"Vertica"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install sqlalchemy-vertica-python"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"vertica+vertica_python://<UserName>:<DBPassword>@<Database Host>/<Database Name>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/configuration/databases#yugabytedb",children:"YugabyteDB"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pip install psycopg2"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"postgresql://<UserName>:<DBPassword>@<Database Host>/<Database Name>"})})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:'Note that many other databases are supported, the main criteria being the existence of a functional\nSQLAlchemy dialect and Python driver. Searching for the keyword "sqlalchemy + (database name)"\nshould help get you to the right place.'}),"\n",(0,r.jsxs)(n.p,{children:["If your database or data engine isn't on the list but a SQL interface\nexists, please file an issue on the\n",(0,r.jsx)(n.a,{href:"https://github.com/apache/superset/issues",children:"Superset GitHub repo"}),", so we can work on documenting and\nsupporting it."]}),"\n",(0,r.jsxs)(n.p,{children:["If you'd like to build a database connector for Superset integration,\nread the ",(0,r.jsx)(n.a,{href:"https://preset.io/blog/building-database-connector/",children:"following tutorial"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"installing-drivers-in-docker-images",children:"Installing Drivers in Docker Images"}),"\n",(0,r.jsx)(n.p,{children:"Superset requires a Python database driver to be installed for each additional\ntype of database you want to connect to."}),"\n",(0,r.jsx)(n.p,{children:"In this example, we'll walk through how to install the MySQL connector library.\nThe connector library installation process is the same for all additional libraries."}),"\n",(0,r.jsx)(n.h4,{id:"1-determine-the-driver-you-need",children:"1. Determine the driver you need"}),"\n",(0,r.jsxs)(n.p,{children:["Consult the ",(0,r.jsx)(n.a,{href:"/docs/configuration/databases",children:"list of database drivers"}),"\nand find the PyPI package needed to connect to your database. In this example, we're connecting\nto a MySQL database, so we'll need the ",(0,r.jsx)(n.code,{children:"mysqlclient"})," connector library."]}),"\n",(0,r.jsx)(n.h4,{id:"2-install-the-driver-in-the-container",children:"2. Install the driver in the container"}),"\n",(0,r.jsxs)(n.p,{children:["We need to get the ",(0,r.jsx)(n.code,{children:"mysqlclient"})," library installed into the Superset docker container\n(it doesn't matter if it's installed on the host machine). We could enter the running\ncontainer with ",(0,r.jsx)(n.code,{children:"docker exec -it <container_name> bash"})," and run ",(0,r.jsx)(n.code,{children:"pip install mysqlclient"}),"\nthere, but that wouldn't persist permanently."]}),"\n",(0,r.jsxs)(n.p,{children:["To address this, the Superset ",(0,r.jsx)(n.code,{children:"docker compose"})," deployment uses the convention\nof a ",(0,r.jsx)(n.code,{children:"requirements-local.txt"})," file. All packages listed in this file will be installed\ninto the container from PyPI at runtime. This file will be ignored by Git for\nthe purposes of local development."]}),"\n",(0,r.jsxs)(n.p,{children:["Create the file ",(0,r.jsx)(n.code,{children:"requirements-local.txt"})," in a subdirectory called ",(0,r.jsx)(n.code,{children:"docker"})," that\nexists in the directory with your ",(0,r.jsx)(n.code,{children:"docker-compose.yml"})," or ",(0,r.jsx)(n.code,{children:"docker-compose-non-dev.yml"})," file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run from the repo root:\ntouch ./docker/requirements-local.txt\n"})}),"\n",(0,r.jsx)(n.p,{children:"Add the driver identified in step above.  You can use a text editor or do\nit from the command line like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "mysqlclient" >> ./docker/requirements-local.txt\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"If you are running a stock (non-customized) Superset image"}),", you are done.\nLaunch Superset with ",(0,r.jsx)(n.code,{children:"docker compose -f docker-compose-non-dev.yml up"})," and\nthe driver should be present."]}),"\n",(0,r.jsxs)(n.p,{children:["You can check its presence by entering the running container with\n",(0,r.jsx)(n.code,{children:"docker exec -it <container_name> bash"})," and running ",(0,r.jsx)(n.code,{children:"pip freeze"}),".  The PyPI package should\nbe present in the printed list."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"If you're running a customized docker image"}),", rebuild your local image with the new\ndriver baked in:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose build --force-rm\n"})}),"\n",(0,r.jsxs)(n.p,{children:["After the rebuild of the Docker images is complete, relaunch Superset by\nrunning ",(0,r.jsx)(n.code,{children:"docker compose up"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"3-connect-to-mysql",children:"3. Connect to MySQL"}),"\n",(0,r.jsx)(n.p,{children:"Now that you've got a MySQL driver installed in your container, you should be able to connect\nto your database via the Superset web UI."}),"\n",(0,r.jsxs)(n.p,{children:["As an admin user, go to Settings -> Data: Database Connections and click the +DATABASE button.\nFrom there, follow the steps on the\n",(0,r.jsx)(n.a,{href:"/docs/configuration/databases#connecting-through-the-ui",children:"Using Database Connection UI page"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Consult the page for your specific database type in the Superset documentation to determine\nthe connection string and any other parameters you need to input.  For instance,\non the ",(0,r.jsx)(n.a,{href:"/docs/configuration/databases#mysql",children:"MySQL page"}),", we see that the connection string\nto a local MySQL database differs depending on whether the setup is running on Linux or Mac."]}),"\n",(0,r.jsx)(n.p,{children:'Click the \u201cTest Connection\u201d button, which should result in a popup message saying,\n"Connection looks good!".'}),"\n",(0,r.jsx)(n.h4,{id:"4-troubleshooting",children:"4. Troubleshooting"}),"\n",(0,r.jsx)(n.p,{children:"If the test fails, review your docker logs for error messages.  Superset uses SQLAlchemy\nto connect to databases; to troubleshoot the connection string for your database, you might\nstart Python in the Superset application container or host environment and try to connect\ndirectly to the desired database and fetch data. This eliminates Superset for the\npurposes of isolating the problem."}),"\n",(0,r.jsx)(n.p,{children:"Repeat this process for each type of database you want Superset to connect to."}),"\n",(0,r.jsx)(n.h3,{id:"database-specific-instructions",children:"Database-specific Instructions"}),"\n",(0,r.jsx)(n.h4,{id:"ascendio",children:"Ascend.io"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library to Ascend.io is ",(0,r.jsx)(n.a,{href:"https://github.com/cloudera/impyla",children:"impyla"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ascend://{username}:{password}@{hostname}:{port}/{database}?auth_mechanism=PLAIN;use_ssl=true\n"})}),"\n",(0,r.jsx)(n.h4,{id:"apache-doris",children:"Apache Doris"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/pydoris/",children:"sqlalchemy-doris"})," library is the recommended way to connect to Apache Doris through SQLAlchemy."]}),"\n",(0,r.jsx)(n.p,{children:"You'll need the following setting values to form the connection string:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User"}),": User Name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Password"}),": Password"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Host"}),": Doris FE Host"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port"}),": Doris FE port"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Catalog"}),": Catalog Name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database"}),": Database Name"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's what the connection string looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"doris://<User>:<Password>@<Host>:<Port>/<Catalog>.<Database>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"aws-athena",children:"AWS Athena"}),"\n",(0,r.jsx)(n.h5,{id:"pyathenajdbc",children:"PyAthenaJDBC"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://pypi.org/project/PyAthenaJDBC/",children:"PyAthenaJDBC"})," is a Python DB 2.0 compliant wrapper for the\n",(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html",children:"Amazon Athena JDBC driver"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Amazon Athena is as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"awsathena+jdbc://{aws_access_key_id}:{aws_secret_access_key}@athena.{region_name}.amazonaws.com/{schema_name}?s3_staging_dir={s3_staging_dir}&...\n"})}),"\n",(0,r.jsx)(n.p,{children:"Note that you'll need to escape & encode when forming the connection string like so:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"s3://... -> s3%3A//...\n"})}),"\n",(0,r.jsx)(n.h5,{id:"pyathena",children:"PyAthena"}),"\n",(0,r.jsxs)(n.p,{children:["You can also use the ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/PyAthena/",children:"PyAthena library"})," (no Java required) with the\nfollowing connection string:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"awsathena+rest://{aws_access_key_id}:{aws_secret_access_key}@athena.{region_name}.amazonaws.com/{schema_name}?s3_staging_dir={s3_staging_dir}&...\n"})}),"\n",(0,r.jsx)(n.p,{children:"The PyAthena library also allows to assume a specific IAM role which you can define by adding following parameters in Superset's Athena database connection UI under ADVANCED --\x3e Other --\x3e ENGINE PARAMETERS."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "connect_args": {\n        "role_arn": "<role arn>"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"aws-dynamodb",children:"AWS DynamoDB"}),"\n",(0,r.jsx)(n.h5,{id:"pydynamodb",children:"PyDynamoDB"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://pypi.org/project/PyDynamoDB/",children:"PyDynamoDB"})," is a Python DB API 2.0 (PEP 249) client for Amazon DynamoDB."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Amazon DynamoDB is as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"dynamodb://{aws_access_key_id}:{aws_secret_access_key}@dynamodb.{region_name}.amazonaws.com:443?connector=superset\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To get more documentation, please visit: ",(0,r.jsx)(n.a,{href:"https://github.com/passren/PyDynamoDB/wiki/5.-Superset",children:"PyDynamoDB WIKI"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"aws-redshift",children:"AWS Redshift"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/sqlalchemy-redshift/",children:"sqlalchemy-redshift"})," library is the recommended\nway to connect to Redshift through SQLAlchemy."]}),"\n",(0,r.jsxs)(n.p,{children:["This dialect requires either ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/redshift-connector/",children:"redshift_connector"})," or ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/psycopg2/",children:"psycopg2"})," to work properly."]}),"\n",(0,r.jsx)(n.p,{children:"You'll need to set the following values to form the connection string:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Name"}),": userName"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Password"}),": DBPassword"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Host"}),": AWS Endpoint"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Name"}),": Database Name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port"}),": default 5439"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"psycopg2",children:"psycopg2"}),"\n",(0,r.jsx)(n.p,{children:"Here's what the SQLALCHEMY URI looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"redshift+psycopg2://<userName>:<DBPassword>@<AWS End Point>:5439/<Database Name>\n"})}),"\n",(0,r.jsx)(n.h5,{id:"redshift_connector",children:"redshift_connector"}),"\n",(0,r.jsx)(n.p,{children:"Here's what the SQLALCHEMY URI looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"redshift+redshift_connector://<userName>:<DBPassword>@<AWS End Point>:5439/<Database Name>\n"})}),"\n",(0,r.jsx)(n.h6,{id:"using-iam-based-credentials-with-redshift-cluster",children:"Using IAM-based credentials with Redshift cluster:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html",children:"Amazon redshift cluster"})," also supports generating temporary IAM-based database user credentials."]}),"\n",(0,r.jsxs)(n.p,{children:["Your superset app's ",(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/redshift/latest/mgmt/generating-iam-credentials-role-permissions.html",children:"IAM role should have permissions"})," to call the ",(0,r.jsx)(n.code,{children:"redshift:GetClusterCredentials"})," operation."]}),"\n",(0,r.jsx)(n.p,{children:"You have to define the following arguments in Superset's redshift database connection UI under ADVANCED --\x3e Others --\x3e ENGINE PARAMETERS."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{"connect_args":{"iam":true,"database":"<database>","cluster_identifier":"<cluster_identifier>","db_user":"<db_user>"}}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["and SQLALCHEMY URI should be set to ",(0,r.jsx)(n.code,{children:"redshift+redshift_connector://"})]}),"\n",(0,r.jsx)(n.h6,{id:"using-iam-based-credentials-with-redshift-serverless",children:"Using IAM-based credentials with Redshift serverless:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-whatis.html",children:"Redshift serverless"})," supports connection using IAM roles."]}),"\n",(0,r.jsxs)(n.p,{children:["Your superset app's IAM role should have ",(0,r.jsx)(n.code,{children:"redshift-serverless:GetCredentials"})," and ",(0,r.jsx)(n.code,{children:"redshift-serverless:GetWorkgroup"})," permissions on Redshift serverless workgroup."]}),"\n",(0,r.jsx)(n.p,{children:"You have to define the following arguments in Superset's redshift database connection UI under ADVANCED --\x3e Others --\x3e ENGINE PARAMETERS."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{"connect_args":{"iam":true,"is_serverless":true,"serverless_acct_id":"<aws account number>","serverless_work_group":"<redshift work group>","database":"<database>","user":"IAMR:<superset iam role name>"}}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"clickhouse",children:"ClickHouse"}),"\n",(0,r.jsxs)(n.p,{children:["To use ClickHouse with Superset, you will need to install the ",(0,r.jsx)(n.code,{children:"clickhouse-connect"})," Python library:"]}),"\n",(0,r.jsxs)(n.p,{children:["If running Superset using Docker Compose, add the following to your ",(0,r.jsx)(n.code,{children:"./docker/requirements-local.txt"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"clickhouse-connect>=0.6.8\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for ClickHouse is\n",(0,r.jsx)(n.a,{href:"https://github.com/ClickHouse/clickhouse-connect",children:"clickhouse-connect"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"clickhousedb://<user>:<password>@<host>:<port>/<database>[?options\u2026]clickhouse://{username}:{password}@{hostname}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here's a concrete example of a real connection string:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"clickhousedb://demo:demo@github.demo.trial.altinity.cloud/default?secure=true\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you're using Clickhouse locally on your computer, you can get away with using a http protocol URL that\nuses the default user without a password (and doesn't encrypt the connection):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"clickhousedb://localhost/default\n"})}),"\n",(0,r.jsx)(n.h4,{id:"cockroachdb",children:"CockroachDB"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for CockroachDB is\n",(0,r.jsx)(n.a,{href:"https://github.com/cockroachdb/sqlalchemy-cockroachdb",children:"sqlalchemy-cockroachdb"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cockroachdb://root@{hostname}:{port}/{database}?sslmode=disable\n"})}),"\n",(0,r.jsx)(n.h4,{id:"couchbase",children:"Couchbase"}),"\n",(0,r.jsxs)(n.p,{children:["The Couchbase's Superset connection is designed to support two services: Couchbase Analytics and Couchbase Columnar.\nThe recommended connector library for couchbase is\n",(0,r.jsx)(n.a,{href:"https://github.com/couchbase/couchbase-sqlalchemy",children:"couchbase-sqlalchemy"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"pip install couchbase-sqlalchemy\n"})}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"couchbase://{username}:{password}@{hostname}:{port}?truststorepath={certificate path}?ssl={true/false}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"cratedb",children:"CrateDB"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for CrateDB is\n",(0,r.jsx)(n.a,{href:"https://pypi.org/project/crate/",children:"crate"}),".\nYou need to install the extras as well for this library.\nWe recommend adding something like the following\ntext to your requirements file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"crate[sqlalchemy]==0.26.0\n"})}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"crate://crate@127.0.0.1:4200\n"})}),"\n",(0,r.jsx)(n.h4,{id:"databend",children:"Databend"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Databend is ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/databend-sqlalchemy/",children:"databend-sqlalchemy"}),".\nSuperset has been tested on ",(0,r.jsx)(n.code,{children:"databend-sqlalchemy>=0.2.3"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The recommended connection string is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"databend://{username}:{password}@{host}:{port}/{database_name}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here's a connection string example of Superset connecting to a Databend database:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"databend://user:password@localhost:8000/default?secure=false\n"})}),"\n",(0,r.jsx)(n.h4,{id:"databricks",children:"Databricks"}),"\n",(0,r.jsxs)(n.p,{children:["Databricks now offer a native DB API 2.0 driver, ",(0,r.jsx)(n.code,{children:"databricks-sql-connector"}),", that can be used with the ",(0,r.jsx)(n.code,{children:"sqlalchemy-databricks"})," dialect. You can install both with:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'pip install "apache-superset[databricks]"\n'})}),"\n",(0,r.jsx)(n.p,{children:"To use the Hive connector you need the following information from your cluster:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Server hostname"}),"\n",(0,r.jsx)(n.li,{children:"Port"}),"\n",(0,r.jsx)(n.li,{children:"HTTP path"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'These can be found under "Configuration" -> "Advanced Options" -> "JDBC/ODBC".'}),"\n",(0,r.jsx)(n.p,{children:'You also need an access token from "Settings" -> "User Settings" -> "Access Tokens".'}),"\n",(0,r.jsx)(n.p,{children:'Once you have all this information, add a database of type "Databricks Native Connector" and use the following SQLAlchemy URI:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"databricks+connector://token:{access_token}@{server_hostname}:{port}/{database_name}\n"})}),"\n",(0,r.jsx)(n.p,{children:'You also need to add the following configuration to "Other" -> "Engine Parameters", with your HTTP path:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "connect_args": {"http_path": "sql/protocolv1/o/****"}\n}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"older-driver",children:"Older driver"}),"\n",(0,r.jsxs)(n.p,{children:["Originally Superset used ",(0,r.jsx)(n.code,{children:"databricks-dbapi"})," to connect to Databricks. You might want to try it if you're having problems with the official Databricks connector:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'pip install "databricks-dbapi[sqlalchemy]"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["There are two ways to connect to Databricks when using ",(0,r.jsx)(n.code,{children:"databricks-dbapi"}),": using a Hive connector or an ODBC connector. Both ways work similarly, but only ODBC can be used to connect to ",(0,r.jsx)(n.a,{href:"https://docs.databricks.com/sql/admin/sql-endpoints.html",children:"SQL endpoints"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"hive",children:"Hive"}),"\n",(0,r.jsx)(n.p,{children:'To connect to a Hive cluster add a database of type "Databricks Interactive Cluster" in Superset, and use the following SQLAlchemy URI:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"databricks+pyhive://token:{access_token}@{server_hostname}:{port}/{database_name}\n"})}),"\n",(0,r.jsx)(n.p,{children:'You also need to add the following configuration to "Other" -> "Engine Parameters", with your HTTP path:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"connect_args": {"http_path": "sql/protocolv1/o/****"}}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"odbc",children:"ODBC"}),"\n",(0,r.jsxs)(n.p,{children:["For ODBC you first need to install the ",(0,r.jsx)(n.a,{href:"https://databricks.com/spark/odbc-drivers-download",children:"ODBC drivers for your platform"}),"."]}),"\n",(0,r.jsx)(n.p,{children:'For a regular connection use this as the SQLAlchemy URI after selecting either "Databricks Interactive Cluster" or "Databricks SQL Endpoint" for the database, depending on your use case:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"databricks+pyodbc://token:{access_token}@{server_hostname}:{port}/{database_name}\n"})}),"\n",(0,r.jsx)(n.p,{children:"And for the connection arguments:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"connect_args": {"http_path": "sql/protocolv1/o/****", "driver_path": "/path/to/odbc/driver"}}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The driver path should be:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/Library/simba/spark/lib/libsparkodbc_sbu.dylib"})," (Mac OS)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/opt/simba/spark/lib/64/libsparkodbc_sb64.so"})," (Linux)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For a connection to a SQL endpoint you need to use the HTTP path from the endpoint:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"connect_args": {"http_path": "/sql/1.0/endpoints/****", "driver_path": "/path/to/odbc/driver"}}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"dremio",children:"Dremio"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Dremio is\n",(0,r.jsx)(n.a,{href:"https://pypi.org/project/sqlalchemy-dremio/",children:"sqlalchemy_dremio"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string for ODBC (Default port is 31010) is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"dremio://{username}:{password}@{host}:{port}/{database_name}/dremio?SSL=1\n"})}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string for Arrow Flight (Dremio 4.9.1+. Default port is 32010) is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"dremio+flight://{username}:{password}@{host}:{port}/dremio\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This ",(0,r.jsx)(n.a,{href:"https://www.dremio.com/tutorials/dremio-apache-superset/",children:"blog post by Dremio"})," has some\nadditional helpful instructions on connecting Superset to Dremio."]}),"\n",(0,r.jsx)(n.h4,{id:"apache-drill",children:"Apache Drill"}),"\n",(0,r.jsx)(n.h5,{id:"sqlalchemy",children:"SQLAlchemy"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended way to connect to Apache Drill is through SQLAlchemy. You can use the\n",(0,r.jsx)(n.a,{href:"https://github.com/JohnOmernik/sqlalchemy-drill",children:"sqlalchemy-drill"})," package."]}),"\n",(0,r.jsx)(n.p,{children:"Once that is done, you can connect to Drill in two ways, either via the REST interface or by JDBC.\nIf you are connecting via JDBC, you must have the Drill JDBC Driver installed."}),"\n",(0,r.jsx)(n.p,{children:"The basic connection string for Drill looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"drill+sadrill://<username>:<password>@<host>:<port>/<storage_plugin>?use_ssl=True\n"})}),"\n",(0,r.jsx)(n.p,{children:"To connect to Drill running on a local machine running in embedded mode you can use the following\nconnection string:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"drill+sadrill://localhost:8047/dfs?use_ssl=False\n"})}),"\n",(0,r.jsx)(n.h5,{id:"jdbc",children:"JDBC"}),"\n",(0,r.jsxs)(n.p,{children:["Connecting to Drill through JDBC is more complicated and we recommend following\n",(0,r.jsx)(n.a,{href:"https://drill.apache.org/docs/using-the-jdbc-driver/",children:"this tutorial"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"drill+jdbc://<username>:<password>@<host>:<port>\n"})}),"\n",(0,r.jsx)(n.h5,{id:"odbc-1",children:"ODBC"}),"\n",(0,r.jsxs)(n.p,{children:["We recommend reading the\n",(0,r.jsx)(n.a,{href:"https://drill.apache.org/docs/installing-the-driver-on-linux/",children:"Apache Drill documentation"})," and read\nthe ",(0,r.jsx)(n.a,{href:"https://github.com/JohnOmernik/sqlalchemy-drill#usage-with-odbc",children:"GitHub README"})," to learn how to\nwork with Drill through ODBC."]}),"\n","\n",(0,r.jsx)(n.h4,{id:"apache-druid",children:"Apache Druid"}),"\n",(0,r.jsxs)(n.p,{children:["A native connector to Druid ships with Superset (behind the ",(0,r.jsx)(n.code,{children:"DRUID_IS_ACTIVE"})," flag) but this is\nslowly getting deprecated in favor of the SQLAlchemy / DBAPI connector made available in the\n",(0,r.jsx)(n.a,{href:"https://pythonhosted.org/pydruid/",children:"pydruid library"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"druid://<User>:<password>@<Host>:<Port-default-9088>/druid/v2/sql\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here's a breakdown of the key components of this connection string:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"User"}),": username portion of the credentials needed to connect to your database"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Password"}),": password portion of the credentials needed to connect to your database"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Host"}),": IP address (or URL) of the host machine that's running your database"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Port"}),": specific port that's exposed on your host machine where your database is running"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"customizing-druid-connection",children:"Customizing Druid Connection"}),"\n",(0,r.jsxs)(n.p,{children:["When adding a connection to Druid, you can customize the connection a few different ways in the\n",(0,r.jsx)(n.strong,{children:"Add Database"})," form."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Custom Certificate"})}),"\n",(0,r.jsxs)(n.p,{children:["You can add certificates in the ",(0,r.jsx)(n.strong,{children:"Root Certificate"})," field when configuring the new database\nconnection to Druid:"]}),"\n",(0,r.jsx)("img",{src:(0,i.Ay)("/img/root-cert-example.png")}),"\n"," ","\n",(0,r.jsx)(n.p,{children:"When using a custom certificate, pydruid will automatically use https scheme."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Disable SSL Verification"})}),"\n",(0,r.jsxs)(n.p,{children:["To disable SSL verification, add the following to the ",(0,r.jsx)(n.strong,{children:"Extras"})," field:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'engine_params:\n{"connect_args":\n\t{"scheme": "https", "ssl_verify_cert": false}}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"aggregations",children:"Aggregations"}),"\n",(0,r.jsxs)(n.p,{children:["Common aggregations or Druid metrics can be defined and used in Superset. The first and simpler use\ncase is to use the checkbox matrix exposed in your datasource\u2019s edit view (",(0,r.jsx)(n.strong,{children:"Sources -> Druid\nDatasources -> [your datasource] -> Edit -> [tab] List Druid Column"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["Clicking the GroupBy and Filterable checkboxes will make the column appear in the related dropdowns\nwhile in the Explore view. Checking Count Distinct, Min, Max or Sum will result in creating new\nmetrics that will appear in the ",(0,r.jsx)(n.strong,{children:"List Druid Metric"})," tab upon saving the datasource."]}),"\n",(0,r.jsxs)(n.p,{children:["By editing these metrics, you\u2019ll notice that their JSON element corresponds to Druid aggregation\ndefinition. You can create your own aggregations manually from the ",(0,r.jsx)(n.strong,{children:"List Druid Metric"})," tab\nfollowing Druid documentation."]}),"\n",(0,r.jsx)(n.h5,{id:"post-aggregations",children:"Post-Aggregations"}),"\n",(0,r.jsxs)(n.p,{children:["Druid supports post aggregation and this works in Superset. All you have to do is create a metric,\nmuch like you would create an aggregation manually, but specify ",(0,r.jsx)(n.code,{children:"postagg"})," as a ",(0,r.jsx)(n.code,{children:"Metric Type"}),". You\nthen have to provide a valid json post-aggregation definition (as specified in the Druid docs) in\nthe JSON field."]}),"\n",(0,r.jsx)(n.h4,{id:"elasticsearch",children:"Elasticsearch"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Elasticsearch is\n",(0,r.jsx)(n.a,{href:"https://github.com/preset-io/elasticsearch-dbapi",children:"elasticsearch-dbapi"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Elasticsearch looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"elasticsearch+http://{user}:{password}@{host}:9200/\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Using HTTPS"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"elasticsearch+https://{user}:{password}@{host}:9200/\n"})}),"\n",(0,r.jsx)(n.p,{children:"Elasticsearch as a default limit of 10000 rows, so you can increase this limit on your cluster or\nset Superset\u2019s row limit on config"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ROW_LIMIT = 10000\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can query multiple indices on SQL Lab for example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'SELECT timestamp, agent FROM "logstash"\n'})}),"\n",(0,r.jsx)(n.p,{children:"But, to use visualizations for multiple indices you need to create an alias index on your cluster"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'POST /_aliases\n{\n    "actions" : [\n        { "add" : { "index" : "logstash-**", "alias" : "logstash_all" } }\n    ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then register your table with the alias name logstash_all"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Time zone"})}),"\n",(0,r.jsx)(n.p,{children:"By default, Superset uses UTC time zone for elasticsearch query. If you need to specify a time zone,\nplease edit your Database and enter the settings of your specified time zone in the Other > ENGINE PARAMETERS:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n    "connect_args": {\n        "time_zone": "Asia/Shanghai"\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Another issue to note about the time zone problem is that before elasticsearch7.8, if you want to convert a string into a ",(0,r.jsx)(n.code,{children:"DATETIME"})," object,\nyou need to use the ",(0,r.jsx)(n.code,{children:"CAST"})," function,but this function does not support our ",(0,r.jsx)(n.code,{children:"time_zone"})," setting. So it is recommended to upgrade to the version after elasticsearch7.8.\nAfter elasticsearch7.8, you can use the ",(0,r.jsx)(n.code,{children:"DATETIME_PARSE"})," function to solve this problem.\nThe DATETIME_PARSE function is to support our ",(0,r.jsx)(n.code,{children:"time_zone"})," setting, and here you need to fill in your elasticsearch version number in the Other > VERSION setting.\nthe superset will use the ",(0,r.jsx)(n.code,{children:"DATETIME_PARSE"})," function for conversion."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Disable SSL Verification"})}),"\n",(0,r.jsxs)(n.p,{children:["To disable SSL verification, add the following to the ",(0,r.jsx)(n.strong,{children:"SQLALCHEMY URI"})," field:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"elasticsearch+https://{user}:{password}@{host}:9200/?verify_certs=False\n"})}),"\n",(0,r.jsx)(n.h4,{id:"exasol",children:"Exasol"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Exasol is\n",(0,r.jsx)(n.a,{href:"https://github.com/exasol/sqlalchemy-exasol",children:"sqlalchemy-exasol"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Exasol looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"exa+pyodbc://{username}:{password}@{hostname}:{port}/my_schema?CONNECTIONLCALL=en_US.UTF-8&driver=EXAODBC\n"})}),"\n",(0,r.jsx)(n.h4,{id:"firebird",children:"Firebird"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Firebird is ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/sqlalchemy-firebird/",children:"sqlalchemy-firebird"}),".\nSuperset has been tested on ",(0,r.jsx)(n.code,{children:"sqlalchemy-firebird>=0.7.0, <0.8"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The recommended connection string is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"firebird+fdb://{username}:{password}@{host}:{port}//{path_to_db_file}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here's a connection string example of Superset connecting to a local Firebird database:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"firebird+fdb://SYSDBA:masterkey@192.168.86.38:3050//Library/Frameworks/Firebird.framework/Versions/A/Resources/examples/empbuild/employee.fdb\n"})}),"\n",(0,r.jsx)(n.h4,{id:"firebolt",children:"Firebolt"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Firebolt is ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/firebolt-sqlalchemy/",children:"firebolt-sqlalchemy"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The recommended connection string is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"firebolt://{username}:{password}@{database}?account_name={name}\nor\nfirebolt://{username}:{password}@{database}/{engine_name}?account_name={name}\n"})}),"\n",(0,r.jsx)(n.p,{children:"It's also possible to connect using a service account:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"firebolt://{client_id}:{client_secret}@{database}?account_name={name}\nor\nfirebolt://{client_id}:{client_secret}@{database}/{engine_name}?account_name={name}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"google-bigquery",children:"Google BigQuery"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for BigQuery is\n",(0,r.jsx)(n.a,{href:"https://github.com/googleapis/python-bigquery-sqlalchemy",children:"sqlalchemy-bigquery"}),"."]}),"\n",(0,r.jsx)(n.h5,{id:"install-bigquery-driver",children:"Install BigQuery Driver"}),"\n",(0,r.jsxs)(n.p,{children:["Follow the steps ",(0,r.jsx)(n.a,{href:"/docs/configuration/databases#installing-drivers-in-docker-images",children:"here"})," about how to\ninstall new database drivers when setting up Superset locally via docker compose."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'echo "sqlalchemy-bigquery" >> ./docker/requirements-local.txt\n'})}),"\n",(0,r.jsx)(n.h5,{id:"connecting-to-bigquery",children:"Connecting to BigQuery"}),"\n",(0,r.jsx)(n.p,{children:"When adding a new BigQuery connection in Superset, you'll need to add the GCP Service Account\ncredentials file (as a JSON)."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Create your Service Account via the Google Cloud Platform control panel, provide it access to the\nappropriate BigQuery datasets, and download the JSON configuration file for the service account."}),"\n",(0,r.jsx)(n.li,{children:"In Superset, you can either upload that JSON or add the JSON blob in the following format (this should be the content of your credential JSON file):"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n        "type": "service_account",\n        "project_id": "...",\n        "private_key_id": "...",\n        "private_key": "...",\n        "client_email": "...",\n        "client_id": "...",\n        "auth_uri": "...",\n        "token_uri": "...",\n        "auth_provider_x509_cert_url": "...",\n        "client_x509_cert_url": "..."\n    }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-images.githubusercontent.com/52086618/138352958-a18ef9cb-8880-4ef1-88c1-452a9f1b8105.gif",alt:"CleanShot 2021-10-22 at 04 18 11"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Additionally, can connect via SQLAlchemy URI instead"}),"\n",(0,r.jsx)(n.p,{children:"The connection string for BigQuery looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"bigquery://{project_id}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Go to the ",(0,r.jsx)(n.strong,{children:"Advanced"})," tab, Add a JSON blob to the ",(0,r.jsx)(n.strong,{children:"Secure Extra"})," field in the database configuration form with\nthe following format:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n"credentials_info": <contents of credentials JSON file>\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The resulting file should have this structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n "credentials_info": {\n     "type": "service_account",\n     "project_id": "...",\n     "private_key_id": "...",\n     "private_key": "...",\n     "client_email": "...",\n     "client_id": "...",\n     "auth_uri": "...",\n     "token_uri": "...",\n     "auth_provider_x509_cert_url": "...",\n     "client_x509_cert_url": "..."\n     }\n }\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You should then be able to connect to your BigQuery datasets."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-images.githubusercontent.com/52086618/138354340-df57f477-d3e5-42d4-b032-d901c69d2213.gif",alt:"CleanShot 2021-10-22 at 04 47 08"})}),"\n",(0,r.jsxs)(n.p,{children:["To be able to upload CSV or Excel files to BigQuery in Superset, you'll need to also add the\n",(0,r.jsx)(n.a,{href:"https://github.com/pydata/pandas-gbq",children:"pandas_gbq"})," library."]}),"\n",(0,r.jsxs)(n.p,{children:["Currently, the Google BigQuery Python SDK is not compatible with ",(0,r.jsx)(n.code,{children:"gevent"}),", due to some dynamic monkeypatching on python core library by ",(0,r.jsx)(n.code,{children:"gevent"}),".\nSo, when you deploy Superset with ",(0,r.jsx)(n.code,{children:"gunicorn"})," server, you have to use worker type except ",(0,r.jsx)(n.code,{children:"gevent"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"google-sheets",children:"Google Sheets"}),"\n",(0,r.jsxs)(n.p,{children:["Google Sheets has a very limited\n",(0,r.jsx)(n.a,{href:"https://developers.google.com/chart/interactive/docs/querylanguage",children:"SQL API"}),". The recommended\nconnector library for Google Sheets is ",(0,r.jsx)(n.a,{href:"https://github.com/betodealmeida/shillelagh",children:"shillelagh"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["There are a few steps involved in connecting Superset to Google Sheets. This\n",(0,r.jsx)(n.a,{href:"https://preset.io/blog/2020-06-01-connect-superset-google-sheets/",children:"tutorial"})," has the most up to date\ninstructions on setting up this connection."]}),"\n",(0,r.jsx)(n.h4,{id:"hana",children:"Hana"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library is ",(0,r.jsx)(n.a,{href:"https://github.com/SAP/sqlalchemy-hana",children:"sqlalchemy-hana"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"hana://{username}:{password}@{host}:{port}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"apache-hive",children:"Apache Hive"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/PyHive/",children:"pyhive"})," library is the recommended way to connect to Hive through SQLAlchemy."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"hive://hive@{hostname}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"hologres",children:"Hologres"}),"\n",(0,r.jsx)(n.p,{children:"Hologres is a real-time interactive analytics service developed by Alibaba Cloud. It is fully compatible with PostgreSQL 11 and integrates seamlessly with the big data ecosystem."}),"\n",(0,r.jsx)(n.p,{children:"Hologres sample connection parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Name"}),": The AccessKey ID of your Alibaba Cloud account."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Password"}),": The AccessKey secret of your Alibaba Cloud account."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Host"}),": The public endpoint of the Hologres instance."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Name"}),": The name of the Hologres database."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port"}),": The port number of the Hologres instance."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The connection string looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"postgresql+psycopg2://{username}:{password}@{host}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"ibm-db2",children:"IBM DB2"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/ibmdb/python-ibmdbsa/tree/master/ibm_db_sa",children:"IBM_DB_SA"})," library provides a\nPython / SQLAlchemy interface to IBM Data Servers."]}),"\n",(0,r.jsx)(n.p,{children:"Here's the recommended connection string:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"db2+ibm_db://{username}:{passport}@{hostname}:{port}/{database}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["There are two DB2 dialect versions implemented in SQLAlchemy. If you are connecting to a DB2 version without ",(0,r.jsx)(n.code,{children:"LIMIT [n]"})," syntax, the recommended connection string to be able to use the SQL Lab is:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ibm_db_sa://{username}:{passport}@{hostname}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"apache-impala",children:"Apache Impala"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library to Apache Impala is ",(0,r.jsx)(n.a,{href:"https://github.com/cloudera/impyla",children:"impyla"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"impala://{hostname}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"kusto",children:"Kusto"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Kusto is\n",(0,r.jsx)(n.a,{href:"https://pypi.org/project/sqlalchemy-kusto/2.0.0/",children:"sqlalchemy-kusto"}),">=2.0.0."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Kusto (sql dialect) looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"kustosql+https://{cluster_url}/{database}?azure_ad_client_id={azure_ad_client_id}&azure_ad_client_secret={azure_ad_client_secret}&azure_ad_tenant_id={azure_ad_tenant_id}&msi=False\n"})}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Kusto (kql dialect) looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"kustokql+https://{cluster_url}/{database}?azure_ad_client_id={azure_ad_client_id}&azure_ad_client_secret={azure_ad_client_secret}&azure_ad_tenant_id={azure_ad_tenant_id}&msi=False\n"})}),"\n",(0,r.jsx)(n.p,{children:"Make sure the user has privileges to access and use all required\ndatabases/tables/views."}),"\n",(0,r.jsx)(n.h4,{id:"apache-kylin",children:"Apache Kylin"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Apache Kylin is\n",(0,r.jsx)(n.a,{href:"https://github.com/Kyligence/kylinpy",children:"kylinpy"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"kylin://<username>:<password>@<hostname>:<port>/<project>?<param1>=<value1>&<param2>=<value2>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"mysql",children:"MySQL"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for MySQL is ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/mysqlclient/",children:"mysqlclient"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Here's the connection string:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mysql://{username}:{password}@{host}/{database}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Host:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For Localhost: ",(0,r.jsx)(n.code,{children:"localhost"})," or ",(0,r.jsx)(n.code,{children:"127.0.0.1"})]}),"\n",(0,r.jsxs)(n.li,{children:["Docker running on Linux: ",(0,r.jsx)(n.code,{children:"172.18.0.1"})]}),"\n",(0,r.jsx)(n.li,{children:"For On Prem: IP address or Host name"}),"\n",(0,r.jsxs)(n.li,{children:["For Docker running in OSX: ",(0,r.jsx)(n.code,{children:"docker.for.mac.host.internal"}),"\nPort: ",(0,r.jsx)(n.code,{children:"3306"})," by default"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["One problem with ",(0,r.jsx)(n.code,{children:"mysqlclient"})," is that it will fail to connect to newer MySQL databases using ",(0,r.jsx)(n.code,{children:"caching_sha2_password"})," for authentication, since the plugin is not included in the client. In this case, you should use ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/mysql-connector-python/",children:"mysql-connector-python"})," instead:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mysql+mysqlconnector://{username}:{password}@{host}/{database}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"ibm-netezza-performance-server",children:"IBM Netezza Performance Server"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/nzalchemy/",children:"nzalchemy"})," library provides a\nPython / SQLAlchemy interface to IBM Netezza Performance Server (aka Netezza)."]}),"\n",(0,r.jsx)(n.p,{children:"Here's the recommended connection string:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"netezza+nzpy://{username}:{password}@{hostname}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"oceanbase",children:"OceanBase"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/oceanbase_py/",children:"sqlalchemy-oceanbase"})," library is the recommended\nway to connect to OceanBase through SQLAlchemy."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for OceanBase looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"oceanbase://<User>:<Password>@<Host>:<Port>/<Database>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"ocient-db",children:"Ocient DB"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Ocient is ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/sqlalchemy-ocient",children:"sqlalchemy-ocient"}),"."]}),"\n",(0,r.jsx)(n.h5,{id:"install-the-ocient-driver",children:"Install the Ocient Driver"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"pip install sqlalchemy-ocient\n"})}),"\n",(0,r.jsx)(n.h5,{id:"connecting-to-ocient",children:"Connecting to Ocient"}),"\n",(0,r.jsx)(n.p,{children:"The format of the Ocient DSN is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"ocient://user:password@[host][:port][/database][?param1=value1&...]\n"})}),"\n",(0,r.jsx)(n.h4,{id:"oracle",children:"Oracle"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library is\n",(0,r.jsx)(n.a,{href:"https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html",children:"cx_Oracle"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"oracle://<username>:<password>@<hostname>:<port>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"apache-pinot",children:"Apache Pinot"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Apache Pinot is ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/pinotdb/",children:"pinotdb"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"pinot+http://<pinot-broker-host>:<pinot-broker-port>/query?controller=http://<pinot-controller-host>:<pinot-controller-port>/``\n"})}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string using username and password is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"pinot://<username>:<password>@<pinot-broker-host>:<pinot-broker-port>/query/sql?controller=http://<pinot-controller-host>:<pinot-controller-port>/verify_ssl=true``\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you want to use explore view or joins, window functions, etc. then enable ",(0,r.jsx)(n.a,{href:"https://docs.pinot.apache.org/reference/multi-stage-engine",children:"multi-stage query engine"}),".\nAdd below argument while creating database connection in Advanced -> Other -> ENGINE PARAMETERS"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{"connect_args":{"use_multistage_engine":"true"}}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"postgres",children:"Postgres"}),"\n",(0,r.jsxs)(n.p,{children:["Note that, if you're using docker compose, the Postgres connector library ",(0,r.jsx)(n.a,{href:"https://www.psycopg.org/docs/",children:"psycopg2"}),"\ncomes out of the box with Superset."]}),"\n",(0,r.jsx)(n.p,{children:"Postgres sample connection parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Name"}),": UserName"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Password"}),": DBPassword"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Host"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For Localhost: localhost or 127.0.0.1"}),"\n",(0,r.jsx)(n.li,{children:"For On Prem: IP address or Host name"}),"\n",(0,r.jsx)(n.li,{children:"For AWS Endpoint"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Name"}),": Database Name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port"}),": default 5432"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The connection string looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"postgresql://{username}:{password}@{host}:{port}/{database}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can require SSL by adding ",(0,r.jsx)(n.code,{children:"?sslmode=require"})," at the end:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"postgresql://{username}:{password}@{host}:{port}/{database}?sslmode=require\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can read about the other SSL modes that Postgres supports in\n",(0,r.jsx)(n.a,{href:"https://www.postgresql.org/docs/9.1/libpq-ssl.html",children:"Table 31-1 from this documentation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["More information about PostgreSQL connection options can be found in the\n",(0,r.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/13/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2",children:"SQLAlchemy docs"}),"\nand the\n",(0,r.jsx)(n.a,{href:"https://www.postgresql.org/docs/9.1/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS",children:"PostgreSQL docs"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"presto",children:"Presto"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/PyHive/",children:"pyhive"})," library is the recommended way to connect to Presto through SQLAlchemy."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"presto://{hostname}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can pass in a username and password as well:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"presto://{username}:{password}@{hostname}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example connection string with values:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"presto://datascientist:securepassword@presto.example.com:8080/hive\n"})}),"\n",(0,r.jsx)(n.p,{children:"By default Superset assumes the most recent version of Presto is being used when querying the\ndatasource. If you\u2019re using an older version of Presto, you can configure it in the extra parameter:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n    "version": "0.123"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"SSL Secure extra add json config to extra connection information."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'   {\n     "connect_args":\n    {"protocol": "https",\n     "requests_kwargs":{"verify":false}\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"risingwave",children:"RisingWave"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for RisingWave is\n",(0,r.jsx)(n.a,{href:"https://github.com/risingwavelabs/sqlalchemy-risingwave",children:"sqlalchemy-risingwave"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"risingwave://root@{hostname}:{port}/{database}?sslmode=disable\n"})}),"\n",(0,r.jsx)(n.h4,{id:"rockset",children:"Rockset"}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Rockset is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"rockset://{api key}:@{api server}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Get your API key from the ",(0,r.jsx)(n.a,{href:"https://console.rockset.com/apikeys",children:"Rockset console"}),".\nFind your API server from the ",(0,r.jsx)(n.a,{href:"https://rockset.com/docs/rest-api/#introduction",children:"API reference"}),". Omit the ",(0,r.jsx)(n.code,{children:"https://"})," portion of the URL."]}),"\n",(0,r.jsx)(n.p,{children:"To target to a specific virtual instance, use this URI format:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"rockset://{api key}:@{api server}/{VI ID}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For more complete instructions, we recommend the ",(0,r.jsx)(n.a,{href:"https://docs.rockset.com/apache-superset/",children:"Rockset documentation"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"snowflake",children:"Snowflake"}),"\n",(0,r.jsx)(n.h5,{id:"install-snowflake-driver",children:"Install Snowflake Driver"}),"\n",(0,r.jsxs)(n.p,{children:["Follow the steps ",(0,r.jsx)(n.a,{href:"/docs/configuration/databases#installing-database-drivers",children:"here"})," about how to\ninstall new database drivers when setting up Superset locally via docker compose."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'echo "snowflake-sqlalchemy" >> ./docker/requirements-local.txt\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Snowflake is\n",(0,r.jsx)(n.a,{href:"https://pypi.org/project/snowflake-sqlalchemy/",children:"snowflake-sqlalchemy"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Snowflake looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"snowflake://{user}:{password}@{account}.{region}/{database}?role={role}&warehouse={warehouse}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The schema is not necessary in the connection string, as it is defined per table/query. The role and\nwarehouse can be omitted if defaults are defined for the user, i.e."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"snowflake://{user}:{password}@{account}.{region}/{database}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Make sure the user has privileges to access and use all required\ndatabases/schemas/tables/views/warehouses, as the Snowflake SQLAlchemy engine does not test for\nuser/role rights during engine creation by default. However, when pressing the \u201cTest Connection\u201d\nbutton in the Create or Edit Database dialog, user/role credentials are validated by passing\n\u201cvalidate_default_parameters\u201d: True to the connect() method during engine creation. If the user/role\nis not authorized to access the database, an error is recorded in the Superset logs."}),"\n",(0,r.jsxs)(n.p,{children:["And if you want connect Snowflake with ",(0,r.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/key-pair-auth.html#step-6-configure-the-snowflake-client-to-use-key-pair-authentication",children:"Key Pair Authentication"}),'.\nPlease make sure you have the key pair and the public key is registered in Snowflake.\nTo connect Snowflake with Key Pair Authentication, you need to add the following parameters to "SECURE EXTRA" field.']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsxs)(n.strong,{children:["Please note that you need to merge multi-line private key content to one line and insert ",(0,r.jsx)(n.code,{children:"\\n"})," between each line"]})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n     "auth_method": "keypair",\n     "auth_params": {\n         "privatekey_body": "-----BEGIN ENCRYPTED PRIVATE KEY-----\\n...\\n...\\n-----END ENCRYPTED PRIVATE KEY-----",\n         "privatekey_pass":"Your Private Key Password"\n     }\n }\n'})}),"\n",(0,r.jsx)(n.p,{children:'If your private key is stored on server, you can replace "privatekey_body" with \u201cprivatekey_path\u201d in parameter.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n    "auth_method": "keypair",\n    "auth_params": {\n        "privatekey_path":"Your Private Key Path",\n        "privatekey_pass":"Your Private Key Password"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"apache-solr",children:"Apache Solr"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/sqlalchemy-solr/",children:"sqlalchemy-solr"})," library provides a\nPython / SQLAlchemy interface to Apache Solr."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Solr looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"solr://{username}:{password}@{host}:{port}/{server_path}/{collection}[/?use_ssl=true|false]\n"})}),"\n",(0,r.jsx)(n.h4,{id:"apache-spark-sql",children:"Apache Spark SQL"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for Apache Spark SQL ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/PyHive/",children:"pyhive"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The expected connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"hive://hive@{hostname}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"sql-server",children:"SQL Server"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library for SQL Server is ",(0,r.jsx)(n.a,{href:"https://github.com/pymssql/pymssql",children:"pymssql"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for SQL Server looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mssql+pymssql://<Username>:<Password>@<Host>:<Port-default:1433>/<Database Name>/?Encrypt=yes\n"})}),"\n",(0,r.jsxs)(n.p,{children:["It is also possible to connect using ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/pyodbc",children:"pyodbc"})," with the parameter ",(0,r.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/14/dialects/mssql.html#pass-through-exact-pyodbc-string",children:"odbc_connect"})]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for SQL Server looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mssql+pyodbc:///?odbc_connect=Driver%3D%7BODBC+Driver+17+for+SQL+Server%7D%3BServer%3Dtcp%3A%3Cmy_server%3E%2C1433%3BDatabase%3Dmy_database%3BUid%3Dmy_user_name%3BPwd%3Dmy_password%3BEncrypt%3Dyes%3BConnection+Timeout%3D30\n"})}),"\n",(0,r.jsx)(n.h4,{id:"starrocks",children:"StarRocks"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/starrocks/",children:"sqlalchemy-starrocks"})," library is the recommended\nway to connect to StarRocks through SQLAlchemy."]}),"\n",(0,r.jsx)(n.p,{children:"You'll need to the following setting values to form the connection string:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User"}),": User Name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Password"}),": DBPassword"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Host"}),": StarRocks FE Host"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Catalog"}),": Catalog Name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database"}),": Database Name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port"}),": StarRocks FE port"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's what the connection string looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"starrocks://<User>:<Password>@<Host>:<Port>/<Catalog>.<Database>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"teradata",children:"Teradata"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library is\n",(0,r.jsx)(n.a,{href:"https://pypi.org/project/teradatasqlalchemy/",children:"teradatasqlalchemy"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string for Teradata looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"teradatasql://{user}:{password}@{host}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"odbc-driver",children:"ODBC Driver"}),"\n",(0,r.jsxs)(n.p,{children:["There's also an older connector named\n",(0,r.jsx)(n.a,{href:"https://github.com/Teradata/sqlalchemy-teradata",children:"sqlalchemy-teradata"})," that\nrequires the installation of ODBC drivers. The Teradata ODBC Drivers\nare available\nhere: ",(0,r.jsx)(n.a,{href:"https://downloads.teradata.com/download/connectivity/odbc-driver/linux",children:"https://downloads.teradata.com/download/connectivity/odbc-driver/linux"})]}),"\n",(0,r.jsx)(n.p,{children:"Here are the required environment variables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"export ODBCINI=/.../teradata/client/ODBC_64/odbc.ini\nexport ODBCINST=/.../teradata/client/ODBC_64/odbcinst.ini\n"})}),"\n",(0,r.jsx)(n.p,{children:"We recommend using the first library because of the\nlack of requirement around ODBC drivers and\nbecause it's more regularly updated."}),"\n",(0,r.jsx)(n.h4,{id:"timescaledb",children:"TimescaleDB"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.timescale.com",children:"TimescaleDB"})," is the open-source relational database for time-series and analytics to build powerful data-intensive applications.\nTimescaleDB is a PostgreSQL extension, and you can use the standard PostgreSQL connector library, ",(0,r.jsx)(n.a,{href:"https://www.psycopg.org/docs/",children:"psycopg2"}),", to connect to the database."]}),"\n",(0,r.jsx)(n.p,{children:"If you're using docker compose, psycopg2 comes out of the box with Superset."}),"\n",(0,r.jsx)(n.p,{children:"TimescaleDB sample connection parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Name"}),": User"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Password"}),": Password"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Host"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For Localhost: localhost or 127.0.0.1"}),"\n",(0,r.jsx)(n.li,{children:"For On Prem: IP address or Host name"}),"\n",(0,r.jsxs)(n.li,{children:["For ",(0,r.jsx)(n.a,{href:"https://console.cloud.timescale.com",children:"Timescale Cloud"})," service: Host name"]}),"\n",(0,r.jsxs)(n.li,{children:["For ",(0,r.jsx)(n.a,{href:"https://portal.managed.timescale.com",children:"Managed Service for TimescaleDB"})," service: Host name"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Name"}),": Database Name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port"}),": default 5432 or Port number of the service"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The connection string looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"postgresql://{username}:{password}@{host}:{port}/{database name}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can require SSL by adding ",(0,r.jsx)(n.code,{children:"?sslmode=require"})," at the end (e.g. in case you use ",(0,r.jsx)(n.a,{href:"https://www.timescale.com/cloud",children:"Timescale Cloud"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"postgresql://{username}:{password}@{host}:{port}/{database name}?sslmode=require\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docs.timescale.com/",children:"Learn more about TimescaleDB!"})}),"\n",(0,r.jsx)(n.h4,{id:"trino",children:"Trino"}),"\n",(0,r.jsx)(n.p,{children:"Supported trino version 352 and higher"}),"\n",(0,r.jsx)(n.h5,{id:"connection-string",children:"Connection String"}),"\n",(0,r.jsx)(n.p,{children:"The connection string format is as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"trino://{username}:{password}@{hostname}:{port}/{catalog}\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you are running Trino with docker on local machine, please use the following connection URL"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"trino://trino@host.docker.internal:8080\n"})}),"\n",(0,r.jsx)(n.h5,{id:"authentications",children:"Authentications"}),"\n",(0,r.jsx)(n.h6,{id:"1-basic-authentication",children:"1. Basic Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["You can provide ",(0,r.jsx)(n.code,{children:"username"}),"/",(0,r.jsx)(n.code,{children:"password"})," in the connection string or in the ",(0,r.jsx)(n.code,{children:"Secure Extra"})," field at ",(0,r.jsx)(n.code,{children:"Advanced / Security"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"In Connection String"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"trino://{username}:{password}@{hostname}:{port}/{catalog}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"Secure Extra"})," field"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "auth_method": "basic",\n    "auth_params": {\n        "username": "<username>",\n        "password": "<password>"\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["NOTE: if both are provided, ",(0,r.jsx)(n.code,{children:"Secure Extra"})," always takes higher priority."]}),"\n",(0,r.jsx)(n.h6,{id:"2-kerberos-authentication",children:"2. Kerberos Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"Secure Extra"})," field, config as following example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "auth_method": "kerberos",\n    "auth_params": {\n        "service_name": "superset",\n        "config": "/path/to/krb5.config",\n        ...\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["All fields in ",(0,r.jsx)(n.code,{children:"auth_params"})," are passed directly to the ",(0,r.jsx)(n.a,{href:"https://github.com/trinodb/trino-python-client/blob/0.306.0/trino/auth.py#L40",children:(0,r.jsx)(n.code,{children:"KerberosAuthentication"})})," class."]}),"\n",(0,r.jsxs)(n.p,{children:["NOTE: Kerberos authentication requires installing the ",(0,r.jsx)(n.a,{href:"https://github.com/trinodb/trino-python-client",children:(0,r.jsx)(n.code,{children:"trino-python-client"})})," locally with either the ",(0,r.jsx)(n.code,{children:"all"})," or ",(0,r.jsx)(n.code,{children:"kerberos"})," optional features, i.e., installing ",(0,r.jsx)(n.code,{children:"trino[all]"})," or ",(0,r.jsx)(n.code,{children:"trino[kerberos]"})," respectively."]}),"\n",(0,r.jsx)(n.h6,{id:"3-certificate-authentication",children:"3. Certificate Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"Secure Extra"})," field, config as following example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "auth_method": "certificate",\n    "auth_params": {\n        "cert": "/path/to/cert.pem",\n        "key": "/path/to/key.pem"\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["All fields in ",(0,r.jsx)(n.code,{children:"auth_params"})," are passed directly to the ",(0,r.jsx)(n.a,{href:"https://github.com/trinodb/trino-python-client/blob/0.315.0/trino/auth.py#L416",children:(0,r.jsx)(n.code,{children:"CertificateAuthentication"})})," class."]}),"\n",(0,r.jsx)(n.h6,{id:"4-jwt-authentication",children:"4. JWT Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["Config ",(0,r.jsx)(n.code,{children:"auth_method"})," and provide token in ",(0,r.jsx)(n.code,{children:"Secure Extra"})," field"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "auth_method": "jwt",\n    "auth_params": {\n        "token": "<your-jwt-token>"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h6,{id:"5-custom-authentication",children:"5. Custom Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["To use custom authentication, first you need to add it into\n",(0,r.jsx)(n.code,{children:"ALLOWED_EXTRA_AUTHENTICATIONS"})," allow list in Superset config file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from your.module import AuthClass\nfrom another.extra import auth_method\n\nALLOWED_EXTRA_AUTHENTICATIONS: Dict[str, Dict[str, Callable[..., Any]]] = {\n    "trino": {\n        "custom_auth": AuthClass,\n        "another_auth_method": auth_method,\n    },\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then in ",(0,r.jsx)(n.code,{children:"Secure Extra"})," field:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "auth_method": "custom_auth",\n    "auth_params": {\n        ...\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can also use custom authentication by providing reference to your ",(0,r.jsx)(n.code,{children:"trino.auth.Authentication"})," class\nor factory function (which returns an ",(0,r.jsx)(n.code,{children:"Authentication"})," instance) to ",(0,r.jsx)(n.code,{children:"auth_method"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["All fields in ",(0,r.jsx)(n.code,{children:"auth_params"})," are passed directly to your class/function."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reference"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://trino.io/episodes/12.html",children:"Trino-Superset-Podcast"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"vertica",children:"Vertica"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended connector library is\n",(0,r.jsx)(n.a,{href:"https://pypi.org/project/sqlalchemy-vertica-python/",children:"sqlalchemy-vertica-python"}),". The\n",(0,r.jsx)(n.a,{href:"http://www.vertica.com/",children:"Vertica"})," connection parameters are:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Name:"})," UserName"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Password:"})," DBPassword"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Host:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For Localhost : localhost or 127.0.0.1"}),"\n",(0,r.jsx)(n.li,{children:"For On Prem : IP address or Host name"}),"\n",(0,r.jsx)(n.li,{children:"For Cloud: IP Address or Host Name"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Name:"})," Database Name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port:"})," default 5433"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The connection string is formatted as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"vertica+vertica_python://{username}:{password}@{host}/{database}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Other parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Load Balancer - Backup Host"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"yugabytedb",children:"YugabyteDB"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.yugabyte.com/",children:"YugabyteDB"})," is a distributed SQL database built on top of PostgreSQL."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that, if you're using docker compose, the\nPostgres connector library ",(0,r.jsx)(n.a,{href:"https://www.psycopg.org/docs/",children:"psycopg2"}),"\ncomes out of the box with Superset."]}),"\n",(0,r.jsx)(n.p,{children:"The connection string looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"postgresql://{username}:{password}@{host}:{port}/{database}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"connecting-through-the-ui",children:"Connecting through the UI"}),"\n",(0,r.jsx)(n.p,{children:"Here is the documentation on how to leverage the new DB Connection UI. This will provide admins the ability to enhance the UX for users who want to connect to new databases."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-images.githubusercontent.com/27827808/125499607-94e300aa-1c0f-4c60-b199-3f9de41060a3.gif",alt:"db-conn-docs"})}),"\n",(0,r.jsx)(n.p,{children:"There are now 3 steps when connecting to a database in the new UI:"}),"\n",(0,r.jsxs)(n.p,{children:["Step 1: First the admin must inform superset what engine they want to connect to. This page is powered by the ",(0,r.jsx)(n.code,{children:"/available"})," endpoint which pulls on the engines currently installed in your environment, so that only supported databases are shown."]}),"\n",(0,r.jsx)(n.p,{children:"Step 2: Next, the admin is prompted to enter database specific parameters. Depending on whether there is a dynamic form available for that specific engine, the admin will either see the new custom form or the legacy SQLAlchemy form. We currently have built dynamic forms for (Redshift, MySQL, Postgres, and BigQuery). The new form prompts the user for the parameters needed to connect (for example, username, password, host, port, etc.) and provides immediate feedback on errors."}),"\n",(0,r.jsx)(n.p,{children:"Step 3: Finally, once the admin has connected to their DB using the dynamic form they have the opportunity to update any optional advanced settings."}),"\n",(0,r.jsx)(n.p,{children:"We hope this feature will help eliminate a huge bottleneck for users to get into the application and start crafting datasets."}),"\n",(0,r.jsx)(n.h5,{id:"how-to-setup-up-preferred-database-options-and-images",children:"How to setup up preferred database options and images"}),"\n",(0,r.jsx)(n.p,{children:"We added a new configuration option where the admin can define their preferred databases, in order:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# A list of preferred databases, in order. These databases will be\n# displayed prominently in the "Add Database" dialog. You should\n# use the "engine_name" attribute of the corresponding DB engine spec\n# in `superset/db_engine_specs/`.\nPREFERRED_DATABASES: list[str] = [\n    "PostgreSQL",\n    "Presto",\n    "MySQL",\n    "SQLite",\n]\n'})}),"\n",(0,r.jsx)(n.p,{children:"For copyright reasons the logos for each database are not distributed with Superset."}),"\n",(0,r.jsx)(n.h5,{id:"setting-images",children:"Setting images"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["To set the images of your preferred database, admins must create a mapping in the ",(0,r.jsx)(n.code,{children:"superset_text.yml"})," file with engine and location of the image. The image can be host locally inside your static/file directory or online (e.g. S3)"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'DB_IMAGES:\n  postgresql: "path/to/image/postgres.jpg"\n  bigquery: "path/to/s3bucket/bigquery.jpg"\n  snowflake: "path/to/image/snowflake.jpg"\n'})}),"\n",(0,r.jsx)(n.h5,{id:"how-to-add-new-database-engines-to-available-endpoint",children:"How to add new database engines to available endpoint"}),"\n",(0,r.jsx)(n.p,{children:"Currently the new modal supports the following databases:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Postgres"}),"\n",(0,r.jsx)(n.li,{children:"Redshift"}),"\n",(0,r.jsx)(n.li,{children:"MySQL"}),"\n",(0,r.jsx)(n.li,{children:"BigQuery"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When the user selects a database not in this list they will see the old dialog asking for the SQLAlchemy URI. New databases can be added gradually to the new flow. In order to support the rich configuration a DB engine spec needs to have the following attributes:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parameters_schema"}),": a Marshmallow schema defining the parameters needed to configure the database. For Postgres this includes username, password, host, port, etc. (",(0,r.jsx)(n.a,{href:"https://github.com/apache/superset/blob/accee507c0819cd0d7bcfb5a3e1199bc81eeebf2/superset/db_engine_specs/base.py#L1309-L1320",children:"see"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default_driver"}),': the name of the recommended driver for the DB engine spec. Many SQLAlchemy dialects support multiple drivers, but usually one is the official recommendation. For Postgres we use "psycopg2".']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sqlalchemy_uri_placeholder"}),": a string that helps the user in case they want to type the URI directly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"encryption_parameters"}),": parameters used to build the URI when the user opts for an encrypted connection. For Postgres this is ",(0,r.jsx)(n.code,{children:'{"sslmode": "require"}'}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In addition, the DB engine spec must implement these class methods:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"build_sqlalchemy_uri(cls, parameters, encrypted_extra)"}),": this method receives the distinct parameters and builds the URI from them."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_parameters_from_uri(cls, uri, encrypted_extra)"}),": this method does the opposite, extracting the parameters from a given URI."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validate_parameters(cls, parameters)"}),": this method is used for ",(0,r.jsx)(n.code,{children:"onBlur"})," validation of the form. It should return a list of ",(0,r.jsx)(n.code,{children:"SupersetError"})," indicating which parameters are missing, and which parameters are definitely incorrect (",(0,r.jsx)(n.a,{href:"https://github.com/apache/superset/blob/accee507c0819cd0d7bcfb5a3e1199bc81eeebf2/superset/db_engine_specs/base.py#L1404",children:"example"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For databases like MySQL and Postgres that use the standard format of ",(0,r.jsx)(n.code,{children:"engine+driver://user:password@host:port/dbname"})," all you need to do is add the ",(0,r.jsx)(n.code,{children:"BasicParametersMixin"})," to the DB engine spec, and then define the parameters 2-4 (",(0,r.jsx)(n.code,{children:"parameters_schema"})," is already present in the mixin)."]}),"\n",(0,r.jsx)(n.p,{children:"For other databases you need to implement these methods yourself. The BigQuery DB engine spec is a good example of how to do that."}),"\n",(0,r.jsx)(n.h3,{id:"extra-database-settings",children:"Extra Database Settings"}),"\n",(0,r.jsx)(n.h5,{id:"deeper-sqlalchemy-integration",children:"Deeper SQLAlchemy Integration"}),"\n",(0,r.jsxs)(n.p,{children:["It is possible to tweak the database connection information using the parameters exposed by\nSQLAlchemy. In the ",(0,r.jsx)(n.strong,{children:"Database edit"})," view, you can edit the ",(0,r.jsx)(n.strong,{children:"Extra"})," field as a JSON blob."]}),"\n",(0,r.jsxs)(n.p,{children:["This JSON string contains extra configuration elements. The ",(0,r.jsx)(n.code,{children:"engine_params"})," object gets unpacked\ninto the ",(0,r.jsx)(n.code,{children:"sqlalchemy.create_engine"})," call, while the ",(0,r.jsx)(n.code,{children:"metadata_params"})," get unpacked into the\n",(0,r.jsx)(n.code,{children:"sqlalchemy.MetaData"})," call. Refer to the SQLAlchemy docs for more information."]}),"\n",(0,r.jsx)(n.h5,{id:"schemas",children:"Schemas"}),"\n",(0,r.jsxs)(n.p,{children:["Databases like Postgres and Redshift use the ",(0,r.jsx)(n.strong,{children:"schema"})," as the logical entity on top of the\n",(0,r.jsx)(n.strong,{children:"database"}),". For Superset to connect to a specific schema, you can set the ",(0,r.jsx)(n.strong,{children:"schema"})," parameter in\nthe ",(0,r.jsx)(n.strong,{children:"Edit Tables"})," form (Sources > Tables > Edit record)."]}),"\n",(0,r.jsx)(n.h5,{id:"external-password-store-for-sqlalchemy-connections",children:"External Password Store for SQLAlchemy Connections"}),"\n",(0,r.jsx)(n.p,{children:"Superset can be configured to use an external store for database passwords. This is useful if you a\nrunning a custom secret distribution framework and do not wish to store secrets in Superset\u2019s meta\ndatabase."}),"\n",(0,r.jsxs)(n.p,{children:["Example: Write a function that takes a single argument of type ",(0,r.jsx)(n.code,{children:"sqla.engine.url"})," and returns the\npassword for the given connection string. Then set ",(0,r.jsx)(n.code,{children:"SQLALCHEMY_CUSTOM_PASSWORD_STORE"})," in your config\nfile to point to that function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def example_lookup_password(url):\n    secret = <<get password from external framework>>\n    return 'secret'\n\nSQLALCHEMY_CUSTOM_PASSWORD_STORE = example_lookup_password\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A common pattern is to use environment variables to make secrets available.\n",(0,r.jsx)(n.code,{children:"SQLALCHEMY_CUSTOM_PASSWORD_STORE"})," can also be used for that purpose."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def example_password_as_env_var(url):\n    # assuming the uri looks like\n    # mysql://localhost?superset_user:{SUPERSET_PASSWORD}\n    return url.password.format(**os.environ)\n\nSQLALCHEMY_CUSTOM_PASSWORD_STORE = example_password_as_env_var\n"})}),"\n",(0,r.jsx)(n.h5,{id:"ssl-access-to-databases",children:"SSL Access to Databases"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"Extra"})," field in the ",(0,r.jsx)(n.strong,{children:"Edit Databases"})," form to configure SSL:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JSON",children:'{\n    "metadata_params": {},\n    "engine_params": {\n          "connect_args":{\n              "sslmode":"require",\n              "sslrootcert": "/path/to/my/pem"\n        }\n     }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"misc",children:"Misc."}),"\n",(0,r.jsx)(n.h3,{id:"querying-across-databases",children:"Querying across databases"}),"\n",(0,r.jsx)(n.p,{children:'Superset offers an experimental feature for querying across different databases. This is done via a special database called "Superset meta database" that uses the "superset://" SQLAlchemy URI. When using the database it\'s possible to query any table in any of the configured databases using the following syntax:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'SELECT * FROM "database name.[[catalog.].schema].table name";\n'})}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'SELECT * FROM "examples.birth_names";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Spaces are allowed, but periods in the names must be replaced by ",(0,r.jsx)(n.code,{children:"%2E"}),". Eg:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'SELECT * FROM "Superset meta database.examples%2Ebirth_names";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The query above returns the same rows as ",(0,r.jsx)(n.code,{children:'SELECT * FROM "examples.birth_names"'}),", and also shows that the meta database can query tables from any table \u2014 even itself!"]}),"\n",(0,r.jsx)(n.h4,{id:"considerations",children:"Considerations"}),"\n",(0,r.jsx)(n.p,{children:"Before enabling this feature, there are a few considerations that you should have in mind. First, the meta database enforces permissions on the queried tables, so users should only have access via the database to tables that they originally have access to. Nevertheless, the meta database is a new surface for potential attacks, and bugs could allow users to see data they should not."}),"\n",(0,r.jsx)(n.p,{children:"Second, there are performance considerations. The meta database will push any filtering, sorting, and limiting to the underlying databases, but any aggregations and joins will happen in memory in the process running the query. Because of this, it's recommended to run the database in async mode, so queries are executed in Celery workers, instead of the web workers. Additionally, it's possible to specify a hard limit on how many rows are returned from the underlying databases."}),"\n",(0,r.jsx)(n.h4,{id:"enabling-the-meta-database",children:"Enabling the meta database"}),"\n",(0,r.jsxs)(n.p,{children:["To enable the Superset meta database, first you need to set the ",(0,r.jsx)(n.code,{children:"ENABLE_SUPERSET_META_DB"}),' feature flag to true. Then, add a new database of type "Superset meta database" with the SQLAlchemy URI "superset://".']}),"\n",(0,r.jsxs)(n.p,{children:["If you enable DML in the meta database users will be able to run DML queries on underlying databases ",(0,r.jsx)(n.strong,{children:"as long as DML is also enabled in them"}),". This allows users to run queries that move data across databases."]}),"\n",(0,r.jsxs)(n.p,{children:["Second, you might want to change the value of ",(0,r.jsx)(n.code,{children:"SUPERSET_META_DB_LIMIT"}),". The default value is 1000, and defines how many are read from each database before any aggregations and joins are executed. You can also set this value ",(0,r.jsx)(n.code,{children:"None"})," if you only have small tables."]}),"\n",(0,r.jsx)(n.p,{children:'Additionally, you might want to restrict the databases to with the meta database has access to. This can be done in the database configuration, under "Advanced" -> "Other" -> "ENGINE PARAMETERS" and adding:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"allowed_dbs":["Google Sheets","examples"]}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);