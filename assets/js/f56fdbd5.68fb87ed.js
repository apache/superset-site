"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[4983],{55795:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=n(74848),s=n(28453),r=n(86025);const i={title:"Docker Compose",hide_title:!0,sidebar_position:4,version:1},c="Using Docker Compose",a={id:"installation/docker-compose",title:"Docker Compose",description:"Since docker compose is primarily designed to run a set of containers on a single host",source:"@site/docs/installation/docker-compose.mdx",sourceDirName:"installation",slug:"/installation/docker-compose",permalink:"/docs/installation/docker-compose",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/superset/edit/master/docs/docs/installation/docker-compose.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Docker Compose",hide_title:!0,sidebar_position:4,version:1},sidebar:"CustomSidebar",previous:{title:"PyPI",permalink:"/docs/installation/pypi"},next:{title:"Upgrading Superset",permalink:"/docs/installation/upgrading-superset"}},d={},l=[{value:"Requirements",id:"requirements",level:2},{value:"1. Clone Superset&#39;s GitHub repository",id:"1-clone-supersets-github-repository",level:2},{value:"2. Launch Superset Through Docker Compose",id:"2-launch-superset-through-docker-compose",level:2},{value:"Option #1 - for an interactive development environment",id:"option-1---for-an-interactive-development-environment",level:3},{value:"Option #2 - build a set of immutable images from the local branch",id:"option-2---build-a-set-of-immutable-images-from-the-local-branch",level:3},{value:"Option #3 - boot up an official release",id:"option-3---boot-up-an-official-release",level:3},{value:"<code>docker compose</code> tips &amp; configuration",id:"docker-compose-tips--configuration",level:2},{value:"Configuring Further",id:"configuring-further",level:3},{value:"3. Log in to Superset",id:"3-log-in-to-superset",level:2},{value:"4. Connecting Superset to your local database instance",id:"4-connecting-superset-to-your-local-database-instance",level:2}];function h(e){const o={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"using-docker-compose",children:"Using Docker Compose"}),"\n",(0,t.jsx)("img",{src:(0,r.Ay)("/img/docker-compose.webp"),width:"150"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(o.admonition,{type:"caution",children:(0,t.jsxs)(o.p,{children:["Since ",(0,t.jsx)(o.code,{children:"docker compose"})," is primarily designed to run a set of containers on ",(0,t.jsx)(o.strong,{children:"a single host"}),"\nand can't support requirements for ",(0,t.jsx)(o.strong,{children:"high availability"}),", we do not support nor recommend\nusing our ",(0,t.jsx)(o.code,{children:"docker compose"})," constructs to support production-type use-cases. For single host\nenvironments, we recommend using ",(0,t.jsx)(o.a,{href:"https://minikube.sigs.k8s.io/docs/start/",children:"minikube"})," along\nour ",(0,t.jsx)(o.a,{href:"https://superset.apache.org/docs/installation/running-on-kubernetes",children:"installing on k8s"}),"\ndocumentation."]})}),"\n",(0,t.jsxs)(o.p,{children:["As mentioned in our ",(0,t.jsx)(o.a,{href:"/docs/quickstart",children:"quickstart guide"}),", the fastest way to try\nSuperset locally is using Docker Compose on a Linux or Mac OSX\ncomputer. Superset does not have official support for Windows. It's also the easiest\nway to launch a fully functioning ",(0,t.jsx)(o.strong,{children:"development environment"})," quickly."]}),"\n",(0,t.jsxs)(o.p,{children:["Note that there are 3 major ways we support to run ",(0,t.jsx)(o.code,{children:"docker compose"}),":"]}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"docker-compose.yml:"})," for interactive development, where we mount your local folder with the\nfrontend/backend files that you can edit and experience the changes you\nmake in the app in real time"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"docker-compose-non-dev.yml"})," where we just build a more immutable image based on the\nlocal branch and get all the required images running. Changes in the local branch\nat the time you fire this up will be reflected, but changes to the code\nwhile ",(0,t.jsx)(o.code,{children:"up"})," won't be reflected in the app"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"docker-compose-image-tag.yml"})," where we fetch an image from docker-hub say for the\n",(0,t.jsx)(o.code,{children:"3.0.0"})," release for instance, and fire it up so you can try it. Here what's in\nthe local branch has no effects on what's running, we just fetch and run\npre-built images from docker-hub. For ",(0,t.jsx)(o.code,{children:"docker compose"})," to work along with the\nPostgres image it boots up, you'll want to point to a ",(0,t.jsx)(o.code,{children:"-dev"}),"-suffixed TAG, as in\n",(0,t.jsx)(o.code,{children:"export TAG=4.0.0-dev"})," or ",(0,t.jsx)(o.code,{children:"export TAG=3.0.0-dev"}),", with ",(0,t.jsx)(o.code,{children:"latest-dev"})," being the default.\nThat's because The ",(0,t.jsx)(o.code,{children:"dev"})," builds happen to package the ",(0,t.jsx)(o.code,{children:"psycopg2-binary"})," required to connect\nto the Postgres database launched as part of the ",(0,t.jsx)(o.code,{children:"docker compose"})," builds.\n``"]}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"More on these two approaches after setting up the requirements for either."}),"\n",(0,t.jsx)(o.h2,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsxs)(o.p,{children:["Note that this documentation assumes that you have ",(0,t.jsx)(o.a,{href:"https://www.docker.com",children:"Docker"})," and\n",(0,t.jsx)(o.a,{href:"https://git-scm.com/",children:"git"})," installed. Note also that we used to use ",(0,t.jsx)(o.code,{children:"docker-compose"})," but that\nis on the path to deprecation so we now use ",(0,t.jsx)(o.code,{children:"docker compose"})," instead."]}),"\n",(0,t.jsx)(o.h2,{id:"1-clone-supersets-github-repository",children:"1. Clone Superset's GitHub repository"}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.a,{href:"https://github.com/apache/superset",children:"Clone Superset's repo"})," in your terminal with the\nfollowing command:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"git clone --depth=1  https://github.com/apache/superset.git\n"})}),"\n",(0,t.jsxs)(o.p,{children:["Once that command completes successfully, you should see a new ",(0,t.jsx)(o.code,{children:"superset"})," folder in your\ncurrent directory."]}),"\n",(0,t.jsx)(o.h2,{id:"2-launch-superset-through-docker-compose",children:"2. Launch Superset Through Docker Compose"}),"\n",(0,t.jsxs)(o.p,{children:["First let's assume you're familiar with ",(0,t.jsx)(o.code,{children:"docker compose"})," mechanics. Here we'll refer generally\nto ",(0,t.jsx)(o.code,{children:"docker compose up"})," even though in some cases you may want to force a check for newer remote\nimages using ",(0,t.jsx)(o.code,{children:"docker compose pull"}),", force a build with ",(0,t.jsx)(o.code,{children:"docker compose build"})," or force a build\non latest base images using ",(0,t.jsx)(o.code,{children:"docker compose build --pull"}),". In most cases though, the simple\n",(0,t.jsx)(o.code,{children:"up"})," command should do just fine. Refer to docker compose docs for more information on the topic."]}),"\n",(0,t.jsx)(o.h3,{id:"option-1---for-an-interactive-development-environment",children:"Option #1 - for an interactive development environment"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"docker compose up\n"})}),"\n",(0,t.jsx)(o.admonition,{type:"tip",children:(0,t.jsxs)(o.p,{children:["When running in development mode the ",(0,t.jsx)(o.code,{children:"superset-node"}),"\ncontainer needs to finish building assets in order for the UI to render properly. If you would just\nlike to try out Superset without making any code changes follow the steps documented for\n",(0,t.jsx)(o.code,{children:"production"})," or a specific version below."]})}),"\n",(0,t.jsx)(o.admonition,{type:"tip",children:(0,t.jsxs)(o.p,{children:["By default, we mount the local superset-frontend folder here and run ",(0,t.jsx)(o.code,{children:"npm install"})," as well\nas ",(0,t.jsx)(o.code,{children:"npm run dev"})," which triggers webpack to compile/bundle the frontend code. Depending\non your local setup, especially if you have less than 16GB of memory,  it may be very slow to\nperform those operations. In this case, we recommend you set the env var\n",(0,t.jsx)(o.code,{children:"BUILD_SUPERSET_FRONTEND_IN_DOCKER"})," to ",(0,t.jsx)(o.code,{children:"false"}),", and to run this locally instead in a terminal.\nSimply trigger ",(0,t.jsx)(o.code,{children:"npm i && npm run dev"}),", this should be MUCH faster."]})}),"\n",(0,t.jsx)(o.h3,{id:"option-2---build-a-set-of-immutable-images-from-the-local-branch",children:"Option #2 - build a set of immutable images from the local branch"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"docker compose -f docker-compose-non-dev.yml up\n"})}),"\n",(0,t.jsx)(o.h3,{id:"option-3---boot-up-an-official-release",children:"Option #3 - boot up an official release"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"export TAG=3.1.1\ndocker compose -f docker-compose-image-tag.yml up\n"})}),"\n",(0,t.jsxs)(o.p,{children:["Here various release tags, github SHA, and latest ",(0,t.jsx)(o.code,{children:"master"})," can be referenced by the TAG env var.\nRefer to the docker-related documentation to learn more about existing tags you can point to\nfrom Docker Hub."]}),"\n",(0,t.jsxs)(o.h2,{id:"docker-compose-tips--configuration",children:[(0,t.jsx)(o.code,{children:"docker compose"})," tips & configuration"]}),"\n",(0,t.jsxs)(o.admonition,{type:"caution",children:[(0,t.jsxs)(o.p,{children:["All of the content belonging to a Superset instance - charts, dashboards, users, etc. - is stored in\nits metadata database. In production, this database should be backed up.  The default installation\nwith docker compose will store that data in a PostgreSQL database contained in a Docker\n",(0,t.jsx)(o.a,{href:"https://docs.docker.com/storage/volumes/",children:"volume"}),", which is not backed up."]}),(0,t.jsxs)(o.p,{children:["Again, ",(0,t.jsx)(o.strong,{children:"DO NOT USE THIS FOR PRODUCTION"})]})]}),"\n",(0,t.jsxs)(o.p,{children:["You should see a stream of logging output from the containers being launched on your machine. Once\nthis output slows, you should have a running instance of Superset on your local machine!  To avoid\nthe wall of text on future runs, add the ",(0,t.jsx)(o.code,{children:"-d"})," option to the end of the ",(0,t.jsx)(o.code,{children:"docker compose up"})," command."]}),"\n",(0,t.jsx)(o.h3,{id:"configuring-further",children:"Configuring Further"}),"\n",(0,t.jsx)(o.p,{children:"The following is for users who want to configure how Superset runs in Docker Compose; otherwise, you\ncan skip to the next section."}),"\n",(0,t.jsxs)(o.p,{children:["You can install additional python packages and apply config overrides by following the steps\nmentioned in ",(0,t.jsx)(o.a,{href:"https://github.com/apache/superset/tree/master/docker#configuration",children:"docker/README.md"})]}),"\n",(0,t.jsxs)(o.p,{children:["Note that ",(0,t.jsx)(o.code,{children:"docker/.env"})," sets the default environment variables for all the docker images\nused by ",(0,t.jsx)(o.code,{children:"docker compose"}),", and that ",(0,t.jsx)(o.code,{children:"docker/.env-local"})," can be used to override those defaults.\nAlso note that ",(0,t.jsx)(o.code,{children:"docker/.env-local"})," is referenced in our ",(0,t.jsx)(o.code,{children:".gitignore"}),",\npreventing developers from risking committing potentially sensitive configuration to the repository."]}),"\n",(0,t.jsxs)(o.p,{children:["One important variable is ",(0,t.jsx)(o.code,{children:"SUPERSET_LOAD_EXAMPLES"})," which determines whether the ",(0,t.jsx)(o.code,{children:"superset_init"}),"\ncontainer will populate example data and visualizations into the metadata database. These examples\nare helpful for learning and testing out Superset but unnecessary for experienced users and\nproduction deployments. The loading process can sometimes take a few minutes and a good amount of\nCPU, so you may want to disable it on a resource-constrained device."]}),"\n",(0,t.jsxs)(o.p,{children:["For more advanced or dynamic configurations that are typically managed in a ",(0,t.jsx)(o.code,{children:"superset_config.py"})," file\nlocated in your ",(0,t.jsx)(o.code,{children:"PYTHONPATH"}),", note that it can be done by providing a\n",(0,t.jsx)(o.code,{children:"docker/pythonpath_dev/superset_config_docker.py"})," that will be ignored by git\n(preventing you to commit/push your local configuration back to the repository).\nThe mechanics of this are in ",(0,t.jsx)(o.code,{children:"docker/pythonpath_dev/superset_config.py"})," where you can see\nthat the logic runs a ",(0,t.jsx)(o.code,{children:"from superset_config_docker import *"})]}),"\n",(0,t.jsx)(o.admonition,{type:"note",children:(0,t.jsxs)(o.p,{children:["Users often want to connect to other databases from Superset. Currently, the easiest way to\ndo this is to modify the ",(0,t.jsx)(o.code,{children:"docker-compose-non-dev.yml"})," file and add your database as a service that\nthe other services depend on (via ",(0,t.jsx)(o.code,{children:"x-superset-depends-on"}),"). Others have attempted to set\n",(0,t.jsx)(o.code,{children:"network_mode: host"})," on the Superset services, but these generally break the installation,\nbecause the configuration requires use of the Docker Compose DNS resolver for the service names.\nIf you have a good solution for this, let us know!"]})}),"\n",(0,t.jsxs)(o.admonition,{type:"note",children:[(0,t.jsxs)(o.p,{children:["Superset uses ",(0,t.jsx)(o.a,{href:"https://about.scarf.sh/scarf-gateway",children:"Scarf Gateway"})," to collect telemetry\ndata. Knowing the installation counts for different Superset versions informs the project's\ndecisions about patching and long-term support. Scarf purges personally identifiable information\n(PII) and provides only aggregated statistics."]}),(0,t.jsxs)(o.p,{children:["To opt-out of this data collection for packages downloaded through the Scarf Gateway by your docker\ncompose based installation, edit the ",(0,t.jsx)(o.code,{children:"x-superset-image:"})," line in your ",(0,t.jsx)(o.code,{children:"docker-compose.yml"})," and\n",(0,t.jsx)(o.code,{children:"docker-compose-non-dev.yml"})," files, replacing ",(0,t.jsx)(o.code,{children:"apachesuperset.docker.scarf.sh/apache/superset"})," with\n",(0,t.jsx)(o.code,{children:"apache/superset"})," to pull the image directly from Docker Hub."]}),(0,t.jsxs)(o.p,{children:["To disable the Scarf telemetry pixel, set the ",(0,t.jsx)(o.code,{children:"SCARF_ANALYTICS"})," environment variable to ",(0,t.jsx)(o.code,{children:"False"})," in\nyour terminal and/or in your ",(0,t.jsx)(o.code,{children:"docker/.env"})," file."]})]}),"\n",(0,t.jsx)(o.h2,{id:"3-log-in-to-superset",children:"3. Log in to Superset"}),"\n",(0,t.jsxs)(o.p,{children:["Your local Superset instance also includes a Postgres server to store your data and is already\npre-loaded with some example datasets that ship with Superset. You can access Superset now via your\nweb browser by visiting ",(0,t.jsx)(o.code,{children:"http://localhost:8088"}),". Note that many browsers now default to ",(0,t.jsx)(o.code,{children:"https"})," - if\nyours is one of them, please make sure it uses ",(0,t.jsx)(o.code,{children:"http"}),"."]}),"\n",(0,t.jsx)(o.p,{children:"Log in with the default username and password:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"username: admin\n"})}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"password: admin\n"})}),"\n",(0,t.jsx)(o.h2,{id:"4-connecting-superset-to-your-local-database-instance",children:"4. Connecting Superset to your local database instance"}),"\n",(0,t.jsxs)(o.p,{children:["When running Superset using ",(0,t.jsx)(o.code,{children:"docker"})," or ",(0,t.jsx)(o.code,{children:"docker compose"})," it runs in its own docker container, as if\nthe Superset was running in a separate machine entirely. Therefore attempts to connect to your local\ndatabase with the hostname ",(0,t.jsx)(o.code,{children:"localhost"})," won't work as ",(0,t.jsx)(o.code,{children:"localhost"})," refers to the docker container\nSuperset is running in, and not your actual host machine. Fortunately, docker provides an easy way\nto access network resources in the host machine from inside a container, and we will leverage this\ncapability to connect to our local database instance."]}),"\n",(0,t.jsx)(o.p,{children:"Here the instructions are for connecting to postgresql (which is running on your host machine) from\nSuperset (which is running in its docker container). Other databases may have slightly different\nconfigurations but gist would be same and boils down to 2 steps -"}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"(Mac users may skip this step)"})," Configuring the local postgresql/database instance to accept\npublic incoming connections. By default, postgresql only allows incoming connections from\n",(0,t.jsx)(o.code,{children:"localhost"})," and under Docker, unless you use ",(0,t.jsx)(o.code,{children:"--network=host"}),", ",(0,t.jsx)(o.code,{children:"localhost"})," will refer to different\nendpoints on the host machine and in a docker container respectively. Allowing postgresql to accept\nconnections from the Docker involves making one-line changes to the files ",(0,t.jsx)(o.code,{children:"postgresql.conf"})," and\n",(0,t.jsx)(o.code,{children:"pg_hba.conf"}),"; you can find helpful links tailored to your OS / PG version on the web easily for\nthis task. For Docker it suffices to only whitelist IPs ",(0,t.jsx)(o.code,{children:"172.0.0.0/8"})," instead of ",(0,t.jsx)(o.code,{children:"*"}),", but in any\ncase you are ",(0,t.jsx)(o.em,{children:"warned"})," that doing this in a production database ",(0,t.jsx)(o.em,{children:"may"})," have disastrous consequences as\nyou are opening your database to the public internet."]}),"\n",(0,t.jsxs)(o.li,{children:["Instead of ",(0,t.jsx)(o.code,{children:"localhost"}),", try using ",(0,t.jsx)(o.code,{children:"host.docker.internal"})," (Mac users, Ubuntu) or ",(0,t.jsx)(o.code,{children:"172.18.0.1"}),"\n(Linux users) as the hostname when attempting to connect to the database. This is a Docker internal\ndetail -- what is happening is that, in Mac systems, Docker Desktop creates a dns entry for the\nhostname ",(0,t.jsx)(o.code,{children:"host.docker.internal"})," which resolves to the correct address for the host machine, whereas\nin Linux this is not the case (at least by default). If neither of these 2 hostnames work then you\nmay want to find the exact hostname you want to use, for that you can do ",(0,t.jsx)(o.code,{children:"ifconfig"})," or\n",(0,t.jsx)(o.code,{children:"ip addr show"})," and look at the IP address of ",(0,t.jsx)(o.code,{children:"docker0"})," interface that must have been created by\nDocker for you. Alternately if you don't even see the ",(0,t.jsx)(o.code,{children:"docker0"})," interface try (if needed with sudo)\n",(0,t.jsx)(o.code,{children:"docker network inspect bridge"})," and see if there is an entry for ",(0,t.jsx)(o.code,{children:'"Gateway"'})," and note the IP\naddress."]}),"\n"]})]})}function u(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>c});var t=n(96540);const s={},r=t.createContext(s);function i(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);