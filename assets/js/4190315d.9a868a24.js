"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[9458],{94083:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=s(74848),r=s(28453);const i={title:"Configuring Superset",hide_title:!0,sidebar_position:1,version:1},o="Configuring Superset",a={id:"configuration/configuring-superset",title:"Configuring Superset",description:"superset_config.py",source:"@site/docs/configuration/configuring-superset.mdx",sourceDirName:"configuration",slug:"/configuration/configuring-superset",permalink:"/docs/configuration/configuring-superset",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/superset/edit/master/docs/docs/configuration/configuring-superset.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Configuring Superset",hide_title:!0,sidebar_position:1,version:1},sidebar:"CustomSidebar",previous:{title:"Docker Builds",permalink:"/docs/installation/docker-builds"},next:{title:"Connecting to Databases",permalink:"/docs/configuration/databases"}},c={},l=[{value:"superset_config.py",id:"superset_configpy",level:2},{value:"Specifying a SECRET_KEY",id:"specifying-a-secret_key",level:2},{value:"Adding an initial SECRET_KEY",id:"adding-an-initial-secret_key",level:3},{value:"Rotating to a newer SECRET_KEY",id:"rotating-to-a-newer-secret_key",level:3},{value:"Setting up a production metadata database",id:"setting-up-a-production-metadata-database",level:2},{value:"Running on a WSGI HTTP Server",id:"running-on-a-wsgi-http-server",level:2},{value:"HTTPS Configuration",id:"https-configuration",level:2},{value:"Configuration Behind a Load Balancer",id:"configuration-behind-a-load-balancer",level:2},{value:"Custom OAuth2 Configuration",id:"custom-oauth2-configuration",level:2},{value:"Keycloak-Specific Configuration using Flask-OIDC",id:"keycloak-specific-configuration-using-flask-oidc",level:3},{value:"LDAP Authentication",id:"ldap-authentication",level:2},{value:"Mapping LDAP or OAUTH groups to Superset roles",id:"mapping-ldap-or-oauth-groups-to-superset-roles",level:2},{value:"Mapping OAUTH groups to Superset roles",id:"mapping-oauth-groups-to-superset-roles",level:3},{value:"Mapping LDAP groups to Superset roles",id:"mapping-ldap-groups-to-superset-roles",level:3},{value:"Syncing roles at login",id:"syncing-roles-at-login",level:3},{value:"Flask app Configuration Hook",id:"flask-app-configuration-hook",level:2},{value:"Feature Flags",id:"feature-flags",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"configuring-superset",children:"Configuring Superset"})}),"\n",(0,t.jsx)(n.h2,{id:"superset_configpy",children:"superset_config.py"}),"\n",(0,t.jsxs)(n.p,{children:["Superset exposes hundreds of configurable parameters through its\n",(0,t.jsx)(n.a,{href:"https://github.com/apache/superset/blob/master/superset/config.py",children:"config.py module"}),". The\nvariables and objects exposed act as a public interface of the bulk of what you may want\nto configure, alter and interface with. In this python module, you'll find all these\nparameters, sensible defaults, as well as rich documentation in the form of comments"]}),"\n",(0,t.jsxs)(n.p,{children:["To configure your application, you need to create your own configuration module, which\nwill allow you to override few or many of these parameters. Instead of altering the core module,\nyou'll want to define your own module (typically a file named ",(0,t.jsx)(n.code,{children:"superset_config.py"}),").\nAdd this file to your ",(0,t.jsx)(n.code,{children:"PYTHONPATH"})," or create an environment variable\n",(0,t.jsx)(n.code,{children:"SUPERSET_CONFIG_PATH"})," specifying the full path of the ",(0,t.jsx)(n.code,{children:"superset_config.py"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, if deploying on Superset directly on a Linux-based system where your\n",(0,t.jsx)(n.code,{children:"superset_config.py"})," is under ",(0,t.jsx)(n.code,{children:"/app"})," directory, you can run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export SUPERSET_CONFIG_PATH=/app/superset_config.py\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you are using your own custom Dockerfile with the official Superset image as base image,\nthen you can add your overrides as shown below:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"COPY --chown=superset superset_config.py /app/\nENV SUPERSET_CONFIG_PATH /app/superset_config.py\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Docker compose deployments handle application configuration differently using specific conventions.\nRefer to the ",(0,t.jsx)(n.a,{href:"/docs/installation/docker-compose#docker-compose-tips--configuration",children:"docker compose tips & configuration"}),"\nfor details."]}),"\n",(0,t.jsxs)(n.p,{children:["The following is an example of just a few of the parameters you can set in your ",(0,t.jsx)(n.code,{children:"superset_config.py"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Superset specific config\nROW_LIMIT = 5000\n\n# Flask App Builder configuration\n# Your App secret key will be used for securely signing the session cookie\n# and encrypting sensitive information on the database\n# Make sure you are changing this key for your deployment with a strong key.\n# Alternatively you can set it with `SUPERSET_SECRET_KEY` environment variable.\n# You MUST set this for production environments or the server will refuse\n# to start and you will see an error in the logs accordingly.\nSECRET_KEY = 'YOUR_OWN_RANDOM_GENERATED_SECRET_KEY'\n\n# The SQLAlchemy connection string to your database backend\n# This connection defines the path to the database that stores your\n# superset metadata (slices, connections, tables, dashboards, ...).\n# Note that the connection information to connect to the datasources\n# you want to explore are managed directly in the web UI\n# The check_same_thread=false property ensures the sqlite client does not attempt\n# to enforce single-threaded access, which may be problematic in some edge cases\nSQLALCHEMY_DATABASE_URI = 'sqlite:////path/to/superset.db?check_same_thread=false'\n\n# Flask-WTF flag for CSRF\nWTF_CSRF_ENABLED = True\n# Add endpoints that need to be exempt from CSRF protection\nWTF_CSRF_EXEMPT_LIST = []\n# A CSRF token that expires in 1 year\nWTF_CSRF_TIME_LIMIT = 60 * 60 * 24 * 365\n\n# Set this API key to enable Mapbox visualizations\nMAPBOX_API_KEY = ''\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Note that it is typical to copy and paste [only] the portions of the\ncore ",(0,t.jsx)(n.a,{href:"https://github.com/apache/superset/blob/master/superset/config.py",children:"superset/config.py"})," that\nyou want to alter, along with the related comments into your own ",(0,t.jsx)(n.code,{children:"superset_config.py"})," file."]})}),"\n",(0,t.jsxs)(n.p,{children:["All the parameters and default values defined\nin ",(0,t.jsx)(n.a,{href:"https://github.com/apache/superset/blob/master/superset/config.py",children:"superset/config.py"}),"\ncan be altered in your local ",(0,t.jsx)(n.code,{children:"superset_config.py"}),". Administrators will want to read through the file\nto understand what can be configured locally as well as the default values in place."]}),"\n",(0,t.jsxs)(n.p,{children:["Since ",(0,t.jsx)(n.code,{children:"superset_config.py"})," acts as a Flask configuration module, it can be used to alter the\nsettings of Flask itself, as well as Flask extensions that Superset bundles like\n",(0,t.jsx)(n.code,{children:"flask-wtf"}),", ",(0,t.jsx)(n.code,{children:"flask-caching"}),", ",(0,t.jsx)(n.code,{children:"flask-migrate"}),",\nand ",(0,t.jsx)(n.code,{children:"flask-appbuilder"}),". Each one of these extensions offers intricate configurability.\nFlask App Builder, the web framework used by Superset, also offers many\nconfiguration settings. Please consult the\n",(0,t.jsx)(n.a,{href:"https://flask-appbuilder.readthedocs.org/en/latest/config.html",children:"Flask App Builder Documentation"}),"\nfor more information on how to configure it."]}),"\n",(0,t.jsxs)(n.p,{children:["At the very least, you'll want to change ",(0,t.jsx)(n.code,{children:"SECRET_KEY"})," and ",(0,t.jsx)(n.code,{children:"SQLALCHEMY_DATABASE_URI"}),". Continue reading for more about each of these."]}),"\n",(0,t.jsx)(n.h2,{id:"specifying-a-secret_key",children:"Specifying a SECRET_KEY"}),"\n",(0,t.jsx)(n.h3,{id:"adding-an-initial-secret_key",children:"Adding an initial SECRET_KEY"}),"\n",(0,t.jsxs)(n.p,{children:["Superset requires a user-specified SECRET_KEY to start up. This requirement was ",(0,t.jsx)(n.a,{href:"https://preset.io/blog/superset-security-update-default-secret_key-vulnerability/",children:"added in version 2.1.0 to force secure configurations"}),". Add a strong SECRET_KEY to your ",(0,t.jsx)(n.code,{children:"superset_config.py"})," file like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"SECRET_KEY = 'YOUR_OWN_RANDOM_GENERATED_SECRET_KEY'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can generate a strong secure key with ",(0,t.jsx)(n.code,{children:"openssl rand -base64 42"}),"."]}),"\n",(0,t.jsx)(n.admonition,{title:"Use a strong secret key",type:"caution",children:(0,t.jsx)(n.p,{children:"This key will be used for securely signing session cookies and encrypting sensitive information stored in Superset's application metadata database.\nYour deployment must use a complex, unique key."})}),"\n",(0,t.jsx)(n.h3,{id:"rotating-to-a-newer-secret_key",children:"Rotating to a newer SECRET_KEY"}),"\n",(0,t.jsxs)(n.p,{children:["If you wish to change your existing SECRET_KEY, add the existing SECRET_KEY to your ",(0,t.jsx)(n.code,{children:"superset_config.py"})," file as\n",(0,t.jsx)(n.code,{children:"PREVIOUS_SECRET_KEY = "}),"and provide your new key as ",(0,t.jsx)(n.code,{children:"SECRET_KEY ="}),". You can find your current SECRET_KEY with these\ncommands - if running Superset with Docker, execute from within the Superset application container:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'superset shell\nfrom flask import current_app; print(current_app.config["SECRET_KEY"])\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Save your ",(0,t.jsx)(n.code,{children:"superset_config.py"})," with these values and then run ",(0,t.jsx)(n.code,{children:"superset re-encrypt-secrets"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-a-production-metadata-database",children:"Setting up a production metadata database"}),"\n",(0,t.jsx)(n.p,{children:"Superset needs a database to store the information it manages, like the definitions of\ncharts, dashboards, and many other things."}),"\n",(0,t.jsxs)(n.p,{children:["By default, Superset is configured to use ",(0,t.jsx)(n.a,{href:"https://www.sqlite.org/",children:"SQLite"}),",\na self-contained, single-file database that offers a simple and fast way to get started\n(without requiring any installation). However, for production environments,\nusing SQLite is highly discouraged due to security, scalability, and data integrity reasons.\nIt's important to use only the supported database engines and consider using a different\ndatabase engine on a separate host or container."]}),"\n",(0,t.jsx)(n.p,{children:"Superset supports the following database engines/versions:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Database Engine"}),(0,t.jsx)(n.th,{children:"Supported Versions"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://www.postgresql.org/",children:"PostgreSQL"})}),(0,t.jsx)(n.td,{children:"10.X, 11.X, 12.X, 13.X, 14.X, 15.X"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://www.mysql.com/",children:"MySQL"})}),(0,t.jsx)(n.td,{children:"5.7, 8.X"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Use the following database drivers and connection strings:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Database"}),(0,t.jsx)(n.th,{children:"PyPI package"}),(0,t.jsx)(n.th,{children:"Connection String"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://www.postgresql.org/",children:"PostgreSQL"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pip install psycopg2"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"postgresql://<UserName>:<DBPassword>@<Database Host>/<Database Name>"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://www.mysql.com/",children:"MySQL"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pip install mysqlclient"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mysql://<UserName>:<DBPassword>@<Database Host>/<Database Name>"})})]})]})]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Properly setting up metadata store is beyond the scope of this documentation. We recommend\nusing a hosted managed service such as ",(0,t.jsx)(n.a,{href:"https://aws.amazon.com/rds/",children:"Amazon RDS"})," or\n",(0,t.jsx)(n.a,{href:"https://cloud.google.com/products/databases?hl=en",children:"Google Cloud Databases"})," to handle\nservice and supporting infrastructure and backup strategy."]})}),"\n",(0,t.jsxs)(n.p,{children:["To configure Superset metastore set ",(0,t.jsx)(n.code,{children:"SQLALCHEMY_DATABASE_URI"})," config key on ",(0,t.jsx)(n.code,{children:"superset_config"}),"\nto the appropriate connection string."]}),"\n",(0,t.jsx)(n.h2,{id:"running-on-a-wsgi-http-server",children:"Running on a WSGI HTTP Server"}),"\n",(0,t.jsx)(n.p,{children:"While you can run Superset on NGINX or Apache, we recommend using Gunicorn in async mode. This\nenables impressive concurrency even and is fairly easy to install and configure. Please refer to the\ndocumentation of your preferred technology to set up this Flask WSGI application in a way that works\nwell in your environment. Here\u2019s an async setup known to work well in production:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'      -w 10 \\\n      -k gevent \\\n      --worker-connections 1000 \\\n      --timeout 120 \\\n      -b  0.0.0.0:6666 \\\n      --limit-request-line 0 \\\n      --limit-request-field_size 0 \\\n      --statsd-host localhost:8125 \\\n      "superset.app:create_app()"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Refer to the ",(0,t.jsx)(n.a,{href:"https://docs.gunicorn.org/en/stable/design.html",children:"Gunicorn documentation"})," for more\ninformation. ",(0,t.jsxs)(n.em,{children:["Note that the development web server (",(0,t.jsx)(n.code,{children:"superset run"})," or ",(0,t.jsx)(n.code,{children:"flask run"}),") is not intended\nfor production use."]})]}),"\n",(0,t.jsxs)(n.p,{children:["If you're not using Gunicorn, you may want to disable the use of ",(0,t.jsx)(n.code,{children:"flask-compress"})," by setting\n",(0,t.jsx)(n.code,{children:"COMPRESS_REGISTER = False"})," in your ",(0,t.jsx)(n.code,{children:"superset_config.py"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Currently, the Google BigQuery Python SDK is not compatible with ",(0,t.jsx)(n.code,{children:"gevent"}),", due to some dynamic monkeypatching on python core library by ",(0,t.jsx)(n.code,{children:"gevent"}),".\nSo, when you use ",(0,t.jsx)(n.code,{children:"BigQuery"})," datasource on Superset, you have to use ",(0,t.jsx)(n.code,{children:"gunicorn"})," worker type except ",(0,t.jsx)(n.code,{children:"gevent"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"https-configuration",children:"HTTPS Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["You can configure HTTPS upstream via a load balancer or a reverse proxy (such as nginx) and do SSL/TLS Offloading before traffic reaches the Superset application. In this setup, local traffic from a Celery worker taking a snapshot of a chart for Alerts & Reports can access Superset at a ",(0,t.jsx)(n.code,{children:"http://"})," URL, from behind the ingress point.\nYou can also configure ",(0,t.jsx)(n.a,{href:"https://docs.gunicorn.org/en/stable/settings.html#ssl",children:"SSL in Gunicorn"})," (the Python webserver) if you are using an official Superset Docker image."]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-behind-a-load-balancer",children:"Configuration Behind a Load Balancer"}),"\n",(0,t.jsxs)(n.p,{children:["If you are running superset behind a load balancer or reverse proxy (e.g. NGINX or ELB on AWS), you\nmay need to utilize a healthcheck endpoint so that your load balancer knows if your superset\ninstance is running. This is provided at ",(0,t.jsx)(n.code,{children:"/health"})," which will return a 200 response containing \u201cOK\u201d\nif the webserver is running."]}),"\n",(0,t.jsxs)(n.p,{children:["If the load balancer is inserting ",(0,t.jsx)(n.code,{children:"X-Forwarded-For/X-Forwarded-Proto"})," headers, you should set\n",(0,t.jsx)(n.code,{children:"ENABLE_PROXY_FIX = True"})," in the superset config file (",(0,t.jsx)(n.code,{children:"superset_config.py"}),") to extract and use the\nheaders."]}),"\n",(0,t.jsxs)(n.p,{children:["In case the reverse proxy is used for providing SSL encryption, an explicit definition of the\n",(0,t.jsx)(n.code,{children:"X-Forwarded-Proto"})," may be required. For the Apache webserver this can be set as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'RequestHeader set X-Forwarded-Proto "https"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"custom-oauth2-configuration",children:"Custom OAuth2 Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Superset is built on Flask-AppBuilder (FAB), which supports many providers out of the box\n(GitHub, Twitter, LinkedIn, Google, Azure, etc). Beyond those, Superset can be configured to connect\nwith other OAuth2 Authorization Server implementations that support \u201ccode\u201d authorization."}),"\n",(0,t.jsxs)(n.p,{children:["Make sure the pip package ",(0,t.jsx)(n.a,{href:"https://authlib.org/",children:(0,t.jsx)(n.code,{children:"Authlib"})})," is installed on the webserver."]}),"\n",(0,t.jsxs)(n.p,{children:["First, configure authorization in Superset ",(0,t.jsx)(n.code,{children:"superset_config.py"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask_appbuilder.security.manager import AUTH_OAUTH\n\n# Set the authentication type to OAuth\nAUTH_TYPE = AUTH_OAUTH\n\nOAUTH_PROVIDERS = [\n    {   'name':'egaSSO',\n        'token_key':'access_token', # Name of the token in the response of access_token_url\n        'icon':'fa-address-card',   # Icon for the provider\n        'remote_app': {\n            'client_id':'myClientId',  # Client Id (Identify Superset application)\n            'client_secret':'MySecret', # Secret for this Client Id (Identify Superset application)\n            'client_kwargs':{\n                'scope': 'read'               # Scope for the Authorization\n            },\n            'access_token_method':'POST',    # HTTP Method to call access_token_url\n            'access_token_params':{        # Additional parameters for calls to access_token_url\n                'client_id':'myClientId'\n            },\n            'jwks_uri':'https://myAuthorizationServe/adfs/discovery/keys', # may be required to generate token\n            'access_token_headers':{    # Additional headers for calls to access_token_url\n                'Authorization': 'Basic Base64EncodedClientIdAndSecret'\n            },\n            'api_base_url':'https://myAuthorizationServer/oauth2AuthorizationServer/',\n            'access_token_url':'https://myAuthorizationServer/oauth2AuthorizationServer/token',\n            'authorize_url':'https://myAuthorizationServer/oauth2AuthorizationServer/authorize'\n        }\n    }\n]\n\n# Will allow user self registration, allowing to create Flask users from Authorized User\nAUTH_USER_REGISTRATION = True\n\n# The default user self registration role\nAUTH_USER_REGISTRATION_ROLE = \"Public\"\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then, create a ",(0,t.jsx)(n.code,{children:"CustomSsoSecurityManager"})," that extends ",(0,t.jsx)(n.code,{children:"SupersetSecurityManager"})," and overrides\n",(0,t.jsx)(n.code,{children:"oauth_user_info"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import logging\nfrom superset.security import SupersetSecurityManager\n\nclass CustomSsoSecurityManager(SupersetSecurityManager):\n\n    def oauth_user_info(self, provider, response=None):\n        logging.debug(\"Oauth2 provider: {0}.\".format(provider))\n        if provider == 'egaSSO':\n            # As example, this line request a GET to base_url + '/' + userDetails with Bearer  Authentication,\n    # and expects that authorization server checks the token, and response with user details\n            me = self.appbuilder.sm.oauth_remotes[provider].get('userDetails').data\n            logging.debug(\"user_data: {0}\".format(me))\n            return { 'name' : me['name'], 'email' : me['email'], 'id' : me['user_name'], 'username' : me['user_name'], 'first_name':'', 'last_name':''}\n    ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This file must be located at the same directory than ",(0,t.jsx)(n.code,{children:"superset_config.py"})," with the name\n",(0,t.jsx)(n.code,{children:"custom_sso_security_manager.py"}),". Finally, add the following 2 lines to ",(0,t.jsx)(n.code,{children:"superset_config.py"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"from custom_sso_security_manager import CustomSsoSecurityManager\nCUSTOM_SECURITY_MANAGER = CustomSsoSecurityManager\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Notes"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The redirect URL will be ",(0,t.jsx)(n.code,{children:"https://<superset-webserver>/oauth-authorized/<provider-name>"}),"\nWhen configuring an OAuth2 authorization provider if needed. For instance, the redirect URL will\nbe ",(0,t.jsx)(n.code,{children:"https://<superset-webserver>/oauth-authorized/egaSSO"})," for the above configuration."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If an OAuth2 authorization server supports OpenID Connect 1.0, you could configure its configuration\ndocument URL only without providing ",(0,t.jsx)(n.code,{children:"api_base_url"}),", ",(0,t.jsx)(n.code,{children:"access_token_url"}),", ",(0,t.jsx)(n.code,{children:"authorize_url"})," and other\nrequired options like user info endpoint, jwks uri etc. For instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"OAUTH_PROVIDERS = [\n  {   'name':'egaSSO',\n      'token_key':'access_token', # Name of the token in the response of access_token_url\n      'icon':'fa-address-card',   # Icon for the provider\n      'remote_app': {\n          'client_id':'myClientId',  # Client Id (Identify Superset application)\n          'client_secret':'MySecret', # Secret for this Client Id (Identify Superset application)\n          'server_metadata_url': 'https://myAuthorizationServer/.well-known/openid-configuration'\n      }\n  }\n]\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"keycloak-specific-configuration-using-flask-oidc",children:"Keycloak-Specific Configuration using Flask-OIDC"}),"\n",(0,t.jsxs)(n.p,{children:["If you are using Keycloak as OpenID Connect 1.0 Provider, the above configuration based on ",(0,t.jsx)(n.a,{href:"https://authlib.org/",children:(0,t.jsx)(n.code,{children:"Authlib"})})," might not work. In this case using ",(0,t.jsx)(n.a,{href:"https://pypi.org/project/flask-oidc/",children:(0,t.jsx)(n.code,{children:"Flask-OIDC"})})," is a viable option."]}),"\n",(0,t.jsxs)(n.p,{children:["Make sure the pip package ",(0,t.jsx)(n.a,{href:"https://pypi.org/project/flask-oidc/",children:(0,t.jsx)(n.code,{children:"Flask-OIDC"})})," is installed on the webserver. This was succesfully tested using version 2.2.0. This package requires ",(0,t.jsx)(n.a,{href:"https://pypi.org/project/Flask-OpenID/",children:(0,t.jsx)(n.code,{children:"Flask-OpenID"})})," as a dependency."]}),"\n",(0,t.jsxs)(n.p,{children:["The following code defines a new security manager.  Add it to a new file named ",(0,t.jsx)(n.code,{children:"keycloak_security_manager.py"}),", placed in the same directory as your ",(0,t.jsx)(n.code,{children:"superset_config.py"})," file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask_appbuilder.security.manager import AUTH_OID\nfrom superset.security import SupersetSecurityManager\nfrom flask_oidc import OpenIDConnect\nfrom flask_appbuilder.security.views import AuthOIDView\nfrom flask_login import login_user\nfrom urllib.parse import quote\nfrom flask_appbuilder.views import ModelView, SimpleFormView, expose\nfrom flask import (\n    redirect,\n    request\n)\nimport logging\n\nclass OIDCSecurityManager(SupersetSecurityManager):\n\n    def __init__(self, appbuilder):\n        super(OIDCSecurityManager, self).__init__(appbuilder)\n        if self.auth_type == AUTH_OID:\n            self.oid = OpenIDConnect(self.appbuilder.get_app)\n        self.authoidview = AuthOIDCView\n\nclass AuthOIDCView(AuthOIDView):\n\n    @expose('/login/', methods=['GET', 'POST'])\n    def login(self, flag=True):\n        sm = self.appbuilder.sm\n        oidc = sm.oid\n\n        @self.appbuilder.sm.oid.require_login\n        def handle_login():\n            user = sm.auth_user_oid(oidc.user_getfield('email'))\n\n            if user is None:\n                info = oidc.user_getinfo(['preferred_username', 'given_name', 'family_name', 'email'])\n                user = sm.add_user(info.get('preferred_username'), info.get('given_name'), info.get('family_name'),\n                                   info.get('email'), sm.find_role('Gamma'))\n\n            login_user(user, remember=False)\n            return redirect(self.appbuilder.get_url_for_index)\n\n        return handle_login()\n\n    @expose('/logout/', methods=['GET', 'POST'])\n    def logout(self):\n        oidc = self.appbuilder.sm.oid\n\n        oidc.logout()\n        super(AuthOIDCView, self).logout()\n        redirect_url = request.url_root.strip('/') + self.appbuilder.get_url_for_login\n\n        return redirect(\n            oidc.client_secrets.get('issuer') + '/protocol/openid-connect/logout?redirect_uri=' + quote(redirect_url))\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then add to your ",(0,t.jsx)(n.code,{children:"superset_config.py"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from keycloak_security_manager import OIDCSecurityManager\nfrom flask_appbuilder.security.manager import AUTH_OID, AUTH_REMOTE_USER, AUTH_DB, AUTH_LDAP, AUTH_OAUTH\nimport os\n\nAUTH_TYPE = AUTH_OID\nSECRET_KEY: 'SomethingNotEntirelySecret'\nOIDC_CLIENT_SECRETS =  '/path/to/client_secret.json'\nOIDC_ID_TOKEN_COOKIE_SECURE = False\nOIDC_OPENID_REALM: '<myRealm>'\nOIDC_INTROSPECTION_AUTH_METHOD: 'client_secret_post'\nCUSTOM_SECURITY_MANAGER = OIDCSecurityManager\n\n# Will allow user self registration, allowing to create Flask users from Authorized User\nAUTH_USER_REGISTRATION = True\n\n# The default user self registration role\nAUTH_USER_REGISTRATION_ROLE = 'Public'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Store your client-specific OpenID information in a file called ",(0,t.jsx)(n.code,{children:"client_secret.json"}),". Create this file in the same directory as ",(0,t.jsx)(n.code,{children:"superset_config.py"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "<myOpenIDProvider>": {\n        "issuer": "https://<myKeycloakDomain>/realms/<myRealm>",\n        "auth_uri": "https://<myKeycloakDomain>/realms/<myRealm>/protocol/openid-connect/auth",\n        "client_id": "https://<myKeycloakDomain>",\n        "client_secret": "<myClientSecret>",\n        "redirect_uris": [\n            "https://<SupersetWebserver>/oauth-authorized/<myOpenIDProvider>"\n  ],\n        "userinfo_uri": "https://<myKeycloakDomain>/realms/<myRealm>/protocol/openid-connect/userinfo",\n        "token_uri": "https://<myKeycloakDomain>/realms/<myRealm>/protocol/openid-connect/token",\n        "token_introspection_uri": "https://<myKeycloakDomain>/realms/<myRealm>/protocol/openid-connect/token/introspect"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"ldap-authentication",children:"LDAP Authentication"}),"\n",(0,t.jsxs)(n.p,{children:["FAB supports authenticating user credentials against an LDAP server.\nTo use LDAP you must install the ",(0,t.jsx)(n.a,{href:"https://www.python-ldap.org/en/latest/installing.html",children:"python-ldap"})," package.\nSee ",(0,t.jsx)(n.a,{href:"https://flask-appbuilder.readthedocs.io/en/latest/security.html#authentication-ldap",children:"FAB's LDAP documentation"}),"\nfor details."]}),"\n",(0,t.jsx)(n.h2,{id:"mapping-ldap-or-oauth-groups-to-superset-roles",children:"Mapping LDAP or OAUTH groups to Superset roles"}),"\n",(0,t.jsx)(n.p,{children:"AUTH_ROLES_MAPPING in Flask-AppBuilder is a dictionary that maps from LDAP/OAUTH group names to FAB roles.\nIt is used to assign roles to users who authenticate using LDAP or OAuth."}),"\n",(0,t.jsx)(n.h3,{id:"mapping-oauth-groups-to-superset-roles",children:"Mapping OAUTH groups to Superset roles"}),"\n",(0,t.jsxs)(n.p,{children:["The following ",(0,t.jsx)(n.code,{children:"AUTH_ROLES_MAPPING"}),' dictionary would map the OAUTH group "superset_users" to the Superset roles "Gamma" as well as "Alpha", and the OAUTH group "superset_admins" to the Superset role "Admin".']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'AUTH_ROLES_MAPPING = {\n"superset_users": ["Gamma","Alpha"],\n"superset_admins": ["Admin"],\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"mapping-ldap-groups-to-superset-roles",children:"Mapping LDAP groups to Superset roles"}),"\n",(0,t.jsxs)(n.p,{children:["The following ",(0,t.jsx)(n.code,{children:"AUTH_ROLES_MAPPING"}),' dictionary would map the LDAP DN "cn=superset_users,ou=groups,dc=example,dc=com" to the Superset roles "Gamma" as well as "Alpha", and the LDAP DN "cn=superset_admins,ou=groups,dc=example,dc=com" to the Superset role "Admin".']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'AUTH_ROLES_MAPPING = {\n"cn=superset_users,ou=groups,dc=example,dc=com": ["Gamma","Alpha"],\n"cn=superset_admins,ou=groups,dc=example,dc=com": ["Admin"],\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Note: This requires ",(0,t.jsx)(n.code,{children:"AUTH_LDAP_SEARCH"})," to be set. For more details, please see the ",(0,t.jsx)(n.a,{href:"https://flask-appbuilder.readthedocs.io/en/latest/security.html",children:"FAB Security documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"syncing-roles-at-login",children:"Syncing roles at login"}),"\n",(0,t.jsxs)(n.p,{children:["You can also use the ",(0,t.jsx)(n.code,{children:"AUTH_ROLES_SYNC_AT_LOGIN"})," configuration variable to control how often Flask-AppBuilder syncs the user's roles with the LDAP/OAUTH groups. If ",(0,t.jsx)(n.code,{children:"AUTH_ROLES_SYNC_AT_LOGIN"})," is set to True, Flask-AppBuilder will sync the user's roles each time they log in. If ",(0,t.jsx)(n.code,{children:"AUTH_ROLES_SYNC_AT_LOGIN"})," is set to False, Flask-AppBuilder will only sync the user's roles when they first register."]}),"\n",(0,t.jsx)(n.h2,{id:"flask-app-configuration-hook",children:"Flask app Configuration Hook"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"FLASK_APP_MUTATOR"})," is a configuration function that can be provided in your environment, receives\nthe app object and can alter it in any way. For example, add ",(0,t.jsx)(n.code,{children:"FLASK_APP_MUTATOR"})," into your\n",(0,t.jsx)(n.code,{children:"superset_config.py"})," to setup session cookie expiration time to 24 hours:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask import session\nfrom flask import Flask\n\n\ndef make_session_permanent():\n    '''\n    Enable maxAge for the cookie 'session'\n    '''\n    session.permanent = True\n\n# Set up max age of session to 24 hours\nPERMANENT_SESSION_LIFETIME = timedelta(hours=24)\ndef FLASK_APP_MUTATOR(app: Flask) -> None:\n    app.before_request_funcs.setdefault(None, []).append(make_session_permanent)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"feature-flags",children:"Feature Flags"}),"\n",(0,t.jsx)(n.p,{children:"To support a diverse set of users, Superset has some features that are not enabled by default. For\nexample, some users have stronger security restrictions, while some others may not. So Superset\nallow users to enable or disable some features by config. For feature owners, you can add optional\nfunctionalities in Superset, but will be only affected by a subset of users."}),"\n",(0,t.jsxs)(n.p,{children:["You can enable or disable features with flag from ",(0,t.jsx)(n.code,{children:"superset_config.py"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"FEATURE_FLAGS = {\n    'PRESTO_EXPAND_DATA': False,\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A current list of feature flags can be found in ",(0,t.jsx)(n.a,{href:"https://github.com/apache/superset/blob/master/RESOURCES/FEATURE_FLAGS.md",children:"RESOURCES/FEATURE_FLAGS.md"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);