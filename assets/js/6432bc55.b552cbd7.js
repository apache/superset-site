"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[4003],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=s(t),d=r,m=h["".concat(c,".").concat(d)]||h[d]||p[d]||i;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=h;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},48193:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return h}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),o=["components"],l={title:"Caching",hide_title:!0,sidebar_position:5,version:1},c=void 0,s={unversionedId:"installation/cache",id:"installation/cache",title:"Caching",description:"Caching",source:"@site/docs/installation/cache.mdx",sourceDirName:"installation",slug:"/installation/cache",permalink:"/docs/installation/cache",editUrl:"https://github.com/apache/superset/tree/master/docs/docs/installation/cache.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Caching",hide_title:!0,sidebar_position:5,version:1},sidebar:"tutorialSidebar",previous:{title:"Additional Networking Settings",permalink:"/docs/installation/networking-settings"},next:{title:"Event Logging",permalink:"/docs/installation/event-logging"}},u=[{value:"Caching",id:"caching",children:[],level:2},{value:"Celery beat",id:"celery-beat",children:[{value:"Caching Thumbnails",id:"caching-thumbnails",children:[],level:3}],level:2}],p={toc:u};function h(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"caching"},"Caching"),(0,i.kt)("p",null,"Superset uses ",(0,i.kt)("a",{parentName:"p",href:"https://flask-caching.readthedocs.io/"},"Flask-Caching")," for caching purpose. Configuring caching is as easy as providing a custom cache config in your\n",(0,i.kt)("inlineCode",{parentName:"p"},"superset_config.py")," that complies with ",(0,i.kt)("a",{parentName:"p",href:"https://flask-caching.readthedocs.io/en/latest/#configuring-flask-caching"},"the Flask-Caching specifications"),".\nFlask-Caching supports various caching backends, including Redis, Memcached, SimpleCache (in-memory), or the\nlocal filesystem. Custom cache backends are also supported. See ",(0,i.kt)("a",{parentName:"p",href:"https://flask-caching.readthedocs.io/en/latest/#custom-cache-backends"},"here")," for specifics.\nThe following cache configurations can be customized:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Metadata cache (optional): ",(0,i.kt)("inlineCode",{parentName:"li"},"CACHE_CONFIG")),(0,i.kt)("li",{parentName:"ul"},"Charting data queried from datasets (optional): ",(0,i.kt)("inlineCode",{parentName:"li"},"DATA_CACHE_CONFIG")),(0,i.kt)("li",{parentName:"ul"},"SQL Lab query results (optional): ",(0,i.kt)("inlineCode",{parentName:"li"},"RESULTS_BACKEND"),". See ",(0,i.kt)("a",{parentName:"li",href:"/docs/installation/async-queries-celery"},"Async Queries via Celery")," for details"),(0,i.kt)("li",{parentName:"ul"},"Dashboard filter state (required): ",(0,i.kt)("inlineCode",{parentName:"li"},"FILTER_STATE_CACHE_CONFIG"),"."),(0,i.kt)("li",{parentName:"ul"},"Explore chart form data (required): ",(0,i.kt)("inlineCode",{parentName:"li"},"EXPLORE_FORM_DATA_CACHE_CONFIG"))),(0,i.kt)("p",null,"Please note, that Dashboard and Explore caching is required. When running Superset in debug mode, both Explore and Dashboard caches will default to ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleCache"),";\nHowever, trying to run Superset in non-debug mode without defining a cache for these will cause the application to fail on startup. When running\nsuperset in single-worker mode, any cache backend is supported. However, when running Superset in on a multi-worker setup, a dedicated cache is required. For this\nwe recommend using either Redis or Memcached:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Redis (recommended): we recommend the ",(0,i.kt)("a",{parentName:"li",href:"https://pypi.python.org/pypi/redis"},"redis")," Python package"),(0,i.kt)("li",{parentName:"ul"},"Memcached: we recommend using ",(0,i.kt)("a",{parentName:"li",href:"https://pypi.org/project/pylibmc/"},"pylibmc")," client library as\n",(0,i.kt)("inlineCode",{parentName:"li"},"python-memcached")," does not handle storing binary data correctly.")),(0,i.kt)("p",null,"Both of these libraries can be installed using pip."),(0,i.kt)("p",null,"For chart data, Superset goes up a \u201ctimeout search path\u201d, from a slice's configuration\nto the datasource\u2019s, the database\u2019s, then ultimately falls back to the global default\ndefined in ",(0,i.kt)("inlineCode",{parentName:"p"},"DATA_CACHE_CONFIG"),"."),(0,i.kt)("h2",{id:"celery-beat"},"Celery beat"),(0,i.kt)("p",null,"Superset has a Celery task that will periodically warm up the cache based on different strategies.\nTo use it, add the following to the ",(0,i.kt)("inlineCode",{parentName:"p"},"CELERYBEAT_SCHEDULE")," section in ",(0,i.kt)("inlineCode",{parentName:"p"},"config.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"CELERYBEAT_SCHEDULE = {\n    'cache-warmup-hourly': {\n        'task': 'cache-warmup',\n        'schedule': crontab(minute=0, hour='*'),  # hourly\n        'kwargs': {\n            'strategy_name': 'top_n_dashboards',\n            'top_n': 5,\n            'since': '7 days ago',\n        },\n    },\n}\n")),(0,i.kt)("p",null,"This will cache all the charts in the top 5 most popular dashboards every hour. For other\nstrategies, check the ",(0,i.kt)("inlineCode",{parentName:"p"},"superset/tasks/cache.py")," file."),(0,i.kt)("h3",{id:"caching-thumbnails"},"Caching Thumbnails"),(0,i.kt)("p",null,"This is an optional feature that can be turned on by activating it\u2019s feature flag on config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'FEATURE_FLAGS = {\n    "THUMBNAILS": True,\n    "THUMBNAILS_SQLA_LISTENERS": True,\n}\n')),(0,i.kt)("p",null,"For this feature you will need a cache system and celery workers. All thumbnails are stored on cache\nand are processed asynchronously by the workers."),(0,i.kt)("p",null,"An example config where images are stored on S3 could be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from flask import Flask\nfrom s3cache.s3cache import S3Cache\n\n...\n\nclass CeleryConfig(object):\n    BROKER_URL = "redis://localhost:6379/0"\n    CELERY_IMPORTS = ("superset.sql_lab", "superset.tasks", "superset.tasks.thumbnails")\n    CELERY_RESULT_BACKEND = "redis://localhost:6379/0"\n    CELERYD_PREFETCH_MULTIPLIER = 10\n    CELERY_ACKS_LATE = True\n\n\nCELERY_CONFIG = CeleryConfig\n\ndef init_thumbnail_cache(app: Flask) -> S3Cache:\n    return S3Cache("bucket_name", \'thumbs_cache/\')\n\n\nTHUMBNAIL_CACHE_CONFIG = init_thumbnail_cache\n# Async selenium thumbnail task will use the following user\nTHUMBNAIL_SELENIUM_USER = "Admin"\n')),(0,i.kt)("p",null,"Using the above example cache keys for dashboards will be ",(0,i.kt)("inlineCode",{parentName:"p"},"superset_thumb__dashboard__{ID}"),". You can\noverride the base URL for selenium using:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'WEBDRIVER_BASEURL = "https://superset.company.com"\n')),(0,i.kt)("p",null,"Additional selenium web drive configuration can be set using ",(0,i.kt)("inlineCode",{parentName:"p"},"WEBDRIVER_CONFIGURATION"),". You can\nimplement a custom function to authenticate selenium. The default function uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"flask-login"),"\nsession cookie. Here's an example of a custom function signature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def auth_driver(driver: WebDriver, user: "User") -> WebDriver:\n    pass\n')),(0,i.kt)("p",null,"Then on configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"WEBDRIVER_AUTH_FUNC = auth_driver\n")))}h.isMDXComponent=!0}}]);