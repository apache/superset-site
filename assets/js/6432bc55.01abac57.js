"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[4003],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(t),d=r,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||i;return t?a.createElement(m,o(o({ref:n},p),{},{components:t})):a.createElement(m,o({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},48193:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return h}});var a=t(83117),r=t(80102),i=(t(67294),t(3905)),o=["components"],s={title:"Caching",hide_title:!0,sidebar_position:5,version:1},l=void 0,c={unversionedId:"installation/cache",id:"installation/cache",title:"Caching",description:"Caching",source:"@site/docs/installation/cache.mdx",sourceDirName:"installation",slug:"/installation/cache",permalink:"/docs/installation/cache",editUrl:"https://github.com/apache/superset/tree/master/docs/docs/installation/cache.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Caching",hide_title:!0,sidebar_position:5,version:1},sidebar:"tutorialSidebar",previous:{title:"Additional Networking Settings",permalink:"/docs/installation/networking-settings"},next:{title:"Event Logging",permalink:"/docs/installation/event-logging"}},p=[{value:"Caching",id:"caching",children:[{value:"Caching Thumbnails",id:"caching-thumbnails",children:[],level:3}],level:2}],u={toc:p};function h(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"caching"},"Caching"),(0,i.kt)("p",null,"Superset uses ",(0,i.kt)("a",{parentName:"p",href:"https://flask-caching.readthedocs.io/"},"Flask-Caching")," for caching purpose. For security reasons,\nthere are two separate cache configs for Superset's own metadata (",(0,i.kt)("inlineCode",{parentName:"p"},"CACHE_CONFIG"),") and charting data queried from\nconnected datasources (",(0,i.kt)("inlineCode",{parentName:"p"},"DATA_CACHE_CONFIG"),"). However, Query results from SQL Lab are stored in another backend\ncalled ",(0,i.kt)("inlineCode",{parentName:"p"},"RESULTS_BACKEND"),", See ",(0,i.kt)("a",{parentName:"p",href:"/docs/installation/async-queries-celery"},"Async Queries via Celery")," for details."),(0,i.kt)("p",null,"Configuring caching is as easy as providing ",(0,i.kt)("inlineCode",{parentName:"p"},"CACHE_CONFIG")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DATA_CACHE_CONFIG")," in your\n",(0,i.kt)("inlineCode",{parentName:"p"},"superset_config.py")," that complies with ",(0,i.kt)("a",{parentName:"p",href:"https://flask-caching.readthedocs.io/en/latest/#configuring-flask-caching"},"the Flask-Caching specifications"),"."),(0,i.kt)("p",null,"Flask-Caching supports various caching backends, including Redis, Memcached, SimpleCache (in-memory), or the\nlocal filesystem."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Memcached: we recommend using ",(0,i.kt)("a",{parentName:"li",href:"https://pypi.org/project/pylibmc/"},"pylibmc")," client library as\n",(0,i.kt)("inlineCode",{parentName:"li"},"python-memcached")," does not handle storing binary data correctly."),(0,i.kt)("li",{parentName:"ul"},"Redis: we recommend the ",(0,i.kt)("a",{parentName:"li",href:"https://pypi.python.org/pypi/redis"},"redis")," Python package")),(0,i.kt)("p",null,"Both of these libraries can be installed using pip."),(0,i.kt)("p",null,"For chart data, Superset goes up a \u201ctimeout search path\u201d, from a slice's configuration\nto the datasource\u2019s, the database\u2019s, then ultimately falls back to the global default\ndefined in ",(0,i.kt)("inlineCode",{parentName:"p"},"DATA_CACHE_CONFIG"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"DATA_CACHE_CONFIG = {\n    'CACHE_TYPE': 'redis',\n    'CACHE_DEFAULT_TIMEOUT': 60 * 60 * 24, # 1 day default (in secs)\n    'CACHE_KEY_PREFIX': 'superset_results',\n    'CACHE_REDIS_URL': 'redis://localhost:6379/0',\n}\n")),(0,i.kt)("p",null,"Custom cache backends are also supported. See ",(0,i.kt)("a",{parentName:"p",href:"https://flask-caching.readthedocs.io/en/latest/#custom-cache-backends"},"here")," for specifics."),(0,i.kt)("p",null,"Superset has a Celery task that will periodically warm up the cache based on different strategies.\nTo use it, add the following to the ",(0,i.kt)("inlineCode",{parentName:"p"},"CELERYBEAT_SCHEDULE")," section in ",(0,i.kt)("inlineCode",{parentName:"p"},"config.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"CELERYBEAT_SCHEDULE = {\n    'cache-warmup-hourly': {\n        'task': 'cache-warmup',\n        'schedule': crontab(minute=0, hour='*'),  # hourly\n        'kwargs': {\n            'strategy_name': 'top_n_dashboards',\n            'top_n': 5,\n            'since': '7 days ago',\n        },\n    },\n}\n")),(0,i.kt)("p",null,"This will cache all the charts in the top 5 most popular dashboards every hour. For other\nstrategies, check the ",(0,i.kt)("inlineCode",{parentName:"p"},"superset/tasks/cache.py")," file."),(0,i.kt)("h3",{id:"caching-thumbnails"},"Caching Thumbnails"),(0,i.kt)("p",null,"This is an optional feature that can be turned on by activating it\u2019s feature flag on config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'FEATURE_FLAGS = {\n    "THUMBNAILS": True,\n    "THUMBNAILS_SQLA_LISTENERS": True,\n}\n')),(0,i.kt)("p",null,"For this feature you will need a cache system and celery workers. All thumbnails are stored on cache\nand are processed asynchronously by the workers."),(0,i.kt)("p",null,"An example config where images are stored on S3 could be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from flask import Flask\nfrom s3cache.s3cache import S3Cache\n\n...\n\nclass CeleryConfig(object):\n    BROKER_URL = "redis://localhost:6379/0"\n    CELERY_IMPORTS = ("superset.sql_lab", "superset.tasks", "superset.tasks.thumbnails")\n    CELERY_RESULT_BACKEND = "redis://localhost:6379/0"\n    CELERYD_PREFETCH_MULTIPLIER = 10\n    CELERY_ACKS_LATE = True\n\n\nCELERY_CONFIG = CeleryConfig\n\ndef init_thumbnail_cache(app: Flask) -> S3Cache:\n    return S3Cache("bucket_name", \'thumbs_cache/\')\n\n\nTHUMBNAIL_CACHE_CONFIG = init_thumbnail_cache\n# Async selenium thumbnail task will use the following user\nTHUMBNAIL_SELENIUM_USER = "Admin"\n')),(0,i.kt)("p",null,"Using the above example cache keys for dashboards will be ",(0,i.kt)("inlineCode",{parentName:"p"},"superset_thumb__dashboard__{ID}"),". You can\noverride the base URL for selenium using:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'WEBDRIVER_BASEURL = "https://superset.company.com"\n')),(0,i.kt)("p",null,"Additional selenium web drive configuration can be set using ",(0,i.kt)("inlineCode",{parentName:"p"},"WEBDRIVER_CONFIGURATION"),". You can\nimplement a custom function to authenticate selenium. The default function uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"flask-login"),"\nsession cookie. Here's an example of a custom function signature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def auth_driver(driver: WebDriver, user: "User") -> WebDriver:\n    pass\n')),(0,i.kt)("p",null,"Then on configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"WEBDRIVER_AUTH_FUNC = auth_driver\n")))}h.isMDXComponent=!0}}]);