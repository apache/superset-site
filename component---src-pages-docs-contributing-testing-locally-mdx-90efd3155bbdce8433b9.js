(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{"7CRC":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return p})),n.d(t,"default",(function(){return l}));var a=n("k1TG"),s=n("8o2o"),r=(n("q1tI"),n("7ljp")),o=n("hhGP"),p=(n("qKvR"),{});void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/docs/Contributing/testing-locally.mdx"}});var c={_frontmatter:p},b=o.a;function l(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(r.b)(b,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"testing"},"Testing"),Object(r.b)("h3",{id:"python-testing"},"Python Testing"),Object(r.b)("p",null,"All python tests are carried out in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://tox.readthedocs.io/en/latest/index.html"}),"tox"),"\na standardized testing framework.\nAll python tests can be run with any of the tox ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://tox.readthedocs.io/en/latest/example/basic.html#a-simple-tox-ini-default-environments"}),"environments"),", via,"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"tox -e <environment>\n")),Object(r.b)("p",null,"For example,"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"tox -e py38\n")),Object(r.b)("p",null,"Alternatively, you can run all tests in a single file via,"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"tox -e <environment> -- tests/test_file.py\n")),Object(r.b)("p",null,"or for a specific test via,"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"tox -e <environment> -- tests/test_file.py::TestClassName::test_method_name\n")),Object(r.b)("p",null,"Note that the test environment uses a temporary directory for defining the\nSQLite databases which will be cleared each time before the group of test\ncommands are invoked."),Object(r.b)("p",null,"There is also a utility script included in the Superset codebase to run python integration tests. The ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/apache/superset/tree/master/scripts/tests"}),"readme can be\nfound here")),Object(r.b)("p",null,"To run all integration tests for example, run this script from the root directory:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"scripts/tests/run.sh\n")),Object(r.b)("p",null,"You can run unit tests found in './tests/unit_tests' for example with pytest. It is a simple way to run an isolated test that doesn't need any database setup"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"pytest ./link_to_test.py\n")),Object(r.b)("h3",{id:"frontend-testing"},"Frontend Testing"),Object(r.b)("p",null,"We use ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://jestjs.io/"}),"Jest")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://airbnb.io/enzyme/"}),"Enzyme")," to test TypeScript/JavaScript. Tests can be run with:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd superset-frontend\nnpm run test\n")),Object(r.b)("p",null,"To run a single test file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm run test -- path/to/file.js\n")),Object(r.b)("h3",{id:"integration-testing"},"Integration Testing"),Object(r.b)("p",null,"We use ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.cypress.io/"}),"Cypress")," for integration tests. Tests can be run by ",Object(r.b)("inlineCode",{parentName:"p"},"tox -e cypress"),". To open Cypress and explore tests first setup and run test server:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'export SUPERSET_CONFIG=tests.integration_tests.superset_test_config\nexport SUPERSET_TESTENV=true\nexport ENABLE_REACT_CRUD_VIEWS=true\nexport CYPRESS_BASE_URL="http://localhost:8081"\nsuperset db upgrade\nsuperset load_test_users\nsuperset load-examples --load-test-data\nsuperset init\nsuperset run --port 8081\n')),Object(r.b)("p",null,"Run Cypress tests:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'cd superset-frontend\nnpm run build-instrumented\n\ncd cypress-base\nnpm install\n\n# run tests via headless Chrome browser (requires Chrome 64+)\nnpm run cypress-run-chrome\n\n# run tests from a specific file\nnpm run cypress-run-chrome -- --spec cypress/integration/explore/link.test.ts\n\n# run specific file with video capture\nnpm run cypress-run-chrome -- --spec cypress/integration/dashboard/index.test.js --config video=true\n\n# to open the cypress ui\nnpm run cypress-debug\n\n# to point cypress to a url other than the default (http://localhost:8088) set the environment variable before running the script\n# e.g., CYPRESS_BASE_URL="http://localhost:9000"\nCYPRESS_BASE_URL=<your url> npm run cypress open\n')),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/apache/superset/blob/master/superset-frontend/cypress_build.sh"}),Object(r.b)("inlineCode",{parentName:"a"},"superset-frontend/cypress_build.sh")),"."),Object(r.b)("p",null,"As an alternative you can use docker-compose environment for testing:"),Object(r.b)("p",null,"Make sure you have added below line to your /etc/hosts file:\n",Object(r.b)("inlineCode",{parentName:"p"},"127.0.0.1 db")),Object(r.b)("p",null,"If you already have launched Docker environment please use the following command to assure a fresh database instance:\n",Object(r.b)("inlineCode",{parentName:"p"},"docker-compose down -v")),Object(r.b)("p",null,"Launch environment:"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"CYPRESS_CONFIG=true docker-compose up")),Object(r.b)("p",null,"It will serve backend and frontend on port 8088."),Object(r.b)("p",null,"Run Cypress tests:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd cypress-base\nnpm install\nnpm run cypress open\n")),Object(r.b)("h3",{id:"debugging-server-app"},"Debugging Server App"),Object(r.b)("p",null,"Follow these instructions to debug the Flask app running inside a docker container."),Object(r.b)("p",null,"First add the following to the ./docker-compose.yaml file"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),'superset:\n    env_file: docker/.env\n    image: *superset-image\n    container_name: superset_app\n    command: ["/app/docker/docker-bootstrap.sh", "app"]\n    restart: unless-stopped\n+   cap_add:\n+     - SYS_PTRACE\n    ports:\n      - 8088:8088\n+     - 5678:5678\n    user: "root"\n    depends_on: *superset-depends-on\n    volumes: *superset-volumes\n    environment:\n      CYPRESS_CONFIG: "${CYPRESS_CONFIG}"\n')),Object(r.b)("p",null,"Start Superset as usual"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"docker-compose up\n")),Object(r.b)("p",null,"Install the required libraries and packages to the docker container"),Object(r.b)("p",null,"Enter the superset_app container"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"docker exec -it superset_app /bin/bash\nroot@39ce8cf9d6ab:/app#\n")),Object(r.b)("p",null,"Run the following commands inside the container"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"apt update\napt install -y gdb\napt install -y net-tools\npip install debugpy\n")),Object(r.b)("p",null,"Find the PID for the Flask process. Make sure to use the first PID. The Flask app will re-spawn a sub-process every time you change any of the python code. So it's important to use the first PID."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"ps -ef\n\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 14:09 ?        00:00:00 bash /app/docker/docker-bootstrap.sh app\nroot         6     1  4 14:09 ?        00:00:04 /usr/local/bin/python /usr/bin/flask run -p 8088 --with-threads --reload --debugger --host=0.0.0.0\nroot        10     6  7 14:09 ?        00:00:07 /usr/local/bin/python /usr/bin/flask run -p 8088 --with-threads --reload --debugger --host=0.0.0.0\n")),Object(r.b)("p",null,"Inject debugpy into the running Flask process. In this case PID 6."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"python3 -m debugpy --listen 0.0.0.0:5678 --pid 6\n")),Object(r.b)("p",null,"Verify that debugpy is listening on port 5678"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"netstat -tunap\n\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:5678            0.0.0.0:*               LISTEN      462/python\ntcp        0      0 0.0.0.0:8088            0.0.0.0:*               LISTEN      6/python\n")),Object(r.b)("p",null,"You are now ready to attach a debugger to the process. Using VSCode you can configure a launch configuration file .vscode/launch.json like so."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "name": "Attach to Superset App in Docker Container",\n            "type": "python",\n            "request": "attach",\n            "connect": {\n                "host": "127.0.0.1",\n                "port": 5678\n            },\n            "pathMappings": [\n                {\n                    "localRoot": "${workspaceFolder}",\n                    "remoteRoot": "/app"\n                }\n            ]\n        },\n    ]\n}\n')),Object(r.b)("p",null,'VSCode will not stop on breakpoints right away. We\'ve attached to PID 6 however it does not yet know of any sub-processes. In order to "wakeup" the debugger you need to modify a python file. This will trigger Flask to reload the code and create a new sub-process. This new sub-process will be detected by VSCode and breakpoints will be activated.'),Object(r.b)("h3",{id:"debugging-server-app-in-kubernetes-environment"},"Debugging Server App in Kubernetes Environment"),Object(r.b)("p",null,"To debug Flask running in POD inside kubernetes cluster. You'll need to make sure the pod runs as root and is granted the SYS_TRACE capability.These settings should not be used in production environments."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'  securityContext:\n    capabilities:\n      add: ["SYS_PTRACE"]\n')),Object(r.b)("p",null,"See (set capabilities for a container)","[https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container]"," for more details."),Object(r.b)("p",null,"Once the pod is running as root and has the SYS_PTRACE capability it will be able to debug the Flask app."),Object(r.b)("p",null,"You can follow the same instructions as in the docker-compose. Enter the pod and install the required library and packages; gdb, netstat and debugpy."),Object(r.b)("p",null,"Often in a Kubernetes environment nodes are not addressable from outside the cluster. VSCode will thus be unable to remotely connect to port 5678 on a Kubernetes node. In order to do this you need to create a tunnel that port forwards 5678 to your local machine."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl port-forward  pod/superset-<some random id> 5678:5678\n")),Object(r.b)("p",null,"You can now launch your VSCode debugger with the same config as above. VSCode will connect to to 127.0.0.1:5678 which is forwarded by kubectl to your remote kubernetes POD."),Object(r.b)("h3",{id:"storybook"},"Storybook"),Object(r.b)("p",null,"Superset includes a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://storybook.js.org/"}),"Storybook")," to preview the layout/styling of various Superset components, and variations thereof. To open and view the Storybook:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd superset-frontend\nnpm run storybook\n")),Object(r.b)("p",null,"When contributing new React components to Superset, please try to add a Story alongside the component's ",Object(r.b)("inlineCode",{parentName:"p"},"jsx/tsx")," file."))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/docs/Contributing/testing-locally.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-docs-contributing-testing-locally-mdx-90efd3155bbdce8433b9.js.map