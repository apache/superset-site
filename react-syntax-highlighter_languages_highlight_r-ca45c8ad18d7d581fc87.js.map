{"version":3,"sources":["webpack:///./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/r.js"],"names":["source","re","concat","_len","arguments","length","args","Array","_key","joined","map","x","join","module","exports","hljs","IDENT_RE","name","illegal","keywords","$pattern","keyword","literal","built_in","compilerExtensions","mode","parent","beforeMatch","starts","Error","originalMode","Object","assign","keys","forEach","key","begin","relevance","contains","endsParent","COMMENT","className","end","excludeBegin","variants","HASH_COMMENT_MODE","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","match"],"mappings":"8EASA,SAASA,EAAOC,GACd,OAAKA,EACa,iBAAPA,EAAwBA,EAC5BA,EAAGD,OAFM,KAmBlB,SAASE,IACP,IAAK,IAAIC,EAAOC,UAAUC,OAAQC,EAAO,IAAIC,MAAMJ,GAAOK,EAAO,EAAGA,EAAOL,EAAMK,IAC/EF,EAAKE,GAAQJ,UAAUI,GAGzB,IAAIC,EAASH,EAAKI,KAAI,SAAUC,GAC9B,OAAOX,EAAOW,MACbC,KAAK,IACR,OAAOH,EAuKTI,EAAOC,QAzJP,SAAWC,GAOT,IAAIC,EAAW,uDAEf,MAAO,CACLC,KAAM,IAENC,QAAS,KACTC,SAAU,CACRC,SAAUJ,EACVK,QAAS,kDACTC,QAAS,wFACTC,SACA,khCAKFC,mBAAoB,CAEpB,SAAUC,EAAMC,GACd,GAAKD,EAAKE,YAAV,CAGA,GAAIF,EAAKG,OAAQ,MAAM,IAAIC,MAAM,0CACjC,IAAIC,EAAeC,OAAOC,OAAO,GAAIP,GACrCM,OAAOE,KAAKR,GAAMS,SAAQ,SAAUC,UAC3BV,EAAKU,MAEdV,EAAKW,MAAQlC,EAAO4B,EAAaH,YAhE9BzB,EAAO,MAgE8C4B,EAAaM,MAhEhD,MAiErBX,EAAKG,OAAS,CACZS,UAAW,EACXC,SAAU,CAACP,OAAOC,OAAOF,EAAc,CACrCS,YAAY,MAGhBd,EAAKY,UAAY,SACVP,EAAaH,eAEtBW,SAAU,CACVvB,EAAKyB,QAAQ,KAAM,IAAK,CACtBF,SAAU,CAAC,CAMTG,UAAW,SACXL,MAAO,YACPR,OAAQ,CACNU,SAAU,CAAC,CACTF,MAAO,MACN,CACDA,MAAO,sBACPG,YAAY,GACX,CACDH,MAAO,KACPM,IAAK,IACLC,cAAc,MAGjB,CAGDF,UAAW,SACXL,MAAO,SACPM,IAAK,IACLJ,SAAU,CAAC,CACTG,UAAW,WACXG,SAAU,CAAC,CACTR,MAAOpB,GACN,CACDoB,MAAO,sBAETG,YAAY,KAEb,CACDE,UAAW,SACXL,MAAO,cACN,CACDK,UAAW,eACXL,MAAO,kBAEPrB,EAAK8B,kBAAmB,CAC1BJ,UAAW,SACXH,SAAU,CAACvB,EAAK+B,kBAChBF,SAAU,CAAC7B,EAAKgC,kBAAkB,CAChCX,MAAO,cACPM,IAAK,YACH3B,EAAKgC,kBAAkB,CACzBX,MAAO,cACPM,IAAK,YACH3B,EAAKgC,kBAAkB,CACzBX,MAAO,cACPM,IAAK,YACH3B,EAAKgC,kBAAkB,CACzBX,MAAO,cACPM,IAAK,YACH3B,EAAKgC,kBAAkB,CACzBX,MAAO,cACPM,IAAK,YACH3B,EAAKgC,kBAAkB,CACzBX,MAAO,cACPM,IAAK,YACH,CACFN,MAAO,IACPM,IAAK,IACLL,UAAW,GACV,CACDD,MAAO,IACPM,IAAK,IACLL,UAAW,KAEZ,CACDI,UAAW,SACXJ,UAAW,EACXV,YAAa,mBAEbiB,SAAU,CAIV,CAEEI,MAAO,iDACN,CACDA,MAAO,yCACN,CACDA,MAAO,6CAER,CAEDZ,MAAO,IACPM,IAAK,KAEP,CACEN,MAAOlC,EArIQ,wBAqIa,eAC3B,CAEDkC,MAAO,IACPM,IAAK,IACLJ,SAAU,CAAC,CACTF,MAAO","file":"react-syntax-highlighter_languages_highlight_r-ca45c8ad18d7d581fc87.js","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var joined = args.map(function (x) {\n    return source(x);\n  }).join(\"\");\n  return joined;\n}\n/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: common,scientific\n*/\n\n/** @type LanguageFn */\n\n\nfunction r(hljs) {\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`…`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n  var IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n  var SIMPLE_IDENT = /[a-zA-Z][a-zA-Z_0-9]*/;\n  return {\n    name: 'R',\n    // only in Haskell, not R\n    illegal: /->/,\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword: 'function if in break next repeat else for while',\n      literal: 'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 ' + 'NA_character_|10 NA_complex_|10',\n      built_in: // Builtin constants\n      'LETTERS letters month.abb month.name pi T F ' + // Primitive functions\n      // These are all the functions in `base` that are implemented as a\n      // `.Primitive`, minus those functions that are also keywords.\n      'abs acos acosh all any anyNA Arg as.call as.character ' + 'as.complex as.double as.environment as.integer as.logical ' + 'as.null.default as.numeric as.raw asin asinh atan atanh attr ' + 'attributes baseenv browser c call ceiling class Conj cos cosh ' + 'cospi cummax cummin cumprod cumsum digamma dim dimnames ' + 'emptyenv exp expression floor forceAndCall gamma gc.time ' + 'globalenv Im interactive invisible is.array is.atomic is.call ' + 'is.character is.complex is.double is.environment is.expression ' + 'is.finite is.function is.infinite is.integer is.language ' + 'is.list is.logical is.matrix is.na is.name is.nan is.null ' + 'is.numeric is.object is.pairlist is.raw is.recursive is.single ' + 'is.symbol lazyLoadDBfetch length lgamma list log max min ' + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env ' + 'proc.time prod quote range Re rep retracemem return round ' + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt ' + 'standardGeneric substitute sum switch tan tanh tanpi tracemem ' + 'trigamma trunc unclass untracemem UseMethod xtfrm'\n    },\n    compilerExtensions: [// allow beforeMatch to act as a \"qualifier\" for the match\n    // the full match begin must be [beforeMatch][begin]\n    function (mode, parent) {\n      if (!mode.beforeMatch) return; // starts conflicts with endsParent which we need to make sure the child\n      // rule is not matched multiple times\n\n      if (mode.starts) throw new Error(\"beforeMatch cannot be used with starts\");\n      var originalMode = Object.assign({}, mode);\n      Object.keys(mode).forEach(function (key) {\n        delete mode[key];\n      });\n      mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));\n      mode.starts = {\n        relevance: 0,\n        contains: [Object.assign(originalMode, {\n          endsParent: true\n        })]\n      };\n      mode.relevance = 0;\n      delete originalMode.beforeMatch;\n    }],\n    contains: [// Roxygen comments\n    hljs.COMMENT(/#'/, /$/, {\n      contains: [{\n        // Handle `@examples` separately to cause all subsequent code\n        // until the next `@`-tag on its own line to be kept as-is,\n        // preventing highlighting. This code is example R code, so nested\n        // doctags shouldn’t be treated as such. See\n        // `test/markup/r/roxygen.txt` for an example.\n        className: 'doctag',\n        begin: '@examples',\n        starts: {\n          contains: [{\n            begin: /\\n/\n          }, {\n            begin: /#'\\s*(?=@[a-zA-Z]+)/,\n            endsParent: true\n          }, {\n            begin: /#'/,\n            end: /$/,\n            excludeBegin: true\n          }]\n        }\n      }, {\n        // Handle `@param` to highlight the parameter name following\n        // after.\n        className: 'doctag',\n        begin: '@param',\n        end: /$/,\n        contains: [{\n          className: 'variable',\n          variants: [{\n            begin: IDENT_RE\n          }, {\n            begin: /`(?:\\\\.|[^`\\\\])+`/\n          }],\n          endsParent: true\n        }]\n      }, {\n        className: 'doctag',\n        begin: /@[a-zA-Z]+/\n      }, {\n        className: 'meta-keyword',\n        begin: /\\\\[a-zA-Z]+/\n      }]\n    }), hljs.HASH_COMMENT_MODE, {\n      className: 'string',\n      contains: [hljs.BACKSLASH_ESCAPE],\n      variants: [hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\(/,\n        end: /\\)(-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\{/,\n        end: /\\}(-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\[/,\n        end: /\\](-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\(/,\n        end: /\\)(-*)'/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\{/,\n        end: /\\}(-*)'/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\[/,\n        end: /\\](-*)'/\n      }), {\n        begin: '\"',\n        end: '\"',\n        relevance: 0\n      }, {\n        begin: \"'\",\n        end: \"'\",\n        relevance: 0\n      }]\n    }, {\n      className: 'number',\n      relevance: 0,\n      beforeMatch: /([^a-zA-Z0-9._])/,\n      // not part of an identifier\n      variants: [// TODO: replace with negative look-behind when available\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n      // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n      {\n        // Special case: only hexadecimal binary powers can contain fractions.\n        match: /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/\n      }, {\n        match: /0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/\n      }, {\n        match: /(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/\n      }]\n    }, {\n      // infix operator\n      begin: '%',\n      end: '%'\n    }, // relevance boost for assignment\n    {\n      begin: concat(SIMPLE_IDENT, \"\\\\s+<-\\\\s+\")\n    }, {\n      // escaped identifier\n      begin: '`',\n      end: '`',\n      contains: [{\n        begin: /\\\\./\n      }]\n    }]\n  };\n}\n\nmodule.exports = r;"],"sourceRoot":""}